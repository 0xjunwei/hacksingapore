{"id":"1cf4d9fb0270b9300ca77687feeeca6b","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Poap.sol\";\n\ncontract Factory {\n    address[] public deployedPOAPs;\n    \n\n\n    event ContractDeployed(address indexed contractAddress);\n\n    function deployPOAP(\n        address _initialOwner,\n        string memory _poapName,\n        string memory _poapShortName,\n        string memory _poapURL\n    ) public {\n        Poap newContract = new Poap(\n            _initialOwner,\n            _poapName,\n            _poapShortName,\n            _poapURL\n        );\n        deployedPOAPs.push(address(newContract));\n        emit ContractDeployed(address(newContract));\n    }\n\n    function getDeployedContracts() public view returns (address[] memory) {\n        return deployedPOAPs;\n    }\n}\n"},"contracts/Poap.sol":{"content":"// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Poap is ERC721, Ownable {\n    uint256 private _nextTokenId;\n    string public poapURL;\n    uint256 public tokenSupply;\n    uint256 public volunteerSignUp;\n    address[] public holders;\n    bool public signUpEnabled;\n    mapping(address => bool) private signUpWallet;\n    mapping(address => uint256) private holderIndex; \n\n    constructor(\n        address initialOwner,\n        string memory _poapName,\n        string memory _poapShortName,\n        string memory _poapURL\n    ) ERC721(_poapName, _poapShortName) Ownable(initialOwner) {\n        poapURL = _poapURL;\n        signUpEnabled = true;\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return poapURL;\n    }\n\n    // Function for the owner to enable or disable sign-ups\n    function toggleSignUp() public onlyOwner {\n        signUpEnabled = !signUpEnabled;\n    }\n\n    // Function to sign up a volunteer\n    function signUp() public {\n        require(signUpEnabled, \"Sign-ups are currently disabled.\");\n        require(!signUpWallet[msg.sender], \"You have already signed up.\");\n        signUpWallet[msg.sender] = true;\n        volunteerSignUp++;\n    }\n\n    function safeMint(address to) public onlyOwner {\n        require(signUpWallet[to], \"Address has not signed up.\");\n        require(balanceOf(to) == 0, \"Address already owns a POAP\");\n        uint256 tokenId = _nextTokenId++;\n        _safeMint(to, tokenId);\n        tokenSupply++;\n        holders.push(to);\n        holderIndex[to] = holders.length - 1;\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public override {\n        require(to != address(0), \"Cannot transfer to a zero address\");\n        require(balanceOf(to) == 0, \"Recipient already owns a POAP\");\n\n        // Update the holders list\n        if (balanceOf(from) == 1) {\n            _removeHolder(from);\n        }\n\n        if (balanceOf(to) == 0) {\n            holders.push(to);\n            holderIndex[to] = holders.length - 1;\n        }\n\n        // Call the original transferFrom function\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function _removeHolder(address holder) private {\n        uint256 index = holderIndex[holder];\n        address lastHolder = holders[holders.length - 1];\n        \n        holders[index] = lastHolder; // Move the last holder to the index being removed\n        holderIndex[lastHolder] = index; // Update the moved holder's index\n\n        holders.pop(); // Remove the last holder\n        delete holderIndex[holder]; // Delete the index of the removed holder\n        \n    }\n    function getHolders() public view returns (address[] memory) {\n        return holders;\n    }\n\n\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1486],"Ownable":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":1487,"src":"128:45:0","symbolAliases":[{"foreign":{"id":2,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"136:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Context","nameLocations":["692:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1486,"src":"692:7:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"692:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"175:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":147,"linearizedBaseContracts":[147,1486],"name":"Ownable","nameLocation":"681:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8,"mutability":"mutable","name":"_owner","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":147,"src":"706:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"735:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":13,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:0","nodeType":"ErrorDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"account","nameLocation":"866:7:0","nodeType":"VariableDeclaration","scope":13,"src":"858:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:0"},"src":"825:50:0"},{"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"881:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":18,"name":"OwnableInvalidOwner","nameLocation":"974:19:0","nodeType":"ErrorDefinition","parameters":{"id":17,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"mutability":"mutable","name":"owner","nameLocation":"1002:5:0","nodeType":"VariableDeclaration","scope":18,"src":"994:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:0"},"src":"968:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":24,"name":"OwnershipTransferred","nameLocation":"1021:20:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:0","nodeType":"VariableDeclaration","scope":24,"src":"1042:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:0","nodeType":"VariableDeclaration","scope":24,"src":"1073:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:0"},"src":"1015:84:0"},{"body":{"id":49,"nodeType":"Block","src":"1259:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":30,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1273:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":33,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":32,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":31,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:0","typeDescriptions":{}}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":44,"nodeType":"IfStatement","src":"1269:95:0","trueBody":{"id":43,"nodeType":"Block","src":"1301:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":38,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:0","typeDescriptions":{}}},"id":40,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":36,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"1322:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"RevertStatement","src":"1315:38:0"}]}},{"expression":{"arguments":[{"id":46,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1392:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":45,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"1373:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":48,"nodeType":"ExpressionStatement","src":"1373:32:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"1105:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":50,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:0","nodeType":"VariableDeclaration","scope":50,"src":"1237:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"1259:0:0"},"scope":147,"src":"1225:187:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":57,"nodeType":"Block","src":"1521:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":53,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1531:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":55,"nodeType":"ExpressionStatement","src":"1531:13:0"},{"id":56,"nodeType":"PlaceholderStatement","src":"1554:1:0"}]},"documentation":{"id":51,"nodeType":"StructuredDocumentation","src":"1418:77:0","text":" @dev Throws if called by any account other than the owner."},"id":58,"name":"onlyOwner","nameLocation":"1509:9:0","nodeType":"ModifierDefinition","parameters":{"id":52,"nodeType":"ParameterList","parameters":[],"src":"1518:2:0"},"src":"1500:62:0","virtual":false,"visibility":"internal"},{"body":{"id":66,"nodeType":"Block","src":"1693:30:0","statements":[{"expression":{"id":64,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1710:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":63,"id":65,"nodeType":"Return","src":"1703:13:0"}]},"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"1568:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":67,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"1652:2:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67,"src":"1684:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:0"},"scope":147,"src":"1638:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":83,"nodeType":"Block","src":"1841:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":75,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":71,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67,"src":"1855:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"1866:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":82,"nodeType":"IfStatement","src":"1851:101:0","trueBody":{"id":81,"nodeType":"Block","src":"1880:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"1928:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"1901:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"RevertStatement","src":"1894:47:0"}]}}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"1729:62:0","text":" @dev Throws if the sender is not the owner."},"id":84,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"1816:2:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"1841:0:0"},"scope":147,"src":"1796:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":97,"nodeType":"Block","src":"2347:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":93,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:0","typeDescriptions":{}}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":90,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2357:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":96,"nodeType":"ExpressionStatement","src":"2357:30:0"}]},"documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"1964:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":98,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2337:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2337:9:0"},"nodeType":"ModifierInvocation","src":"2337:9:0"}],"name":"renounceOwnership","nameLocation":"2302:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"2319:2:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2347:0:0"},"scope":147,"src":"2293:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":125,"nodeType":"Block","src":"2613:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":106,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2627:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:0","typeDescriptions":{}}},"id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2623:91:0","trueBody":{"id":119,"nodeType":"Block","src":"2651:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:0","typeDescriptions":{}}},"id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":112,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2672:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2665:38:0"}]}},{"expression":{"arguments":[{"id":122,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"2742:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":121,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"2723:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":124,"nodeType":"ExpressionStatement","src":"2723:28:0"}]},"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"2400:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":126,"implemented":true,"kind":"function","modifiers":[{"id":104,"kind":"modifierInvocation","modifierName":{"id":103,"name":"onlyOwner","nameLocations":["2603:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"2603:9:0"},"nodeType":"ModifierInvocation","src":"2603:9:0"}],"name":"transferOwnership","nameLocation":"2552:17:0","nodeType":"FunctionDefinition","parameters":{"id":102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":101,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:0","nodeType":"VariableDeclaration","scope":126,"src":"2570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":100,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:0"},"returnParameters":{"id":105,"nodeType":"ParameterList","parameters":[],"src":"2613:0:0"},"scope":147,"src":"2543:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":145,"nodeType":"Block","src":"2975:124:0","statements":[{"assignments":[133],"declarations":[{"constant":false,"id":133,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:0","nodeType":"VariableDeclaration","scope":145,"src":"2985:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":135,"initialValue":{"id":134,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3004:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:0"},{"expression":{"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":136,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3020:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":137,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3029:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3020:17:0"},{"eventCall":{"arguments":[{"id":141,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3073:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":142,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"3083:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":140,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3052:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":144,"nodeType":"EmitStatement","src":"3047:45:0"}]},"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"2764:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:0","nodeType":"FunctionDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:0","nodeType":"VariableDeclaration","scope":146,"src":"2940:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:0"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"2975:0:0"},"scope":147,"src":"2912:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":148,"src":"663:2438:0","usedErrors":[13,18],"usedEvents":[24]}],"src":"102:3000:0"},"id":0},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[284],"IERC20Errors":[189],"IERC721Errors":[237]},"id":285,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"138:139:1","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":189,"linearizedBaseContracts":[189],"name":"IERC20Errors","nameLocation":"288:12:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":151,"nodeType":"StructuredDocumentation","src":"307:309:1","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":159,"name":"ERC20InsufficientBalance","nameLocation":"627:24:1","nodeType":"ErrorDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"sender","nameLocation":"660:6:1","nodeType":"VariableDeclaration","scope":159,"src":"652:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":155,"mutability":"mutable","name":"balance","nameLocation":"676:7:1","nodeType":"VariableDeclaration","scope":159,"src":"668:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":154,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"needed","nameLocation":"693:6:1","nodeType":"VariableDeclaration","scope":159,"src":"685:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":156,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:1"},"src":"621:80:1"},{"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"707:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":164,"name":"ERC20InvalidSender","nameLocation":"870:18:1","nodeType":"ErrorDefinition","parameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"sender","nameLocation":"897:6:1","nodeType":"VariableDeclaration","scope":164,"src":"889:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:1"},"src":"864:41:1"},{"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"911:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":169,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:1","nodeType":"ErrorDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:1","nodeType":"VariableDeclaration","scope":169,"src":"1102:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:1"},"src":"1075:45:1"},{"documentation":{"id":170,"nodeType":"StructuredDocumentation","src":"1126:345:1","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":178,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:1","nodeType":"ErrorDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"spender","nameLocation":"1517:7:1","nodeType":"VariableDeclaration","scope":178,"src":"1509:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":171,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":174,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:1","nodeType":"VariableDeclaration","scope":178,"src":"1526:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":173,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"needed","nameLocation":"1553:6:1","nodeType":"VariableDeclaration","scope":178,"src":"1545:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":175,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:1"},"src":"1476:85:1"},{"documentation":{"id":179,"nodeType":"StructuredDocumentation","src":"1567:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":183,"name":"ERC20InvalidApprover","nameLocation":"1752:20:1","nodeType":"ErrorDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":181,"mutability":"mutable","name":"approver","nameLocation":"1781:8:1","nodeType":"VariableDeclaration","scope":183,"src":"1773:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":180,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:1"},"src":"1746:45:1"},{"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1797:195:1","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":188,"name":"ERC20InvalidSpender","nameLocation":"2003:19:1","nodeType":"ErrorDefinition","parameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"spender","nameLocation":"2031:7:1","nodeType":"VariableDeclaration","scope":188,"src":"2023:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:1"},"src":"1997:43:1"}],"scope":285,"src":"278:1764:1","usedErrors":[159,164,169,178,183,188],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":190,"nodeType":"StructuredDocumentation","src":"2044:141:1","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":237,"linearizedBaseContracts":[237],"name":"IERC721Errors","nameLocation":"2196:13:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"2216:219:1","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":195,"name":"ERC721InvalidOwner","nameLocation":"2446:18:1","nodeType":"ErrorDefinition","parameters":{"id":194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"owner","nameLocation":"2473:5:1","nodeType":"VariableDeclaration","scope":195,"src":"2465:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:1"},"src":"2440:40:1"},{"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"2486:132:1","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":200,"name":"ERC721NonexistentToken","nameLocation":"2629:22:1","nodeType":"ErrorDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:1","nodeType":"VariableDeclaration","scope":200,"src":"2652:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":197,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:1"},"src":"2623:46:1"},{"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"2675:289:1","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":209,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:1","nodeType":"ErrorDefinition","parameters":{"id":208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":203,"mutability":"mutable","name":"sender","nameLocation":"3004:6:1","nodeType":"VariableDeclaration","scope":209,"src":"2996:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":202,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":205,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:1","nodeType":"VariableDeclaration","scope":209,"src":"3012:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":204,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":207,"mutability":"mutable","name":"owner","nameLocation":"3037:5:1","nodeType":"VariableDeclaration","scope":209,"src":"3029:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":206,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:1"},"src":"2969:75:1"},{"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"3050:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":214,"name":"ERC721InvalidSender","nameLocation":"3213:19:1","nodeType":"ErrorDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"sender","nameLocation":"3241:6:1","nodeType":"VariableDeclaration","scope":214,"src":"3233:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":211,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:1"},"src":"3207:42:1"},{"documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"3255:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":219,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:1","nodeType":"ErrorDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":217,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:1","nodeType":"VariableDeclaration","scope":219,"src":"3447:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":216,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:1"},"src":"3419:46:1"},{"documentation":{"id":220,"nodeType":"StructuredDocumentation","src":"3471:247:1","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":226,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:1","nodeType":"ErrorDefinition","parameters":{"id":225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"operator","nameLocation":"3764:8:1","nodeType":"VariableDeclaration","scope":226,"src":"3756:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":224,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:1","nodeType":"VariableDeclaration","scope":226,"src":"3774:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:1"},"src":"3723:68:1"},{"documentation":{"id":227,"nodeType":"StructuredDocumentation","src":"3797:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":231,"name":"ERC721InvalidApprover","nameLocation":"3982:21:1","nodeType":"ErrorDefinition","parameters":{"id":230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"approver","nameLocation":"4012:8:1","nodeType":"VariableDeclaration","scope":231,"src":"4004:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:1"},"src":"3976:46:1"},{"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"4028:197:1","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":236,"name":"ERC721InvalidOperator","nameLocation":"4236:21:1","nodeType":"ErrorDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":234,"mutability":"mutable","name":"operator","nameLocation":"4266:8:1","nodeType":"VariableDeclaration","scope":236,"src":"4258:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:1"},"src":"4230:46:1"}],"scope":285,"src":"2186:2092:1","usedErrors":[195,200,209,214,219,226,231,236],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"4280:143:1","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":284,"linearizedBaseContracts":[284],"name":"IERC1155Errors","nameLocation":"4434:14:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":239,"nodeType":"StructuredDocumentation","src":"4455:361:1","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":249,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:1","nodeType":"ErrorDefinition","parameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"sender","nameLocation":"4862:6:1","nodeType":"VariableDeclaration","scope":249,"src":"4854:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":240,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"balance","nameLocation":"4878:7:1","nodeType":"VariableDeclaration","scope":249,"src":"4870:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":242,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":245,"mutability":"mutable","name":"needed","nameLocation":"4895:6:1","nodeType":"VariableDeclaration","scope":249,"src":"4887:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":247,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:1","nodeType":"VariableDeclaration","scope":249,"src":"4903:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":246,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:1"},"src":"4821:99:1"},{"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"4926:152:1","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":254,"name":"ERC1155InvalidSender","nameLocation":"5089:20:1","nodeType":"ErrorDefinition","parameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"sender","nameLocation":"5118:6:1","nodeType":"VariableDeclaration","scope":254,"src":"5110:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:1"},"src":"5083:43:1"},{"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"5132:159:1","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":259,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:1","nodeType":"ErrorDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:1","nodeType":"VariableDeclaration","scope":259,"src":"5325:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:1"},"src":"5296:47:1"},{"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"5349:256:1","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":266,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:1","nodeType":"ErrorDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"operator","nameLocation":"5653:8:1","nodeType":"VariableDeclaration","scope":266,"src":"5645:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"owner","nameLocation":"5671:5:1","nodeType":"VariableDeclaration","scope":266,"src":"5663:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:1"},"src":"5610:68:1"},{"documentation":{"id":267,"nodeType":"StructuredDocumentation","src":"5684:174:1","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":271,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:1","nodeType":"ErrorDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"approver","nameLocation":"5900:8:1","nodeType":"VariableDeclaration","scope":271,"src":"5892:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:1"},"src":"5863:47:1"},{"documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"5916:197:1","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":276,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:1","nodeType":"ErrorDefinition","parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"operator","nameLocation":"6155:8:1","nodeType":"VariableDeclaration","scope":276,"src":"6147:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":273,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:1"},"src":"6118:47:1"},{"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"6171:280:1","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":283,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:1","nodeType":"ErrorDefinition","parameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:1","nodeType":"VariableDeclaration","scope":283,"src":"6488:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":281,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:1","nodeType":"VariableDeclaration","scope":283,"src":"6507:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:1"},"src":"6456:73:1"}],"scope":285,"src":"4424:2107:1","usedErrors":[249,254,259,266,271,276,283],"usedEvents":[]}],"src":"112:6420:1"},"id":1},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[1486],"ERC165":[1765],"ERC721":[1293],"IERC165":[1777],"IERC721":[1410],"IERC721Errors":[237],"IERC721Metadata":[1456],"IERC721Receiver":[1428],"Strings":[1741]},"id":1294,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":286,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:2"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":288,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1294,"sourceUnit":1411,"src":"133:38:2","symbolAliases":[{"foreign":{"id":287,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"141:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":290,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1294,"sourceUnit":1429,"src":"172:54:2","symbolAliases":[{"foreign":{"id":289,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"180:15:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":292,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1294,"sourceUnit":1457,"src":"227:65:2","symbolAliases":[{"foreign":{"id":291,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"235:15:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":294,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1294,"sourceUnit":1487,"src":"293:48:2","symbolAliases":[{"foreign":{"id":293,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"301:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":296,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1294,"sourceUnit":1742,"src":"342:48:2","symbolAliases":[{"foreign":{"id":295,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"350:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":299,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1294,"sourceUnit":1766,"src":"391:69:2","symbolAliases":[{"foreign":{"id":297,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"399:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":298,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"408:6:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":301,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1294,"sourceUnit":285,"src":"461:66:2","symbolAliases":[{"foreign":{"id":300,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"469:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":303,"name":"Context","nameLocations":["804:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1486,"src":"804:7:2"},"id":304,"nodeType":"InheritanceSpecifier","src":"804:7:2"},{"baseName":{"id":305,"name":"ERC165","nameLocations":["813:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":1765,"src":"813:6:2"},"id":306,"nodeType":"InheritanceSpecifier","src":"813:6:2"},{"baseName":{"id":307,"name":"IERC721","nameLocations":["821:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1410,"src":"821:7:2"},"id":308,"nodeType":"InheritanceSpecifier","src":"821:7:2"},{"baseName":{"id":309,"name":"IERC721Metadata","nameLocations":["830:15:2"],"nodeType":"IdentifierPath","referencedDeclaration":1456,"src":"830:15:2"},"id":310,"nodeType":"InheritanceSpecifier","src":"830:15:2"},{"baseName":{"id":311,"name":"IERC721Errors","nameLocations":["847:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":237,"src":"847:13:2"},"id":312,"nodeType":"InheritanceSpecifier","src":"847:13:2"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"529:246:2","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1293,"linearizedBaseContracts":[1293,237,1456,1410,1765,1777,1486],"name":"ERC721","nameLocation":"794:6:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":315,"libraryName":{"id":313,"name":"Strings","nameLocations":["873:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1741,"src":"873:7:2"},"nodeType":"UsingForDirective","src":"867:26:2","typeName":{"id":314,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":317,"mutability":"mutable","name":"_name","nameLocation":"932:5:2","nodeType":"VariableDeclaration","scope":1293,"src":"917:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":316,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":319,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:2","nodeType":"VariableDeclaration","scope":1293,"src":"964:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":318,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":323,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:2","nodeType":"VariableDeclaration","scope":1293,"src":"993:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":322,"keyName":"tokenId","keyNameLocation":"1009:7:2","keyType":{"id":320,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":327,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:2","nodeType":"VariableDeclaration","scope":1293,"src":"1051:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":326,"keyName":"owner","keyNameLocation":"1067:5:2","keyType":{"id":324,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":331,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:2","nodeType":"VariableDeclaration","scope":1293,"src":"1109:59:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":330,"keyName":"tokenId","keyNameLocation":"1125:7:2","keyType":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":337,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:2","nodeType":"VariableDeclaration","scope":1293,"src":"1175:86:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":336,"keyName":"owner","keyNameLocation":"1191:5:2","keyType":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":335,"keyName":"operator","keyNameLocation":"1216:8:2","keyType":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":334,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":353,"nodeType":"Block","src":"1437:57:2","statements":[{"expression":{"id":347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":345,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"1447:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":346,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":340,"src":"1455:5:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":348,"nodeType":"ExpressionStatement","src":"1447:13:2"},{"expression":{"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":349,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"1470:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":350,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"1480:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":352,"nodeType":"ExpressionStatement","src":"1470:17:2"}]},"documentation":{"id":338,"nodeType":"StructuredDocumentation","src":"1268:108:2","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":354,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":340,"mutability":"mutable","name":"name_","nameLocation":"1407:5:2","nodeType":"VariableDeclaration","scope":354,"src":"1393:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":339,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":342,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:2","nodeType":"VariableDeclaration","scope":354,"src":"1414:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":341,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:2"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[],"src":"1437:0:2"},"scope":1293,"src":"1381:113:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1764,1776],"body":{"id":384,"nodeType":"Block","src":"1669:192:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":365,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"1698:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":367,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"1718:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1410_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1410_$","typeString":"type(contract IERC721)"}],"id":366,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1713:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1410","typeString":"type(contract IERC721)"}},"id":369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":371,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"1754:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":373,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"1774:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1456_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1456_$","typeString":"type(contract IERC721Metadata)"}],"id":372,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1769:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1456","typeString":"type(contract IERC721Metadata)"}},"id":375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":380,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"1842:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":378,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1818:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1293_$","typeString":"type(contract super ERC721)"}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:2","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1764,"src":"1818:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":364,"id":383,"nodeType":"Return","src":"1679:175:2"}]},"documentation":{"id":355,"nodeType":"StructuredDocumentation","src":"1500:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":385,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:2","nodeType":"FunctionDefinition","overrides":{"id":361,"nodeType":"OverrideSpecifier","overrides":[{"id":359,"name":"ERC165","nameLocations":["1637:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":1765,"src":"1637:6:2"},{"id":360,"name":"IERC165","nameLocations":["1645:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1777,"src":"1645:7:2"}],"src":"1628:25:2"},"parameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:2","nodeType":"VariableDeclaration","scope":385,"src":"1588:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":356,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:2"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":385,"src":"1663:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":362,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:2"},"scope":1293,"src":"1561:300:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1335],"body":{"id":412,"nodeType":"Block","src":"1992:136:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":393,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"2006:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":394,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:2","typeDescriptions":{}}},"id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":407,"nodeType":"IfStatement","src":"2002:87:2","trueBody":{"id":406,"nodeType":"Block","src":"2027:62:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:2","typeDescriptions":{}}},"id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":399,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2048:18:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"RevertStatement","src":"2041:37:2"}]}},{"expression":{"baseExpression":{"id":408,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2105:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":410,"indexExpression":{"id":409,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"2115:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":392,"id":411,"nodeType":"Return","src":"2098:23:2"}]},"documentation":{"id":386,"nodeType":"StructuredDocumentation","src":"1867:48:2","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":413,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:2","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":388,"mutability":"mutable","name":"owner","nameLocation":"1947:5:2","nodeType":"VariableDeclaration","scope":413,"src":"1939:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:2"},"returnParameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"1983:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":390,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:2"},"scope":1293,"src":"1920:208:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1343],"body":{"id":425,"nodeType":"Block","src":"2257:46:2","statements":[{"expression":{"arguments":[{"id":422,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"2288:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":421,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"2274:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":420,"id":424,"nodeType":"Return","src":"2267:29:2"}]},"documentation":{"id":414,"nodeType":"StructuredDocumentation","src":"2134:46:2","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":426,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:2","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:2","nodeType":"VariableDeclaration","scope":426,"src":"2202:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":415,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:2"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":426,"src":"2248:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":418,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:2"},"scope":1293,"src":"2185:118:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1441],"body":{"id":434,"nodeType":"Block","src":"2425:29:2","statements":[{"expression":{"id":432,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"2442:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":431,"id":433,"nodeType":"Return","src":"2435:12:2"}]},"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"2309:51:2","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":435,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:2","nodeType":"FunctionDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"2378:2:2"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":435,"src":"2410:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":429,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:2"},"scope":1293,"src":"2365:89:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1447],"body":{"id":443,"nodeType":"Block","src":"2580:31:2","statements":[{"expression":{"id":441,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2597:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":440,"id":442,"nodeType":"Return","src":"2590:14:2"}]},"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"2460:53:2","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":444,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:2","nodeType":"FunctionDefinition","parameters":{"id":437,"nodeType":"ParameterList","parameters":[],"src":"2533:2:2"},"returnParameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":444,"src":"2565:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":438,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:2"},"scope":1293,"src":"2518:93:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1455],"body":{"id":479,"nodeType":"Block","src":"2756:176:2","statements":[{"expression":{"arguments":[{"id":453,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"2780:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":452,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"2766:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":455,"nodeType":"ExpressionStatement","src":"2766:22:2"},{"assignments":[457],"declarations":[{"constant":false,"id":457,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:2","nodeType":"VariableDeclaration","scope":479,"src":"2799:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":456,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":460,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":458,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"2823:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:2"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":463,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"2856:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":461,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:2","typeDescriptions":{}}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:2","memberName":"length","nodeType":"MemberAccess","src":"2850:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:2","trueExpression":{"arguments":[{"id":471,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"2892:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":472,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"2901:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:2","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1554,"src":"2901:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":468,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:2","typeDescriptions":{}}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:2","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:2","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":451,"id":478,"nodeType":"Return","src":"2843:82:2"}]},"documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"2617:55:2","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":480,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:2","nodeType":"FunctionDefinition","parameters":{"id":448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:2","nodeType":"VariableDeclaration","scope":480,"src":"2695:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:2"},"returnParameters":{"id":451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":450,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":480,"src":"2741:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":449,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:2"},"scope":1293,"src":"2677:255:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":488,"nodeType":"Block","src":"3240:26:2","statements":[{"expression":{"hexValue":"","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":485,"id":487,"nodeType":"Return","src":"3250:9:2"}]},"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"2938:231:2","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":489,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:2","nodeType":"FunctionDefinition","parameters":{"id":482,"nodeType":"ParameterList","parameters":[],"src":"3191:2:2"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":489,"src":"3225:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":483,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:2"},"scope":1293,"src":"3174:92:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1383],"body":{"id":504,"nodeType":"Block","src":"3384:52:2","statements":[{"expression":{"arguments":[{"id":498,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"3403:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":499,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":494,"src":"3407:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":500,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"3416:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":497,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1096,1162],"referencedDeclaration":1096,"src":"3394:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":503,"nodeType":"ExpressionStatement","src":"3394:35:2"}]},"documentation":{"id":490,"nodeType":"StructuredDocumentation","src":"3272:46:2","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":505,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:2","nodeType":"FunctionDefinition","parameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"to","nameLocation":"3348:2:2","nodeType":"VariableDeclaration","scope":505,"src":"3340:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":494,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:2","nodeType":"VariableDeclaration","scope":505,"src":"3352:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:2"},"returnParameters":{"id":496,"nodeType":"ParameterList","parameters":[],"src":"3384:0:2"},"scope":1293,"src":"3323:113:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1399],"body":{"id":521,"nodeType":"Block","src":"3573:78:2","statements":[{"expression":{"arguments":[{"id":514,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3597:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":513,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"3583:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":516,"nodeType":"ExpressionStatement","src":"3583:22:2"},{"expression":{"arguments":[{"id":518,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3636:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":517,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"3623:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":512,"id":520,"nodeType":"Return","src":"3616:28:2"}]},"documentation":{"id":506,"nodeType":"StructuredDocumentation","src":"3442:50:2","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":522,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:2","nodeType":"FunctionDefinition","parameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:2","nodeType":"VariableDeclaration","scope":522,"src":"3518:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":507,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:2"},"returnParameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":522,"src":"3564:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":510,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:2"},"scope":1293,"src":"3497:154:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1391],"body":{"id":537,"nodeType":"Block","src":"3793:69:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":531,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"3822:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":533,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"3836:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":534,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"3846:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":530,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"3803:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":536,"nodeType":"ExpressionStatement","src":"3803:52:2"}]},"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"3657:56:2","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":538,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:2","nodeType":"FunctionDefinition","parameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"operator","nameLocation":"3753:8:2","nodeType":"VariableDeclaration","scope":538,"src":"3745:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"approved","nameLocation":"3768:8:2","nodeType":"VariableDeclaration","scope":538,"src":"3763:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":526,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:2"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[],"src":"3793:0:2"},"scope":1293,"src":"3718:144:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1409],"body":{"id":554,"nodeType":"Block","src":"4022:59:2","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":548,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"4039:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":550,"indexExpression":{"id":549,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"4058:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":552,"indexExpression":{"id":551,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"4065:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":547,"id":553,"nodeType":"Return","src":"4032:42:2"}]},"documentation":{"id":539,"nodeType":"StructuredDocumentation","src":"3868:55:2","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":555,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:2","nodeType":"FunctionDefinition","parameters":{"id":544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":541,"mutability":"mutable","name":"owner","nameLocation":"3962:5:2","nodeType":"VariableDeclaration","scope":555,"src":"3954:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":543,"mutability":"mutable","name":"operator","nameLocation":"3977:8:2","nodeType":"VariableDeclaration","scope":555,"src":"3969:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":542,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:2"},"returnParameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":555,"src":"4016:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":545,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:2"},"scope":1293,"src":"3928:153:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1375],"body":{"id":600,"nodeType":"Block","src":"4223:498:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":565,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4237:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":566,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:2","typeDescriptions":{}}},"id":569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":579,"nodeType":"IfStatement","src":"4233:87:2","trueBody":{"id":578,"nodeType":"Block","src":"4255:65:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":572,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:2","typeDescriptions":{}}},"id":575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":571,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"4276:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":577,"nodeType":"RevertStatement","src":"4269:40:2"}]}},{"assignments":[581],"declarations":[{"constant":false,"id":581,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:2","nodeType":"VariableDeclaration","scope":600,"src":"4538:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":588,"initialValue":{"arguments":[{"id":583,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4570:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":584,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4574:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":585,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"4583:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":582,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"4562:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":589,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"4610:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":590,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"4627:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":599,"nodeType":"IfStatement","src":"4606:109:2","trueBody":{"id":598,"nodeType":"Block","src":"4633:82:2","statements":[{"errorCall":{"arguments":[{"id":593,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"4675:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":594,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4681:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":595,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"4690:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":592,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"4654:20:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":597,"nodeType":"RevertStatement","src":"4647:57:2"}]}}]},"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"4087:51:2","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":601,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:2","nodeType":"FunctionDefinition","parameters":{"id":563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"from","nameLocation":"4173:4:2","nodeType":"VariableDeclaration","scope":601,"src":"4165:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":557,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":560,"mutability":"mutable","name":"to","nameLocation":"4187:2:2","nodeType":"VariableDeclaration","scope":601,"src":"4179:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:2","nodeType":"VariableDeclaration","scope":601,"src":"4191:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":561,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:2"},"returnParameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"4223:0:2"},"scope":1293,"src":"4143:578:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1365],"body":{"id":618,"nodeType":"Block","src":"4863:56:2","statements":[{"expression":{"arguments":[{"id":612,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4890:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":613,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"4896:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":614,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"4900:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":611,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[619,645],"referencedDeclaration":645,"src":"4873:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":617,"nodeType":"ExpressionStatement","src":"4873:39:2"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"4727:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":619,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:2","nodeType":"FunctionDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"from","nameLocation":"4821:4:2","nodeType":"VariableDeclaration","scope":619,"src":"4813:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":603,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"to","nameLocation":"4835:2:2","nodeType":"VariableDeclaration","scope":619,"src":"4827:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:2","nodeType":"VariableDeclaration","scope":619,"src":"4839:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":607,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:2"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[],"src":"4863:0:2"},"scope":1293,"src":"4787:132:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1355],"body":{"id":644,"nodeType":"Block","src":"5088:105:2","statements":[{"expression":{"arguments":[{"id":632,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"5111:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":633,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"5117:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":634,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"5121:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":631,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"5098:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":636,"nodeType":"ExpressionStatement","src":"5098:31:2"},{"expression":{"arguments":[{"id":638,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"5162:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":639,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"5168:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":640,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"5172:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":641,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"5181:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":637,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"5139:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"5139:47:2"}]},"documentation":{"id":620,"nodeType":"StructuredDocumentation","src":"4925:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":645,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:2","nodeType":"FunctionDefinition","parameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"mutability":"mutable","name":"from","nameLocation":"5019:4:2","nodeType":"VariableDeclaration","scope":645,"src":"5011:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":621,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":624,"mutability":"mutable","name":"to","nameLocation":"5033:2:2","nodeType":"VariableDeclaration","scope":645,"src":"5025:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":626,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:2","nodeType":"VariableDeclaration","scope":645,"src":"5037:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":625,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":628,"mutability":"mutable","name":"data","nameLocation":"5067:4:2","nodeType":"VariableDeclaration","scope":645,"src":"5054:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":627,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:2"},"returnParameters":{"id":630,"nodeType":"ParameterList","parameters":[],"src":"5088:0:2"},"scope":1293,"src":"4985:208:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":657,"nodeType":"Block","src":"5782:40:2","statements":[{"expression":{"baseExpression":{"id":653,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"5799:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":655,"indexExpression":{"id":654,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"5807:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":652,"id":656,"nodeType":"Return","src":"5792:23:2"}]},"documentation":{"id":646,"nodeType":"StructuredDocumentation","src":"5199:503:2","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:2","nodeType":"FunctionDefinition","parameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:2","nodeType":"VariableDeclaration","scope":658,"src":"5725:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:2"},"returnParameters":{"id":652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":658,"src":"5773:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:2"},"scope":1293,"src":"5707:115:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":670,"nodeType":"Block","src":"6017:48:2","statements":[{"expression":{"baseExpression":{"id":666,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"6034:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":668,"indexExpression":{"id":667,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"6050:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":665,"id":669,"nodeType":"Return","src":"6027:31:2"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"5828:105:2","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":671,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:2","nodeType":"FunctionDefinition","parameters":{"id":662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":661,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:2","nodeType":"VariableDeclaration","scope":671,"src":"5960:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":660,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:2"},"returnParameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":671,"src":"6008:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:2"},"scope":1293,"src":"5938:127:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":706,"nodeType":"Block","src":"6485:163:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":683,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6514:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":684,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:2","typeDescriptions":{}}},"id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":689,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"6552:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":690,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6561:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":693,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"6589:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":694,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6596:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":692,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"6572:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":698,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":678,"src":"6621:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":697,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"6608:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":700,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6633:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":703,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":682,"id":705,"nodeType":"Return","src":"6495:146:2"}]},"documentation":{"id":672,"nodeType":"StructuredDocumentation","src":"6071:300:2","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":707,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:2","nodeType":"FunctionDefinition","parameters":{"id":679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"owner","nameLocation":"6407:5:2","nodeType":"VariableDeclaration","scope":707,"src":"6399:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":673,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":676,"mutability":"mutable","name":"spender","nameLocation":"6422:7:2","nodeType":"VariableDeclaration","scope":707,"src":"6414:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":675,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":678,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:2","nodeType":"VariableDeclaration","scope":707,"src":"6431:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":677,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:2"},"returnParameters":{"id":682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":707,"src":"6479:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":680,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:2"},"scope":1293,"src":"6376:272:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":743,"nodeType":"Block","src":"7179:271:2","statements":[{"condition":{"id":722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:2","subExpression":{"arguments":[{"id":718,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"7208:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":719,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"7215:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":720,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"7224:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":717,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"7194:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":742,"nodeType":"IfStatement","src":"7189:255:2","trueBody":{"id":741,"nodeType":"Block","src":"7234:210:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":723,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"7252:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":724,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:2","typeDescriptions":{}}},"id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":739,"nodeType":"Block","src":"7350:84:2","statements":[{"errorCall":{"arguments":[{"id":735,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"7402:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":736,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"7411:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":734,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7375:26:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":738,"nodeType":"RevertStatement","src":"7368:51:2"}]},"id":740,"nodeType":"IfStatement","src":"7248:186:2","trueBody":{"id":733,"nodeType":"Block","src":"7273:71:2","statements":[{"errorCall":{"arguments":[{"id":730,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"7321:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":729,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"7298:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":732,"nodeType":"RevertStatement","src":"7291:38:2"}]}}]}}]},"documentation":{"id":708,"nodeType":"StructuredDocumentation","src":"6654:423:2","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":744,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:2","nodeType":"FunctionDefinition","parameters":{"id":715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"owner","nameLocation":"7116:5:2","nodeType":"VariableDeclaration","scope":744,"src":"7108:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":709,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":712,"mutability":"mutable","name":"spender","nameLocation":"7131:7:2","nodeType":"VariableDeclaration","scope":744,"src":"7123:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":711,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":714,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:2","nodeType":"VariableDeclaration","scope":744,"src":"7140:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":713,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:2"},"returnParameters":{"id":716,"nodeType":"ParameterList","parameters":[],"src":"7179:0:2"},"scope":1293,"src":"7082:368:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":759,"nodeType":"Block","src":"8167:78:2","statements":[{"id":758,"nodeType":"UncheckedBlock","src":"8177:62:2","statements":[{"expression":{"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":752,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"8201:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":754,"indexExpression":{"id":753,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"8211:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"8223:5:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":757,"nodeType":"ExpressionStatement","src":"8201:27:2"}]}]},"documentation":{"id":745,"nodeType":"StructuredDocumentation","src":"7456:631:2","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":760,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:2","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"account","nameLocation":"8126:7:2","nodeType":"VariableDeclaration","scope":760,"src":"8118:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":746,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":749,"mutability":"mutable","name":"value","nameLocation":"8143:5:2","nodeType":"VariableDeclaration","scope":760,"src":"8135:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":748,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:2","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:2"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[],"src":"8167:0:2"},"scope":1293,"src":"8092:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":849,"nodeType":"Block","src":"8933:700:2","statements":[{"assignments":[773],"declarations":[{"constant":false,"id":773,"mutability":"mutable","name":"from","nameLocation":"8951:4:2","nodeType":"VariableDeclaration","scope":849,"src":"8943:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":772,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":777,"initialValue":{"arguments":[{"id":775,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"8967:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":774,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"8958:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":778,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"9035:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":779,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:2","typeDescriptions":{}}},"id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":791,"nodeType":"IfStatement","src":"9031:86:2","trueBody":{"id":790,"nodeType":"Block","src":"9055:62:2","statements":[{"expression":{"arguments":[{"id":785,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"9086:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":786,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"9092:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":787,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"9098:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":784,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":744,"src":"9069:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":789,"nodeType":"ExpressionStatement","src":"9069:37:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":792,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"9161:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:2","typeDescriptions":{}}},"id":796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":819,"nodeType":"IfStatement","src":"9157:256:2","trueBody":{"id":818,"nodeType":"Block","src":"9181:232:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":799,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:2","typeDescriptions":{}}},"id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":803,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"9298:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":804,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:2","typeDescriptions":{}}},"id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":798,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1096,1162],"referencedDeclaration":1162,"src":"9277:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":810,"nodeType":"ExpressionStatement","src":"9277:48:2"},{"id":817,"nodeType":"UncheckedBlock","src":"9340:63:2","statements":[{"expression":{"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":811,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"9368:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":813,"indexExpression":{"id":812,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"9378:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":816,"nodeType":"ExpressionStatement","src":"9368:20:2"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":820,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"9427:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:2","typeDescriptions":{}}},"id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":834,"nodeType":"IfStatement","src":"9423:107:2","trueBody":{"id":833,"nodeType":"Block","src":"9445:85:2","statements":[{"id":832,"nodeType":"UncheckedBlock","src":"9459:61:2","statements":[{"expression":{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":826,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"9487:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":828,"indexExpression":{"id":827,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"9497:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":831,"nodeType":"ExpressionStatement","src":"9487:18:2"}]}]}},{"expression":{"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":835,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"9540:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":837,"indexExpression":{"id":836,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"9548:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":838,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"9559:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":840,"nodeType":"ExpressionStatement","src":"9540:21:2"},{"eventCall":{"arguments":[{"id":842,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"9586:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":843,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"9592:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":844,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"9596:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":841,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"9577:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"EmitStatement","src":"9572:32:2"},{"expression":{"id":847,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"9622:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":771,"id":848,"nodeType":"Return","src":"9615:11:2"}]},"documentation":{"id":761,"nodeType":"StructuredDocumentation","src":"8251:582:2","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":850,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:2","nodeType":"FunctionDefinition","parameters":{"id":768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"to","nameLocation":"8863:2:2","nodeType":"VariableDeclaration","scope":850,"src":"8855:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":765,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:2","nodeType":"VariableDeclaration","scope":850,"src":"8867:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":767,"mutability":"mutable","name":"auth","nameLocation":"8892:4:2","nodeType":"VariableDeclaration","scope":850,"src":"8884:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":766,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:2"},"returnParameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":850,"src":"8924:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:2"},"scope":1293,"src":"8838:795:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":899,"nodeType":"Block","src":"10008:274:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":858,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"10022:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":859,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:2","typeDescriptions":{}}},"id":862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":872,"nodeType":"IfStatement","src":"10018:87:2","trueBody":{"id":871,"nodeType":"Block","src":"10040:65:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:2","typeDescriptions":{}}},"id":868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":864,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"10061:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":870,"nodeType":"RevertStatement","src":"10054:40:2"}]}},{"assignments":[874],"declarations":[{"constant":false,"id":874,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:2","nodeType":"VariableDeclaration","scope":899,"src":"10114:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":883,"initialValue":{"arguments":[{"id":876,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"10146:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"10150:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":878,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:2","typeDescriptions":{}}},"id":881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":875,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"10138:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":884,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"10184:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":885,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:2","typeDescriptions":{}}},"id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":898,"nodeType":"IfStatement","src":"10180:96:2","trueBody":{"id":897,"nodeType":"Block","src":"10213:63:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":892,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:2","typeDescriptions":{}}},"id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":890,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"10234:19:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":896,"nodeType":"RevertStatement","src":"10227:38:2"}]}}]},"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"9639:311:2","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":900,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:2","nodeType":"FunctionDefinition","parameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"to","nameLocation":"9978:2:2","nodeType":"VariableDeclaration","scope":900,"src":"9970:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:2","nodeType":"VariableDeclaration","scope":900,"src":"9982:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:2"},"returnParameters":{"id":857,"nodeType":"ParameterList","parameters":[],"src":"10008:0:2"},"scope":1293,"src":"9955:327:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":914,"nodeType":"Block","src":"10690:43:2","statements":[{"expression":{"arguments":[{"id":909,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"10710:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":910,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"10714:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":908,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[915,941],"referencedDeclaration":941,"src":"10700:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":913,"nodeType":"ExpressionStatement","src":"10700:26:2"}]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"10288:340:2","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":915,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:2","nodeType":"FunctionDefinition","parameters":{"id":906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"to","nameLocation":"10660:2:2","nodeType":"VariableDeclaration","scope":915,"src":"10652:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:2","nodeType":"VariableDeclaration","scope":915,"src":"10664:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":904,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:2"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[],"src":"10690:0:2"},"scope":1293,"src":"10633:100:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":940,"nodeType":"Block","src":"11038:98:2","statements":[{"expression":{"arguments":[{"id":926,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"11054:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":927,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"11058:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":925,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"11048:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":929,"nodeType":"ExpressionStatement","src":"11048:18:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":931,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:2","typeDescriptions":{}}},"id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":935,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"11111:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":936,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"11115:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":937,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11124:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":930,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"11076:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":939,"nodeType":"ExpressionStatement","src":"11076:53:2"}]},"documentation":{"id":916,"nodeType":"StructuredDocumentation","src":"10739:210:2","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":941,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:2","nodeType":"FunctionDefinition","parameters":{"id":923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":918,"mutability":"mutable","name":"to","nameLocation":"10981:2:2","nodeType":"VariableDeclaration","scope":941,"src":"10973:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":917,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:2","nodeType":"VariableDeclaration","scope":941,"src":"10985:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":919,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":922,"mutability":"mutable","name":"data","nameLocation":"11015:4:2","nodeType":"VariableDeclaration","scope":941,"src":"11002:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":921,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:2"},"returnParameters":{"id":924,"nodeType":"ParameterList","parameters":[],"src":"11038:0:2"},"scope":1293,"src":"10954:182:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":973,"nodeType":"Block","src":"11503:186:2","statements":[{"assignments":[948],"declarations":[{"constant":false,"id":948,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:2","nodeType":"VariableDeclaration","scope":973,"src":"11513:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":960,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":950,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:2","typeDescriptions":{}}},"id":953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":954,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"11557:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:2","typeDescriptions":{}}},"id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":949,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"11537:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":961,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"11591:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":962,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:2","typeDescriptions":{}}},"id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":972,"nodeType":"IfStatement","src":"11587:96:2","trueBody":{"id":971,"nodeType":"Block","src":"11620:63:2","statements":[{"errorCall":{"arguments":[{"id":968,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"11664:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":967,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"11641:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":970,"nodeType":"RevertStatement","src":"11634:38:2"}]}}]},"documentation":{"id":942,"nodeType":"StructuredDocumentation","src":"11142:315:2","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":974,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:2","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:2","nodeType":"VariableDeclaration","scope":974,"src":"11477:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":943,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:2"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"11503:0:2"},"scope":1293,"src":"11462:227:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1033,"nodeType":"Block","src":"12084:389:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":984,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"12098:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":985,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:2","typeDescriptions":{}}},"id":988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":998,"nodeType":"IfStatement","src":"12094:87:2","trueBody":{"id":997,"nodeType":"Block","src":"12116:65:2","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:2","typeDescriptions":{}}},"id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":990,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"12137:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":996,"nodeType":"RevertStatement","src":"12130:40:2"}]}},{"assignments":[1000],"declarations":[{"constant":false,"id":1000,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:2","nodeType":"VariableDeclaration","scope":1033,"src":"12190:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1009,"initialValue":{"arguments":[{"id":1002,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"12222:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1003,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"12226:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1004,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:2","typeDescriptions":{}}},"id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1001,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"12214:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1010,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"12260:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:2","typeDescriptions":{}}},"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1021,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"12362:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1022,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"12379:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1031,"nodeType":"IfStatement","src":"12358:109:2","trueBody":{"id":1030,"nodeType":"Block","src":"12385:82:2","statements":[{"errorCall":{"arguments":[{"id":1025,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":977,"src":"12427:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1026,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"12433:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1027,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"12442:13:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1024,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"12406:20:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1029,"nodeType":"RevertStatement","src":"12399:57:2"}]}},"id":1032,"nodeType":"IfStatement","src":"12256:211:2","trueBody":{"id":1020,"nodeType":"Block","src":"12289:63:2","statements":[{"errorCall":{"arguments":[{"id":1017,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"12333:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1016,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"12310:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1019,"nodeType":"RevertStatement","src":"12303:38:2"}]}}]},"documentation":{"id":975,"nodeType":"StructuredDocumentation","src":"11695:313:2","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1034,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:2","nodeType":"FunctionDefinition","parameters":{"id":982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":977,"mutability":"mutable","name":"from","nameLocation":"12040:4:2","nodeType":"VariableDeclaration","scope":1034,"src":"12032:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":976,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"to","nameLocation":"12054:2:2","nodeType":"VariableDeclaration","scope":1034,"src":"12046:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":978,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:2","nodeType":"VariableDeclaration","scope":1034,"src":"12058:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":980,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:2"},"returnParameters":{"id":983,"nodeType":"ParameterList","parameters":[],"src":"12084:0:2"},"scope":1293,"src":"12013:460:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1051,"nodeType":"Block","src":"13481:53:2","statements":[{"expression":{"arguments":[{"id":1045,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"13505:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1046,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"13511:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1047,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"13515:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1044,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[1052,1078],"referencedDeclaration":1078,"src":"13491:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1050,"nodeType":"ExpressionStatement","src":"13491:36:2"}]},"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"12479:922:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1052,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:2","nodeType":"FunctionDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"from","nameLocation":"13437:4:2","nodeType":"VariableDeclaration","scope":1052,"src":"13429:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"to","nameLocation":"13451:2:2","nodeType":"VariableDeclaration","scope":1052,"src":"13443:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1038,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1041,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:2","nodeType":"VariableDeclaration","scope":1052,"src":"13455:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1040,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:2"},"returnParameters":{"id":1043,"nodeType":"ParameterList","parameters":[],"src":"13481:0:2"},"scope":1293,"src":"13406:128:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1077,"nodeType":"Block","src":"13873:102:2","statements":[{"expression":{"arguments":[{"id":1065,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"13893:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1066,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"13899:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1067,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"13903:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1064,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"13883:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1069,"nodeType":"ExpressionStatement","src":"13883:28:2"},{"expression":{"arguments":[{"id":1071,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"13944:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1072,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1057,"src":"13950:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1073,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"13954:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1074,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"13963:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1070,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"13921:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1076,"nodeType":"ExpressionStatement","src":"13921:47:2"}]},"documentation":{"id":1053,"nodeType":"StructuredDocumentation","src":"13540:226:2","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1078,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:2","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"from","nameLocation":"13802:4:2","nodeType":"VariableDeclaration","scope":1078,"src":"13794:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1057,"mutability":"mutable","name":"to","nameLocation":"13816:2:2","nodeType":"VariableDeclaration","scope":1078,"src":"13808:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1059,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:2","nodeType":"VariableDeclaration","scope":1078,"src":"13820:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"data","nameLocation":"13850:4:2","nodeType":"VariableDeclaration","scope":1078,"src":"13837:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1060,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:2"},"returnParameters":{"id":1063,"nodeType":"ParameterList","parameters":[],"src":"13873:0:2"},"scope":1293,"src":"13771:204:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1095,"nodeType":"Block","src":"14488:50:2","statements":[{"expression":{"arguments":[{"id":1089,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"14507:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1090,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"14511:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1091,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"14520:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1088,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1096,1162],"referencedDeclaration":1162,"src":"14498:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1094,"nodeType":"ExpressionStatement","src":"14498:33:2"}]},"documentation":{"id":1079,"nodeType":"StructuredDocumentation","src":"13981:432:2","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1096,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:2","nodeType":"FunctionDefinition","parameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"to","nameLocation":"14444:2:2","nodeType":"VariableDeclaration","scope":1096,"src":"14436:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1080,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1083,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:2","nodeType":"VariableDeclaration","scope":1096,"src":"14448:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1085,"mutability":"mutable","name":"auth","nameLocation":"14473:4:2","nodeType":"VariableDeclaration","scope":1096,"src":"14465:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1084,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:2"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[],"src":"14488:0:2"},"scope":1293,"src":"14418:120:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1161,"nodeType":"Block","src":"14814:568:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1108,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"14880:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1109,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"14893:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1110,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:2","typeDescriptions":{}}},"id":1113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1154,"nodeType":"IfStatement","src":"14876:460:2","trueBody":{"id":1153,"nodeType":"Block","src":"14913:423:2","statements":[{"assignments":[1117],"declarations":[{"constant":false,"id":1117,"mutability":"mutable","name":"owner","nameLocation":"14935:5:2","nodeType":"VariableDeclaration","scope":1153,"src":"14927:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1116,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1121,"initialValue":{"arguments":[{"id":1119,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"14957:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1118,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1228,"src":"14943:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1122,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"15093:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1123,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:2","typeDescriptions":{}}},"id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1128,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"15115:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1129,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"15124:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:2","subExpression":{"arguments":[{"id":1133,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"15150:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1134,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"15157:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1132,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"15133:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1143,"nodeType":"IfStatement","src":"15089:142:2","trueBody":{"id":1142,"nodeType":"Block","src":"15164:67:2","statements":[{"errorCall":{"arguments":[{"id":1139,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"15211:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1138,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"15189:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1141,"nodeType":"RevertStatement","src":"15182:34:2"}]}},{"condition":{"id":1144,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"15249:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1152,"nodeType":"IfStatement","src":"15245:81:2","trueBody":{"id":1151,"nodeType":"Block","src":"15260:66:2","statements":[{"eventCall":{"arguments":[{"id":1146,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"15292:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1147,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"15299:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1148,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"15303:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1145,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"15283:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1150,"nodeType":"EmitStatement","src":"15278:33:2"}]}}]}},{"expression":{"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1155,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"15346:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1157,"indexExpression":{"id":1156,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"15362:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1158,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"15373:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1160,"nodeType":"ExpressionStatement","src":"15346:29:2"}]},"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"14544:171:2","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":1162,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:2","nodeType":"FunctionDefinition","parameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"to","nameLocation":"14746:2:2","nodeType":"VariableDeclaration","scope":1162,"src":"14738:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:2","nodeType":"VariableDeclaration","scope":1162,"src":"14750:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"auth","nameLocation":"14775:4:2","nodeType":"VariableDeclaration","scope":1162,"src":"14767:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1102,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:2","nodeType":"VariableDeclaration","scope":1162,"src":"14781:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1104,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:2"},"returnParameters":{"id":1107,"nodeType":"ParameterList","parameters":[],"src":"14814:0:2"},"scope":1293,"src":"14720:662:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1198,"nodeType":"Block","src":"15684:219:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1172,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"15698:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:2","typeDescriptions":{}}},"id":1176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1183,"nodeType":"IfStatement","src":"15694:91:2","trueBody":{"id":1182,"nodeType":"Block","src":"15722:63:2","statements":[{"errorCall":{"arguments":[{"id":1179,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"15765:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1178,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"15743:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1181,"nodeType":"RevertStatement","src":"15736:38:2"}]}},{"expression":{"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1184,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":337,"src":"15794:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1187,"indexExpression":{"id":1185,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"15813:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1188,"indexExpression":{"id":1186,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"15820:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1189,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"15832:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1191,"nodeType":"ExpressionStatement","src":"15794:46:2"},{"eventCall":{"arguments":[{"id":1193,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"15870:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1194,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1167,"src":"15877:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1195,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"15887:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1192,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"15855:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1197,"nodeType":"EmitStatement","src":"15850:46:2"}]},"documentation":{"id":1163,"nodeType":"StructuredDocumentation","src":"15388:198:2","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":1199,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:2","nodeType":"FunctionDefinition","parameters":{"id":1170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"owner","nameLocation":"15627:5:2","nodeType":"VariableDeclaration","scope":1199,"src":"15619:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"mutability":"mutable","name":"operator","nameLocation":"15642:8:2","nodeType":"VariableDeclaration","scope":1199,"src":"15634:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1166,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1169,"mutability":"mutable","name":"approved","nameLocation":"15657:8:2","nodeType":"VariableDeclaration","scope":1199,"src":"15652:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1168,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:2"},"returnParameters":{"id":1171,"nodeType":"ParameterList","parameters":[],"src":"15684:0:2"},"scope":1293,"src":"15591:312:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1227,"nodeType":"Block","src":"16210:169:2","statements":[{"assignments":[1208],"declarations":[{"constant":false,"id":1208,"mutability":"mutable","name":"owner","nameLocation":"16228:5:2","nodeType":"VariableDeclaration","scope":1227,"src":"16220:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1207,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1212,"initialValue":{"arguments":[{"id":1210,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"16245:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1209,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":658,"src":"16236:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:2"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1213,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"16267:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:2","typeDescriptions":{}}},"id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1224,"nodeType":"IfStatement","src":"16263:88:2","trueBody":{"id":1223,"nodeType":"Block","src":"16288:63:2","statements":[{"errorCall":{"arguments":[{"id":1220,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"16332:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1219,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"16309:22:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1222,"nodeType":"RevertStatement","src":"16302:38:2"}]}},{"expression":{"id":1225,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"16367:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1206,"id":1226,"nodeType":"Return","src":"16360:12:2"}]},"documentation":{"id":1200,"nodeType":"StructuredDocumentation","src":"15909:224:2","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":1228,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:2","nodeType":"FunctionDefinition","parameters":{"id":1203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1202,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:2","nodeType":"VariableDeclaration","scope":1228,"src":"16161:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1201,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:2"},"returnParameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1228,"src":"16201:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1204,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:2"},"scope":1293,"src":"16138:241:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1291,"nodeType":"Block","src":"17020:680:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1240,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"17034:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:2","memberName":"code","nodeType":"MemberAccess","src":"17034:7:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:2","memberName":"length","nodeType":"MemberAccess","src":"17034:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1290,"nodeType":"IfStatement","src":"17030:664:2","trueBody":{"id":1289,"nodeType":"Block","src":"17054:640:2","statements":[{"clauses":[{"block":{"id":1269,"nodeType":"Block","src":"17168:162:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1258,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"17190:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1259,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"17200:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1428_$","typeString":"type(contract IERC721Receiver)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:2","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"17200:32:2","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:2","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1268,"nodeType":"IfStatement","src":"17186:130:2","trueBody":{"id":1267,"nodeType":"Block","src":"17243:73:2","statements":[{"errorCall":{"arguments":[{"id":1264,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"17294:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1263,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"17272:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1266,"nodeType":"RevertStatement","src":"17265:32:2"}]}}]},"errorName":"","id":1270,"nodeType":"TryCatchClause","parameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"retval","nameLocation":"17160:6:2","nodeType":"VariableDeclaration","scope":1270,"src":"17153:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1255,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:2"},"src":"17144:186:2"},{"block":{"id":1286,"nodeType":"Block","src":"17359:325:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1274,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"17381:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:2","memberName":"length","nodeType":"MemberAccess","src":"17381:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1284,"nodeType":"Block","src":"17480:190:2","statements":[{"AST":{"nativeSrc":"17566:86:2","nodeType":"YulBlock","src":"17566:86:2","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"17603:2:2","nodeType":"YulLiteral","src":"17603:2:2","type":"","value":"32"},{"name":"reason","nativeSrc":"17607:6:2","nodeType":"YulIdentifier","src":"17607:6:2"}],"functionName":{"name":"add","nativeSrc":"17599:3:2","nodeType":"YulIdentifier","src":"17599:3:2"},"nativeSrc":"17599:15:2","nodeType":"YulFunctionCall","src":"17599:15:2"},{"arguments":[{"name":"reason","nativeSrc":"17622:6:2","nodeType":"YulIdentifier","src":"17622:6:2"}],"functionName":{"name":"mload","nativeSrc":"17616:5:2","nodeType":"YulIdentifier","src":"17616:5:2"},"nativeSrc":"17616:13:2","nodeType":"YulFunctionCall","src":"17616:13:2"}],"functionName":{"name":"revert","nativeSrc":"17592:6:2","nodeType":"YulIdentifier","src":"17592:6:2"},"nativeSrc":"17592:38:2","nodeType":"YulFunctionCall","src":"17592:38:2"},"nativeSrc":"17592:38:2","nodeType":"YulExpressionStatement","src":"17592:38:2"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1272,"isOffset":false,"isSlot":false,"src":"17607:6:2","valueSize":1},{"declaration":1272,"isOffset":false,"isSlot":false,"src":"17622:6:2","valueSize":1}],"id":1283,"nodeType":"InlineAssembly","src":"17557:95:2"}]},"id":1285,"nodeType":"IfStatement","src":"17377:293:2","trueBody":{"id":1282,"nodeType":"Block","src":"17401:73:2","statements":[{"errorCall":{"arguments":[{"id":1279,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"17452:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1278,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"17430:21:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1281,"nodeType":"RevertStatement","src":"17423:32:2"}]}}]},"errorName":"","id":1287,"nodeType":"TryCatchClause","parameters":{"id":1273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"reason","nameLocation":"17351:6:2","nodeType":"VariableDeclaration","scope":1287,"src":"17338:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1271,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:2"},"src":"17331:353:2"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1249,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"17109:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1251,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"17123:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1252,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"17129:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1253,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"17138:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1246,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"17088:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1245,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"17072:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1428_$","typeString":"type(contract IERC721Receiver)"}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1428","typeString":"contract IERC721Receiver"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:2","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1427,"src":"17072:36:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1288,"nodeType":"TryStatement","src":"17068:616:2"}]}}]},"documentation":{"id":1229,"nodeType":"StructuredDocumentation","src":"16385:528:2","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":1292,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:2","nodeType":"FunctionDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1231,"mutability":"mutable","name":"from","nameLocation":"16958:4:2","nodeType":"VariableDeclaration","scope":1292,"src":"16950:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1233,"mutability":"mutable","name":"to","nameLocation":"16972:2:2","nodeType":"VariableDeclaration","scope":1292,"src":"16964:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1232,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1235,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:2","nodeType":"VariableDeclaration","scope":1292,"src":"16976:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1234,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"data","nameLocation":"17006:4:2","nodeType":"VariableDeclaration","scope":1292,"src":"16993:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1236,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:2"},"returnParameters":{"id":1239,"nodeType":"ParameterList","parameters":[],"src":"17020:0:2"},"scope":1293,"src":"16918:782:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1294,"src":"776:16926:2","usedErrors":[195,200,209,214,219,226,231,236],"usedEvents":[1309,1318,1327]}],"src":"107:17596:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1777],"IERC721":[1410]},"id":1411,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1295,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1297,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1411,"sourceUnit":1778,"src":"134:62:3","symbolAliases":[{"foreign":{"id":1296,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"142:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1299,"name":"IERC165","nameLocations":["287:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":1777,"src":"287:7:3"},"id":1300,"nodeType":"InheritanceSpecifier","src":"287:7:3"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1298,"nodeType":"StructuredDocumentation","src":"198:67:3","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1410,"linearizedBaseContracts":[1410,1777],"name":"IERC721","nameLocation":"276:7:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1301,"nodeType":"StructuredDocumentation","src":"301:88:3","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1309,"name":"Transfer","nameLocation":"400:8:3","nodeType":"EventDefinition","parameters":{"id":1308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:3","nodeType":"VariableDeclaration","scope":1309,"src":"409:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1302,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1305,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:3","nodeType":"VariableDeclaration","scope":1309,"src":"431:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1307,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:3","nodeType":"VariableDeclaration","scope":1309,"src":"451:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:3"},"src":"394:82:3"},{"anonymous":false,"documentation":{"id":1310,"nodeType":"StructuredDocumentation","src":"482:94:3","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1318,"name":"Approval","nameLocation":"587:8:3","nodeType":"EventDefinition","parameters":{"id":1317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1312,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:3","nodeType":"VariableDeclaration","scope":1318,"src":"596:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1311,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1314,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:3","nodeType":"VariableDeclaration","scope":1318,"src":"619:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1316,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:3","nodeType":"VariableDeclaration","scope":1318,"src":"645:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1315,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:3"},"src":"581:89:3"},{"anonymous":false,"documentation":{"id":1319,"nodeType":"StructuredDocumentation","src":"676:117:3","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1327,"name":"ApprovalForAll","nameLocation":"804:14:3","nodeType":"EventDefinition","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1321,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:3","nodeType":"VariableDeclaration","scope":1327,"src":"819:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1323,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:3","nodeType":"VariableDeclaration","scope":1327,"src":"842:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1325,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:3","nodeType":"VariableDeclaration","scope":1327,"src":"868:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1324,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:3"},"src":"798:85:3"},{"documentation":{"id":1328,"nodeType":"StructuredDocumentation","src":"889:76:3","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1335,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:3","nodeType":"FunctionDefinition","parameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"owner","nameLocation":"997:5:3","nodeType":"VariableDeclaration","scope":1335,"src":"989:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1329,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:3"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"balance","nameLocation":"1035:7:3","nodeType":"VariableDeclaration","scope":1335,"src":"1027:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1332,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:3"},"scope":1410,"src":"970:74:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"1050:131:3","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1343,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:3","nodeType":"FunctionDefinition","parameters":{"id":1339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1338,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:3","nodeType":"VariableDeclaration","scope":1343,"src":"1203:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1337,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:3"},"returnParameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"owner","nameLocation":"1251:5:3","nodeType":"VariableDeclaration","scope":1343,"src":"1243:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:3"},"scope":1410,"src":"1186:72:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1344,"nodeType":"StructuredDocumentation","src":"1264:565:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1355,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:3","nodeType":"FunctionDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"from","nameLocation":"1868:4:3","nodeType":"VariableDeclaration","scope":1355,"src":"1860:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1345,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"to","nameLocation":"1882:2:3","nodeType":"VariableDeclaration","scope":1355,"src":"1874:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1350,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:3","nodeType":"VariableDeclaration","scope":1355,"src":"1886:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1349,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1352,"mutability":"mutable","name":"data","nameLocation":"1918:4:3","nodeType":"VariableDeclaration","scope":1355,"src":"1903:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1351,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:3"},"returnParameters":{"id":1354,"nodeType":"ParameterList","parameters":[],"src":"1932:0:3"},"scope":1410,"src":"1834:99:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1356,"nodeType":"StructuredDocumentation","src":"1939:705:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1365,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:3","nodeType":"FunctionDefinition","parameters":{"id":1363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1358,"mutability":"mutable","name":"from","nameLocation":"2683:4:3","nodeType":"VariableDeclaration","scope":1365,"src":"2675:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1357,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1360,"mutability":"mutable","name":"to","nameLocation":"2697:2:3","nodeType":"VariableDeclaration","scope":1365,"src":"2689:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1359,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1362,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:3","nodeType":"VariableDeclaration","scope":1365,"src":"2701:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1361,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:3"},"returnParameters":{"id":1364,"nodeType":"ParameterList","parameters":[],"src":"2726:0:3"},"scope":1410,"src":"2649:78:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"2733:732:3","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1375,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:3","nodeType":"FunctionDefinition","parameters":{"id":1373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"from","nameLocation":"3500:4:3","nodeType":"VariableDeclaration","scope":1375,"src":"3492:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1367,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"to","nameLocation":"3514:2:3","nodeType":"VariableDeclaration","scope":1375,"src":"3506:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1369,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1372,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:3","nodeType":"VariableDeclaration","scope":1375,"src":"3518:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:3"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[],"src":"3543:0:3"},"scope":1410,"src":"3470:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"3550:452:3","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1383,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:3","nodeType":"FunctionDefinition","parameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"to","nameLocation":"4032:2:3","nodeType":"VariableDeclaration","scope":1383,"src":"4024:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1380,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:3","nodeType":"VariableDeclaration","scope":1383,"src":"4036:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1379,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:3"},"returnParameters":{"id":1382,"nodeType":"ParameterList","parameters":[],"src":"4061:0:3"},"scope":1410,"src":"4007:55:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"4068:315:3","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1391,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:3","nodeType":"FunctionDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"operator","nameLocation":"4423:8:3","nodeType":"VariableDeclaration","scope":1391,"src":"4415:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1385,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1388,"mutability":"mutable","name":"approved","nameLocation":"4438:8:3","nodeType":"VariableDeclaration","scope":1391,"src":"4433:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1387,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:3"},"returnParameters":{"id":1390,"nodeType":"ParameterList","parameters":[],"src":"4456:0:3"},"scope":1410,"src":"4388:69:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"4463:139:3","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1399,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:3","nodeType":"FunctionDefinition","parameters":{"id":1395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:3","nodeType":"VariableDeclaration","scope":1399,"src":"4628:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1393,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:3"},"returnParameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"operator","nameLocation":"4676:8:3","nodeType":"VariableDeclaration","scope":1399,"src":"4668:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:3"},"scope":1410,"src":"4607:79:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1400,"nodeType":"StructuredDocumentation","src":"4692:138:3","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1409,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:3","nodeType":"FunctionDefinition","parameters":{"id":1405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"mutability":"mutable","name":"owner","nameLocation":"4869:5:3","nodeType":"VariableDeclaration","scope":1409,"src":"4861:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1401,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"operator","nameLocation":"4884:8:3","nodeType":"VariableDeclaration","scope":1409,"src":"4876:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1403,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:3"},"returnParameters":{"id":1408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1409,"src":"4917:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1406,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:3"},"scope":1410,"src":"4835:88:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1411,"src":"266:4659:3","usedErrors":[],"usedEvents":[1309,1318,1327]}],"src":"108:4818:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1428]},"id":1429,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1412,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1413,"nodeType":"StructuredDocumentation","src":"142:152:4","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1428,"linearizedBaseContracts":[1428],"name":"IERC721Receiver","nameLocation":"305:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"327:500:4","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1427,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:4","nodeType":"FunctionDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"operator","nameLocation":"875:8:4","nodeType":"VariableDeclaration","scope":1427,"src":"867:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1415,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1418,"mutability":"mutable","name":"from","nameLocation":"901:4:4","nodeType":"VariableDeclaration","scope":1427,"src":"893:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1420,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:4","nodeType":"VariableDeclaration","scope":1427,"src":"915:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"data","nameLocation":"955:4:4","nodeType":"VariableDeclaration","scope":1427,"src":"940:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1421,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:4"},"returnParameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1427,"src":"984:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1424,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:4"},"scope":1428,"src":"832:160:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1429,"src":"295:699:4","usedErrors":[],"usedEvents":[]}],"src":"116:879:4"},"id":4},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[1410],"IERC721Metadata":[1456]},"id":1457,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1430,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1432,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1457,"sourceUnit":1411,"src":"153:39:5","symbolAliases":[{"foreign":{"id":1431,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"161:7:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1434,"name":"IERC721","nameLocations":["357:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1410,"src":"357:7:5"},"id":1435,"nodeType":"InheritanceSpecifier","src":"357:7:5"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1433,"nodeType":"StructuredDocumentation","src":"194:133:5","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1456,"linearizedBaseContracts":[1456,1410,1777],"name":"IERC721Metadata","nameLocation":"338:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"371:58:5","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1441,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:5","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"447:2:5"},"returnParameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1441,"src":"473:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1438,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:5"},"scope":1456,"src":"434:54:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1442,"nodeType":"StructuredDocumentation","src":"494:60:5","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1447,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:5","nodeType":"FunctionDefinition","parameters":{"id":1443,"nodeType":"ParameterList","parameters":[],"src":"574:2:5"},"returnParameters":{"id":1446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1447,"src":"600:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1444,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:5"},"scope":1456,"src":"559:56:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1448,"nodeType":"StructuredDocumentation","src":"621:90:5","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1455,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:5","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:5","nodeType":"VariableDeclaration","scope":1455,"src":"734:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:5"},"returnParameters":{"id":1454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1455,"src":"774:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1452,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:5"},"scope":1456,"src":"716:73:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1457,"src":"328:463:5","usedErrors":[],"usedEvents":[1309,1318,1327]}],"src":"127:665:5"},"id":5},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1486]},"id":1487,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1458,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:6"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1459,"nodeType":"StructuredDocumentation","src":"127:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1486,"linearizedBaseContracts":[1486],"name":"Context","nameLocation":"642:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1467,"nodeType":"Block","src":"718:34:6","statements":[{"expression":{"expression":{"id":1464,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:6","memberName":"sender","nodeType":"MemberAccess","src":"735:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1463,"id":1466,"nodeType":"Return","src":"728:17:6"}]},"id":1468,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:6","nodeType":"FunctionDefinition","parameters":{"id":1460,"nodeType":"ParameterList","parameters":[],"src":"675:2:6"},"returnParameters":{"id":1463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1468,"src":"709:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1461,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:6"},"scope":1486,"src":"656:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1476,"nodeType":"Block","src":"825:32:6","statements":[{"expression":{"expression":{"id":1473,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:6","memberName":"data","nodeType":"MemberAccess","src":"842:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1472,"id":1475,"nodeType":"Return","src":"835:15:6"}]},"id":1477,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:6","nodeType":"FunctionDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[],"src":"775:2:6"},"returnParameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1477,"src":"809:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1470,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:6"},"scope":1486,"src":"758:99:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1484,"nodeType":"Block","src":"935:25:6","statements":[{"expression":{"hexValue":"30","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1481,"id":1483,"nodeType":"Return","src":"945:8:6"}]},"id":1485,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:6","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"892:2:6"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1485,"src":"926:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1479,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:6"},"scope":1486,"src":"863:97:6","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1487,"src":"624:338:6","usedErrors":[],"usedEvents":[]}],"src":"101:862:6"},"id":6},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2831],"SignedMath":[2936],"Strings":[1741]},"id":1742,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1488,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:7"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1490,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1742,"sourceUnit":2832,"src":"127:37:7","symbolAliases":[{"foreign":{"id":1489,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"135:4:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1492,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1742,"sourceUnit":2937,"src":"165:49:7","symbolAliases":[{"foreign":{"id":1491,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"173:10:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1493,"nodeType":"StructuredDocumentation","src":"216:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":1741,"linearizedBaseContracts":[1741],"name":"Strings","nameLocation":"259:7:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1496,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:7","nodeType":"VariableDeclaration","scope":1741,"src":"273:56:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1494,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1499,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:7","nodeType":"VariableDeclaration","scope":1741,"src":"335:42:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1497,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":1500,"nodeType":"StructuredDocumentation","src":"384:81:7","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":1506,"name":"StringsInsufficientHexLength","nameLocation":"476:28:7","nodeType":"ErrorDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1502,"mutability":"mutable","name":"value","nameLocation":"513:5:7","nodeType":"VariableDeclaration","scope":1506,"src":"505:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1501,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1504,"mutability":"mutable","name":"length","nameLocation":"528:6:7","nodeType":"VariableDeclaration","scope":1506,"src":"520:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1503,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:7"},"src":"470:66:7"},{"body":{"id":1553,"nodeType":"Block","src":"708:627:7","statements":[{"id":1552,"nodeType":"UncheckedBlock","src":"718:611:7","statements":[{"assignments":[1515],"declarations":[{"constant":false,"id":1515,"mutability":"mutable","name":"length","nameLocation":"750:6:7","nodeType":"VariableDeclaration","scope":1552,"src":"742:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1514,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1522,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"770:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1516,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"759:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2831_$","typeString":"type(library Math)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:7","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2651,"src":"759:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:7"},{"assignments":[1524],"declarations":[{"constant":false,"id":1524,"mutability":"mutable","name":"buffer","nameLocation":"808:6:7","nodeType":"VariableDeclaration","scope":1552,"src":"794:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1523,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1529,"initialValue":{"arguments":[{"id":1527,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"828:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1525,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:7"},{"assignments":[1531],"declarations":[{"constant":false,"id":1531,"mutability":"mutable","name":"ptr","nameLocation":"857:3:7","nodeType":"VariableDeclaration","scope":1552,"src":"849:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1530,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1532,"nodeType":"VariableDeclarationStatement","src":"849:11:7"},{"AST":{"nativeSrc":"930:67:7","nodeType":"YulBlock","src":"930:67:7","statements":[{"nativeSrc":"948:35:7","nodeType":"YulAssignment","src":"948:35:7","value":{"arguments":[{"name":"buffer","nativeSrc":"959:6:7","nodeType":"YulIdentifier","src":"959:6:7"},{"arguments":[{"kind":"number","nativeSrc":"971:2:7","nodeType":"YulLiteral","src":"971:2:7","type":"","value":"32"},{"name":"length","nativeSrc":"975:6:7","nodeType":"YulIdentifier","src":"975:6:7"}],"functionName":{"name":"add","nativeSrc":"967:3:7","nodeType":"YulIdentifier","src":"967:3:7"},"nativeSrc":"967:15:7","nodeType":"YulFunctionCall","src":"967:15:7"}],"functionName":{"name":"add","nativeSrc":"955:3:7","nodeType":"YulIdentifier","src":"955:3:7"},"nativeSrc":"955:28:7","nodeType":"YulFunctionCall","src":"955:28:7"},"variableNames":[{"name":"ptr","nativeSrc":"948:3:7","nodeType":"YulIdentifier","src":"948:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1524,"isOffset":false,"isSlot":false,"src":"959:6:7","valueSize":1},{"declaration":1515,"isOffset":false,"isSlot":false,"src":"975:6:7","valueSize":1},{"declaration":1531,"isOffset":false,"isSlot":false,"src":"948:3:7","valueSize":1}],"id":1533,"nodeType":"InlineAssembly","src":"921:76:7"},{"body":{"id":1548,"nodeType":"Block","src":"1023:269:7","statements":[{"expression":{"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:7","subExpression":{"id":1535,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1041:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1537,"nodeType":"ExpressionStatement","src":"1041:5:7"},{"AST":{"nativeSrc":"1124:86:7","nodeType":"YulBlock","src":"1124:86:7","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"1154:3:7","nodeType":"YulIdentifier","src":"1154:3:7"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:7","nodeType":"YulIdentifier","src":"1168:5:7"},{"kind":"number","nativeSrc":"1175:2:7","nodeType":"YulLiteral","src":"1175:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"1164:3:7","nodeType":"YulIdentifier","src":"1164:3:7"},"nativeSrc":"1164:14:7","nodeType":"YulFunctionCall","src":"1164:14:7"},{"name":"HEX_DIGITS","nativeSrc":"1180:10:7","nodeType":"YulIdentifier","src":"1180:10:7"}],"functionName":{"name":"byte","nativeSrc":"1159:4:7","nodeType":"YulIdentifier","src":"1159:4:7"},"nativeSrc":"1159:32:7","nodeType":"YulFunctionCall","src":"1159:32:7"}],"functionName":{"name":"mstore8","nativeSrc":"1146:7:7","nodeType":"YulIdentifier","src":"1146:7:7"},"nativeSrc":"1146:46:7","nodeType":"YulFunctionCall","src":"1146:46:7"},"nativeSrc":"1146:46:7","nodeType":"YulExpressionStatement","src":"1146:46:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1496,"isOffset":false,"isSlot":false,"src":"1180:10:7","valueSize":1},{"declaration":1531,"isOffset":false,"isSlot":false,"src":"1154:3:7","valueSize":1},{"declaration":1509,"isOffset":false,"isSlot":false,"src":"1168:5:7","valueSize":1}],"id":1538,"nodeType":"InlineAssembly","src":"1115:95:7"},{"expression":{"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"1227:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1542,"nodeType":"ExpressionStatement","src":"1227:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1509,"src":"1260:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1547,"nodeType":"IfStatement","src":"1256:21:7","trueBody":{"id":1546,"nodeType":"Break","src":"1272:5:7"}}]},"condition":{"hexValue":"74727565","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1549,"nodeType":"WhileStatement","src":"1010:282:7"},{"expression":{"id":1550,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"1312:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1513,"id":1551,"nodeType":"Return","src":"1305:13:7"}]}]},"documentation":{"id":1507,"nodeType":"StructuredDocumentation","src":"542:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1554,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:7","nodeType":"FunctionDefinition","parameters":{"id":1510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1509,"mutability":"mutable","name":"value","nameLocation":"663:5:7","nodeType":"VariableDeclaration","scope":1554,"src":"655:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1508,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:7"},"returnParameters":{"id":1513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1512,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1554,"src":"693:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1511,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:7"},"scope":1741,"src":"637:698:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1579,"nodeType":"Block","src":"1511:92:7","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"1542:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:7","trueExpression":{"hexValue":"2d","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1574,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"1588:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1572,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"1573:10:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$2936_$","typeString":"type(library SignedMath)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:7","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2935,"src":"1573:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1571,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"1564:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1562,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:7","typeDescriptions":{}}},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:7","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:7","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1561,"id":1578,"nodeType":"Return","src":"1521:75:7"}]},"documentation":{"id":1555,"nodeType":"StructuredDocumentation","src":"1341:89:7","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1580,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:7","nodeType":"FunctionDefinition","parameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"value","nameLocation":"1466:5:7","nodeType":"VariableDeclaration","scope":1580,"src":"1459:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1556,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:7"},"returnParameters":{"id":1561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1580,"src":"1496:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1559,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:7"},"scope":1741,"src":"1435:168:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1599,"nodeType":"Block","src":"1782:100:7","statements":[{"id":1598,"nodeType":"UncheckedBlock","src":"1792:84:7","statements":[{"expression":{"arguments":[{"id":1589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1835:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1854:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1590,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2831,"src":"1842:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2831_$","typeString":"type(library Math)"}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:7","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"1842:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1588,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1600,1683,1703],"referencedDeclaration":1683,"src":"1823:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1587,"id":1597,"nodeType":"Return","src":"1816:49:7"}]}]},"documentation":{"id":1581,"nodeType":"StructuredDocumentation","src":"1609:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1600,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:7","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"value","nameLocation":"1737:5:7","nodeType":"VariableDeclaration","scope":1600,"src":"1729:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:7"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1600,"src":"1767:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1585,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:7"},"scope":1741,"src":"1708:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1682,"nodeType":"Block","src":"2095:435:7","statements":[{"assignments":[1611],"declarations":[{"constant":false,"id":1611,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:7","nodeType":"VariableDeclaration","scope":1682,"src":"2105:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1610,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1613,"initialValue":{"id":1612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"2126:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:7"},{"assignments":[1615],"declarations":[{"constant":false,"id":1615,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:7","nodeType":"VariableDeclaration","scope":1682,"src":"2141:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1614,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1624,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1619,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"2177:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1616,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:7"},{"expression":{"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1625,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2198:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1627,"indexExpression":{"hexValue":"30","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1630,"nodeType":"ExpressionStatement","src":"2198:15:7"},{"expression":{"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1631,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2223:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1633,"indexExpression":{"hexValue":"31","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1636,"nodeType":"ExpressionStatement","src":"2223:15:7"},{"body":{"id":1665,"nodeType":"Block","src":"2293:95:7","statements":[{"expression":{"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1651,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2307:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1653,"indexExpression":{"id":1652,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"2314:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1654,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"2319:10:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1658,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1655,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2330:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1660,"nodeType":"ExpressionStatement","src":"2307:40:7"},{"expression":{"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1661,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2361:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1664,"nodeType":"ExpressionStatement","src":"2361:16:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1645,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"2281:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1666,"initializationExpression":{"assignments":[1638],"declarations":[{"constant":false,"id":1638,"mutability":"mutable","name":"i","nameLocation":"2261:1:7","nodeType":"VariableDeclaration","scope":1666,"src":"2253:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1644,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1640,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"2269:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:7"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:7","subExpression":{"id":1648,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"2290:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1650,"nodeType":"ExpressionStatement","src":"2288:3:7"},"nodeType":"ForStatement","src":"2248:140:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1667,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"2401:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1676,"nodeType":"IfStatement","src":"2397:96:7","trueBody":{"id":1675,"nodeType":"Block","src":"2418:75:7","statements":[{"errorCall":{"arguments":[{"id":1671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"2468:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1672,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"2475:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1670,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"2439:28:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1674,"nodeType":"RevertStatement","src":"2432:50:7"}]}},{"expression":{"arguments":[{"id":1679,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"2516:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1677,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:7","typeDescriptions":{}}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1609,"id":1681,"nodeType":"Return","src":"2502:21:7"}]},"documentation":{"id":1601,"nodeType":"StructuredDocumentation","src":"1888:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1683,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:7","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1603,"mutability":"mutable","name":"value","nameLocation":"2034:5:7","nodeType":"VariableDeclaration","scope":1683,"src":"2026:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1602,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1605,"mutability":"mutable","name":"length","nameLocation":"2049:6:7","nodeType":"VariableDeclaration","scope":1683,"src":"2041:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:7"},"returnParameters":{"id":1609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1608,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1683,"src":"2080:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1607,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:7"},"scope":1741,"src":"2005:525:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1702,"nodeType":"Block","src":"2762:75:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1696,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2807:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1694,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:7","typeDescriptions":{}}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:7","typeDescriptions":{}}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1699,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"2815:14:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1691,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1600,1683,1703],"referencedDeclaration":1683,"src":"2779:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1690,"id":1701,"nodeType":"Return","src":"2772:58:7"}]},"documentation":{"id":1684,"nodeType":"StructuredDocumentation","src":"2536:148:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":1703,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:7","nodeType":"FunctionDefinition","parameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"addr","nameLocation":"2718:4:7","nodeType":"VariableDeclaration","scope":1703,"src":"2710:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1685,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:7"},"returnParameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1703,"src":"2747:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1688,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:7"},"scope":1741,"src":"2689:148:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1739,"nodeType":"Block","src":"2992:104:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1715,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"3015:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1713,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:7","typeDescriptions":{}}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:7","memberName":"length","nodeType":"MemberAccess","src":"3009:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1720,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"3034:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1718,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:7","typeDescriptions":{}}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:7","memberName":"length","nodeType":"MemberAccess","src":"3028:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1727,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"3063:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1725,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:7","typeDescriptions":{}}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1724,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1733,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"3086:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1731,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:7","typeDescriptions":{}}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1730,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1712,"id":1738,"nodeType":"Return","src":"3002:87:7"}]},"documentation":{"id":1704,"nodeType":"StructuredDocumentation","src":"2843:66:7","text":" @dev Returns true if the two strings are equal."},"id":1740,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:7","nodeType":"FunctionDefinition","parameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1706,"mutability":"mutable","name":"a","nameLocation":"2943:1:7","nodeType":"VariableDeclaration","scope":1740,"src":"2929:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1705,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1708,"mutability":"mutable","name":"b","nameLocation":"2960:1:7","nodeType":"VariableDeclaration","scope":1740,"src":"2946:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1707,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:7"},"returnParameters":{"id":1712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1740,"src":"2986:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1710,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:7"},"scope":1741,"src":"2914:182:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1742,"src":"251:2847:7","usedErrors":[1506],"usedEvents":[]}],"src":"101:2998:7"},"id":7},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1765],"IERC165":[1777]},"id":1766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1743,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1745,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1766,"sourceUnit":1778,"src":"140:38:8","symbolAliases":[{"foreign":{"id":1744,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"148:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1747,"name":"IERC165","nameLocations":["687:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1777,"src":"687:7:8"},"id":1748,"nodeType":"InheritanceSpecifier","src":"687:7:8"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1746,"nodeType":"StructuredDocumentation","src":"180:478:8","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1765,"linearizedBaseContracts":[1765,1777],"name":"ERC165","nameLocation":"677:6:8","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1776],"body":{"id":1763,"nodeType":"Block","src":"844:64:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1756,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"861:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1758,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"881:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1777_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1777_$","typeString":"type(contract IERC165)"}],"id":1757,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:8","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1777","typeString":"type(contract IERC165)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:8","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1755,"id":1762,"nodeType":"Return","src":"854:47:8"}]},"documentation":{"id":1749,"nodeType":"StructuredDocumentation","src":"701:56:8","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1764,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:8","nodeType":"FunctionDefinition","parameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1751,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:8","nodeType":"VariableDeclaration","scope":1764,"src":"789:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1750,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:8"},"returnParameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1764,"src":"838:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1753,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:8"},"scope":1765,"src":"762:146:8","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1766,"src":"659:251:8","usedErrors":[],"usedEvents":[]}],"src":"114:797:8"},"id":8},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1777]},"id":1778,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1767,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"141:279:9","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1777,"linearizedBaseContracts":[1777],"name":"IERC165","nameLocation":"431:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1769,"nodeType":"StructuredDocumentation","src":"445:340:9","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1776,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:9","nodeType":"FunctionDefinition","parameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:9","nodeType":"VariableDeclaration","scope":1776,"src":"817:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1770,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:9"},"returnParameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1776,"src":"860:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1773,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:9"},"scope":1777,"src":"790:76:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1778,"src":"421:447:9","usedErrors":[],"usedEvents":[]}],"src":"115:754:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2831]},"id":2832,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1779,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1780,"nodeType":"StructuredDocumentation","src":"129:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2831,"linearizedBaseContracts":[2831],"name":"Math","nameLocation":"211:4:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1781,"nodeType":"StructuredDocumentation","src":"222:50:10","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":1783,"name":"MathOverflowedMulDiv","nameLocation":"283:20:10","nodeType":"ErrorDefinition","parameters":{"id":1782,"nodeType":"ParameterList","parameters":[],"src":"303:2:10"},"src":"277:29:10"},{"canonicalName":"Math.Rounding","id":1788,"members":[{"id":1784,"name":"Floor","nameLocation":"336:5:10","nodeType":"EnumValue","src":"336:5:10"},{"id":1785,"name":"Ceil","nameLocation":"379:4:10","nodeType":"EnumValue","src":"379:4:10"},{"id":1786,"name":"Trunc","nameLocation":"421:5:10","nodeType":"EnumValue","src":"421:5:10"},{"id":1787,"name":"Expand","nameLocation":"451:6:10","nodeType":"EnumValue","src":"451:6:10"}],"name":"Rounding","nameLocation":"317:8:10","nodeType":"EnumDefinition","src":"312:169:10"},{"body":{"id":1819,"nodeType":"Block","src":"661:140:10","statements":[{"id":1818,"nodeType":"UncheckedBlock","src":"671:124:10","statements":[{"assignments":[1801],"declarations":[{"constant":false,"id":1801,"mutability":"mutable","name":"c","nameLocation":"703:1:10","nodeType":"VariableDeclaration","scope":1818,"src":"695:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1800,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1805,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1802,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"707:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1803,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"711:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1806,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"730:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1807,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"734:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1813,"nodeType":"IfStatement","src":"726:28:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1811,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1799,"id":1812,"nodeType":"Return","src":"737:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1815,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"782:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1816,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1799,"id":1817,"nodeType":"Return","src":"768:16:10"}]}]},"documentation":{"id":1789,"nodeType":"StructuredDocumentation","src":"487:93:10","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:10","nodeType":"FunctionDefinition","parameters":{"id":1794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":1820,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1790,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1793,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1820,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1792,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1820,"src":"646:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1795,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1820,"src":"652:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1797,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:10"},"scope":2831,"src":"585:216:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1847,"nodeType":"Block","src":"984:113:10","statements":[{"id":1846,"nodeType":"UncheckedBlock","src":"994:97:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1832,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"1022:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1833,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"1026:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1839,"nodeType":"IfStatement","src":"1018:28:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1837,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1831,"id":1838,"nodeType":"Return","src":"1029:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1841,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"1074:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1842,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"1078:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1844,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1831,"id":1845,"nodeType":"Return","src":"1060:20:10"}]}]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"807:96:10","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":1848,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:10","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"a","nameLocation":"932:1:10","nodeType":"VariableDeclaration","scope":1848,"src":"924:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1822,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"b","nameLocation":"943:1:10","nodeType":"VariableDeclaration","scope":1848,"src":"935:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1824,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:10"},"returnParameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1848,"src":"969:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1827,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1848,"src":"975:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1829,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:10"},"scope":2831,"src":"908:189:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1889,"nodeType":"Block","src":"1283:417:10","statements":[{"id":1888,"nodeType":"UncheckedBlock","src":"1293:401:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1860,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"1551:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1867,"nodeType":"IfStatement","src":"1547:28:10","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1865,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1859,"id":1866,"nodeType":"Return","src":"1559:16:10"}},{"assignments":[1869],"declarations":[{"constant":false,"id":1869,"mutability":"mutable","name":"c","nameLocation":"1597:1:10","nodeType":"VariableDeclaration","scope":1888,"src":"1589:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1873,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1870,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"1601:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1871,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"1605:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1874,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"1624:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"1628:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1877,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"1633:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1883,"nodeType":"IfStatement","src":"1620:33:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1881,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1859,"id":1882,"nodeType":"Return","src":"1636:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1885,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"1681:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1886,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1859,"id":1887,"nodeType":"Return","src":"1667:16:10"}]}]},"documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"1103:99:10","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":1890,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:10","nodeType":"FunctionDefinition","parameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"a","nameLocation":"1231:1:10","nodeType":"VariableDeclaration","scope":1890,"src":"1223:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"b","nameLocation":"1242:1:10","nodeType":"VariableDeclaration","scope":1890,"src":"1234:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:10"},"returnParameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1890,"src":"1268:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1855,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1890,"src":"1274:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:10"},"scope":2831,"src":"1207:493:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1917,"nodeType":"Block","src":"1887:114:10","statements":[{"id":1916,"nodeType":"UncheckedBlock","src":"1897:98:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1902,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"1925:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1909,"nodeType":"IfStatement","src":"1921:29:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1907,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1901,"id":1908,"nodeType":"Return","src":"1933:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1911,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"1978:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1912,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"1982:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1914,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1901,"id":1915,"nodeType":"Return","src":"1964:20:10"}]}]},"documentation":{"id":1891,"nodeType":"StructuredDocumentation","src":"1706:100:10","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":1918,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:10","nodeType":"FunctionDefinition","parameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"a","nameLocation":"1835:1:10","nodeType":"VariableDeclaration","scope":1918,"src":"1827:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1895,"mutability":"mutable","name":"b","nameLocation":"1846:1:10","nodeType":"VariableDeclaration","scope":1918,"src":"1838:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1894,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:10"},"returnParameters":{"id":1901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1918,"src":"1872:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1897,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1918,"src":"1878:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1899,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:10"},"scope":2831,"src":"1811:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1945,"nodeType":"Block","src":"2198:114:10","statements":[{"id":1944,"nodeType":"UncheckedBlock","src":"2208:98:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1930,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"2236:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1937,"nodeType":"IfStatement","src":"2232:29:10","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1929,"id":1936,"nodeType":"Return","src":"2244:17:10"}},{"expression":{"components":[{"hexValue":"74727565","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1939,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"2289:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1940,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"2293:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1942,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:10","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1929,"id":1943,"nodeType":"Return","src":"2275:20:10"}]}]},"documentation":{"id":1919,"nodeType":"StructuredDocumentation","src":"2007:110:10","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":1946,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:10","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1921,"mutability":"mutable","name":"a","nameLocation":"2146:1:10","nodeType":"VariableDeclaration","scope":1946,"src":"2138:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1920,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1923,"mutability":"mutable","name":"b","nameLocation":"2157:1:10","nodeType":"VariableDeclaration","scope":1946,"src":"2149:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:10"},"returnParameters":{"id":1929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1946,"src":"2183:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1925,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1946,"src":"2189:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1927,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:10"},"scope":2831,"src":"2122:190:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1963,"nodeType":"Block","src":"2449:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1956,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"2466:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1957,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"2470:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1960,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"2478:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:10","trueExpression":{"id":1959,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"2474:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1955,"id":1962,"nodeType":"Return","src":"2459:20:10"}]},"documentation":{"id":1947,"nodeType":"StructuredDocumentation","src":"2318:59:10","text":" @dev Returns the largest of two numbers."},"id":1964,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:10","nodeType":"FunctionDefinition","parameters":{"id":1952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1949,"mutability":"mutable","name":"a","nameLocation":"2403:1:10","nodeType":"VariableDeclaration","scope":1964,"src":"2395:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1948,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"b","nameLocation":"2414:1:10","nodeType":"VariableDeclaration","scope":1964,"src":"2406:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1950,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:10"},"returnParameters":{"id":1955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1964,"src":"2440:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1953,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:10"},"scope":2831,"src":"2382:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1981,"nodeType":"Block","src":"2624:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1974,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2641:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1975,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2645:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1978,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2653:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:10","trueExpression":{"id":1977,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2649:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1973,"id":1980,"nodeType":"Return","src":"2634:20:10"}]},"documentation":{"id":1965,"nodeType":"StructuredDocumentation","src":"2492:60:10","text":" @dev Returns the smallest of two numbers."},"id":1982,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:10","nodeType":"FunctionDefinition","parameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"a","nameLocation":"2578:1:10","nodeType":"VariableDeclaration","scope":1982,"src":"2570:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1966,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1969,"mutability":"mutable","name":"b","nameLocation":"2589:1:10","nodeType":"VariableDeclaration","scope":1982,"src":"2581:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:10"},"returnParameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1982,"src":"2615:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:10"},"scope":2831,"src":"2557:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2004,"nodeType":"Block","src":"2845:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1992,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"2900:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1993,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"2904:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1995,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1996,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"2910:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1997,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"2914:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1999,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1991,"id":2003,"nodeType":"Return","src":"2892:28:10"}]},"documentation":{"id":1983,"nodeType":"StructuredDocumentation","src":"2667:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2005,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:10","nodeType":"FunctionDefinition","parameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"a","nameLocation":"2799:1:10","nodeType":"VariableDeclaration","scope":2005,"src":"2791:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1984,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1987,"mutability":"mutable","name":"b","nameLocation":"2810:1:10","nodeType":"VariableDeclaration","scope":2005,"src":"2802:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1986,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:10"},"returnParameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2005,"src":"2836:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1989,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:10"},"scope":2831,"src":"2774:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2038,"nodeType":"Block","src":"3219:260:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"3233:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2023,"nodeType":"IfStatement","src":"3229:127:10","trueBody":{"id":2022,"nodeType":"Block","src":"3241:115:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2018,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"3340:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2019,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"3344:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2014,"id":2021,"nodeType":"Return","src":"3333:12:10"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2024,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"3444:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2028,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"3458:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2031,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2032,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"3467:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:10","trueExpression":{"hexValue":"30","id":2027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2014,"id":2037,"nodeType":"Return","src":"3437:35:10"}]},"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"2933:210:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":2039,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:10","nodeType":"FunctionDefinition","parameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"mutability":"mutable","name":"a","nameLocation":"3173:1:10","nodeType":"VariableDeclaration","scope":2039,"src":"3165:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"b","nameLocation":"3184:1:10","nodeType":"VariableDeclaration","scope":2039,"src":"3176:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:10"},"returnParameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2039,"src":"3210:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:10"},"scope":2831,"src":"3148:331:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2164,"nodeType":"Block","src":"3901:4018:10","statements":[{"id":2163,"nodeType":"UncheckedBlock","src":"3911:4002:10","statements":[{"assignments":[2052],"declarations":[{"constant":false,"id":2052,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:10","nodeType":"VariableDeclaration","scope":2163,"src":"4232:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2056,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2053,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"4248:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2054,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"4252:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:10"},{"assignments":[2058],"declarations":[{"constant":false,"id":2058,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:10","nodeType":"VariableDeclaration","scope":2163,"src":"4312:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2059,"nodeType":"VariableDeclarationStatement","src":"4312:13:10"},{"AST":{"nativeSrc":"4392:122:10","nodeType":"YulBlock","src":"4392:122:10","statements":[{"nativeSrc":"4410:30:10","nodeType":"YulVariableDeclaration","src":"4410:30:10","value":{"arguments":[{"name":"x","nativeSrc":"4427:1:10","nodeType":"YulIdentifier","src":"4427:1:10"},{"name":"y","nativeSrc":"4430:1:10","nodeType":"YulIdentifier","src":"4430:1:10"},{"arguments":[{"kind":"number","nativeSrc":"4437:1:10","nodeType":"YulLiteral","src":"4437:1:10","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4433:3:10","nodeType":"YulIdentifier","src":"4433:3:10"},"nativeSrc":"4433:6:10","nodeType":"YulFunctionCall","src":"4433:6:10"}],"functionName":{"name":"mulmod","nativeSrc":"4420:6:10","nodeType":"YulIdentifier","src":"4420:6:10"},"nativeSrc":"4420:20:10","nodeType":"YulFunctionCall","src":"4420:20:10"},"variables":[{"name":"mm","nativeSrc":"4414:2:10","nodeType":"YulTypedName","src":"4414:2:10","type":""}]},{"nativeSrc":"4457:43:10","nodeType":"YulAssignment","src":"4457:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"4474:2:10","nodeType":"YulIdentifier","src":"4474:2:10"},{"name":"prod0","nativeSrc":"4478:5:10","nodeType":"YulIdentifier","src":"4478:5:10"}],"functionName":{"name":"sub","nativeSrc":"4470:3:10","nodeType":"YulIdentifier","src":"4470:3:10"},"nativeSrc":"4470:14:10","nodeType":"YulFunctionCall","src":"4470:14:10"},{"arguments":[{"name":"mm","nativeSrc":"4489:2:10","nodeType":"YulIdentifier","src":"4489:2:10"},{"name":"prod0","nativeSrc":"4493:5:10","nodeType":"YulIdentifier","src":"4493:5:10"}],"functionName":{"name":"lt","nativeSrc":"4486:2:10","nodeType":"YulIdentifier","src":"4486:2:10"},"nativeSrc":"4486:13:10","nodeType":"YulFunctionCall","src":"4486:13:10"}],"functionName":{"name":"sub","nativeSrc":"4466:3:10","nodeType":"YulIdentifier","src":"4466:3:10"},"nativeSrc":"4466:34:10","nodeType":"YulFunctionCall","src":"4466:34:10"},"variableNames":[{"name":"prod1","nativeSrc":"4457:5:10","nodeType":"YulIdentifier","src":"4457:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2052,"isOffset":false,"isSlot":false,"src":"4478:5:10","valueSize":1},{"declaration":2052,"isOffset":false,"isSlot":false,"src":"4493:5:10","valueSize":1},{"declaration":2058,"isOffset":false,"isSlot":false,"src":"4457:5:10","valueSize":1},{"declaration":2042,"isOffset":false,"isSlot":false,"src":"4427:1:10","valueSize":1},{"declaration":2044,"isOffset":false,"isSlot":false,"src":"4430:1:10","valueSize":1}],"id":2060,"nodeType":"InlineAssembly","src":"4383:131:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"4595:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2069,"nodeType":"IfStatement","src":"4591:368:10","trueBody":{"id":2068,"nodeType":"Block","src":"4607:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"4925:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2065,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"4933:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2050,"id":2067,"nodeType":"Return","src":"4918:26:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2070,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5065:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2071,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"5080:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2077,"nodeType":"IfStatement","src":"5061:88:10","trueBody":{"id":2076,"nodeType":"Block","src":"5087:62:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2073,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1783,"src":"5112:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2075,"nodeType":"RevertStatement","src":"5105:29:10"}]}},{"assignments":[2079],"declarations":[{"constant":false,"id":2079,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:10","nodeType":"VariableDeclaration","scope":2163,"src":"5404:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2078,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2080,"nodeType":"VariableDeclarationStatement","src":"5404:17:10"},{"AST":{"nativeSrc":"5444:291:10","nodeType":"YulBlock","src":"5444:291:10","statements":[{"nativeSrc":"5513:38:10","nodeType":"YulAssignment","src":"5513:38:10","value":{"arguments":[{"name":"x","nativeSrc":"5533:1:10","nodeType":"YulIdentifier","src":"5533:1:10"},{"name":"y","nativeSrc":"5536:1:10","nodeType":"YulIdentifier","src":"5536:1:10"},{"name":"denominator","nativeSrc":"5539:11:10","nodeType":"YulIdentifier","src":"5539:11:10"}],"functionName":{"name":"mulmod","nativeSrc":"5526:6:10","nodeType":"YulIdentifier","src":"5526:6:10"},"nativeSrc":"5526:25:10","nodeType":"YulFunctionCall","src":"5526:25:10"},"variableNames":[{"name":"remainder","nativeSrc":"5513:9:10","nodeType":"YulIdentifier","src":"5513:9:10"}]},{"nativeSrc":"5633:41:10","nodeType":"YulAssignment","src":"5633:41:10","value":{"arguments":[{"name":"prod1","nativeSrc":"5646:5:10","nodeType":"YulIdentifier","src":"5646:5:10"},{"arguments":[{"name":"remainder","nativeSrc":"5656:9:10","nodeType":"YulIdentifier","src":"5656:9:10"},{"name":"prod0","nativeSrc":"5667:5:10","nodeType":"YulIdentifier","src":"5667:5:10"}],"functionName":{"name":"gt","nativeSrc":"5653:2:10","nodeType":"YulIdentifier","src":"5653:2:10"},"nativeSrc":"5653:20:10","nodeType":"YulFunctionCall","src":"5653:20:10"}],"functionName":{"name":"sub","nativeSrc":"5642:3:10","nodeType":"YulIdentifier","src":"5642:3:10"},"nativeSrc":"5642:32:10","nodeType":"YulFunctionCall","src":"5642:32:10"},"variableNames":[{"name":"prod1","nativeSrc":"5633:5:10","nodeType":"YulIdentifier","src":"5633:5:10"}]},{"nativeSrc":"5691:30:10","nodeType":"YulAssignment","src":"5691:30:10","value":{"arguments":[{"name":"prod0","nativeSrc":"5704:5:10","nodeType":"YulIdentifier","src":"5704:5:10"},{"name":"remainder","nativeSrc":"5711:9:10","nodeType":"YulIdentifier","src":"5711:9:10"}],"functionName":{"name":"sub","nativeSrc":"5700:3:10","nodeType":"YulIdentifier","src":"5700:3:10"},"nativeSrc":"5700:21:10","nodeType":"YulFunctionCall","src":"5700:21:10"},"variableNames":[{"name":"prod0","nativeSrc":"5691:5:10","nodeType":"YulIdentifier","src":"5691:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2046,"isOffset":false,"isSlot":false,"src":"5539:11:10","valueSize":1},{"declaration":2052,"isOffset":false,"isSlot":false,"src":"5667:5:10","valueSize":1},{"declaration":2052,"isOffset":false,"isSlot":false,"src":"5691:5:10","valueSize":1},{"declaration":2052,"isOffset":false,"isSlot":false,"src":"5704:5:10","valueSize":1},{"declaration":2058,"isOffset":false,"isSlot":false,"src":"5633:5:10","valueSize":1},{"declaration":2058,"isOffset":false,"isSlot":false,"src":"5646:5:10","valueSize":1},{"declaration":2079,"isOffset":false,"isSlot":false,"src":"5513:9:10","valueSize":1},{"declaration":2079,"isOffset":false,"isSlot":false,"src":"5656:9:10","valueSize":1},{"declaration":2079,"isOffset":false,"isSlot":false,"src":"5711:9:10","valueSize":1},{"declaration":2042,"isOffset":false,"isSlot":false,"src":"5533:1:10","valueSize":1},{"declaration":2044,"isOffset":false,"isSlot":false,"src":"5536:1:10","valueSize":1}],"id":2081,"nodeType":"InlineAssembly","src":"5435:300:10"},{"assignments":[2083],"declarations":[{"constant":false,"id":2083,"mutability":"mutable","name":"twos","nameLocation":"5947:4:10","nodeType":"VariableDeclaration","scope":2163,"src":"5939:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2082,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2090,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2084,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5954:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2086,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"5973:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2088,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:10"},{"AST":{"nativeSrc":"6008:362:10","nodeType":"YulBlock","src":"6008:362:10","statements":[{"nativeSrc":"6073:37:10","nodeType":"YulAssignment","src":"6073:37:10","value":{"arguments":[{"name":"denominator","nativeSrc":"6092:11:10","nodeType":"YulIdentifier","src":"6092:11:10"},{"name":"twos","nativeSrc":"6105:4:10","nodeType":"YulIdentifier","src":"6105:4:10"}],"functionName":{"name":"div","nativeSrc":"6088:3:10","nodeType":"YulIdentifier","src":"6088:3:10"},"nativeSrc":"6088:22:10","nodeType":"YulFunctionCall","src":"6088:22:10"},"variableNames":[{"name":"denominator","nativeSrc":"6073:11:10","nodeType":"YulIdentifier","src":"6073:11:10"}]},{"nativeSrc":"6177:25:10","nodeType":"YulAssignment","src":"6177:25:10","value":{"arguments":[{"name":"prod0","nativeSrc":"6190:5:10","nodeType":"YulIdentifier","src":"6190:5:10"},{"name":"twos","nativeSrc":"6197:4:10","nodeType":"YulIdentifier","src":"6197:4:10"}],"functionName":{"name":"div","nativeSrc":"6186:3:10","nodeType":"YulIdentifier","src":"6186:3:10"},"nativeSrc":"6186:16:10","nodeType":"YulFunctionCall","src":"6186:16:10"},"variableNames":[{"name":"prod0","nativeSrc":"6177:5:10","nodeType":"YulIdentifier","src":"6177:5:10"}]},{"nativeSrc":"6317:39:10","nodeType":"YulAssignment","src":"6317:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6337:1:10","nodeType":"YulLiteral","src":"6337:1:10","type":"","value":"0"},{"name":"twos","nativeSrc":"6340:4:10","nodeType":"YulIdentifier","src":"6340:4:10"}],"functionName":{"name":"sub","nativeSrc":"6333:3:10","nodeType":"YulIdentifier","src":"6333:3:10"},"nativeSrc":"6333:12:10","nodeType":"YulFunctionCall","src":"6333:12:10"},{"name":"twos","nativeSrc":"6347:4:10","nodeType":"YulIdentifier","src":"6347:4:10"}],"functionName":{"name":"div","nativeSrc":"6329:3:10","nodeType":"YulIdentifier","src":"6329:3:10"},"nativeSrc":"6329:23:10","nodeType":"YulFunctionCall","src":"6329:23:10"},{"kind":"number","nativeSrc":"6354:1:10","nodeType":"YulLiteral","src":"6354:1:10","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6325:3:10","nodeType":"YulIdentifier","src":"6325:3:10"},"nativeSrc":"6325:31:10","nodeType":"YulFunctionCall","src":"6325:31:10"},"variableNames":[{"name":"twos","nativeSrc":"6317:4:10","nodeType":"YulIdentifier","src":"6317:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2046,"isOffset":false,"isSlot":false,"src":"6073:11:10","valueSize":1},{"declaration":2046,"isOffset":false,"isSlot":false,"src":"6092:11:10","valueSize":1},{"declaration":2052,"isOffset":false,"isSlot":false,"src":"6177:5:10","valueSize":1},{"declaration":2052,"isOffset":false,"isSlot":false,"src":"6190:5:10","valueSize":1},{"declaration":2083,"isOffset":false,"isSlot":false,"src":"6105:4:10","valueSize":1},{"declaration":2083,"isOffset":false,"isSlot":false,"src":"6197:4:10","valueSize":1},{"declaration":2083,"isOffset":false,"isSlot":false,"src":"6317:4:10","valueSize":1},{"declaration":2083,"isOffset":false,"isSlot":false,"src":"6340:4:10","valueSize":1},{"declaration":2083,"isOffset":false,"isSlot":false,"src":"6347:4:10","valueSize":1}],"id":2091,"nodeType":"InlineAssembly","src":"5999:371:10"},{"expression":{"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2092,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"6436:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6445:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2094,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"6453:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2097,"nodeType":"ExpressionStatement","src":"6436:21:10"},{"assignments":[2099],"declarations":[{"constant":false,"id":2099,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:10","nodeType":"VariableDeclaration","scope":2163,"src":"6775:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2098,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2106,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2101,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"6798:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:10"},{"expression":{"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2107,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7031:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2109,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7046:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2110,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7060:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2114,"nodeType":"ExpressionStatement","src":"7031:36:10"},{"expression":{"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2115,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7100:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2117,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7115:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2118,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7129:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2122,"nodeType":"ExpressionStatement","src":"7100:36:10"},{"expression":{"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2123,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7170:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2125,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7185:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2126,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7199:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2130,"nodeType":"ExpressionStatement","src":"7170:36:10"},{"expression":{"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2131,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7240:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2133,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7255:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2134,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7269:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2138,"nodeType":"ExpressionStatement","src":"7240:36:10"},{"expression":{"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2139,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7310:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2141,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7325:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2142,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7339:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2146,"nodeType":"ExpressionStatement","src":"7310:36:10"},{"expression":{"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7381:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7396:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2150,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7410:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2154,"nodeType":"ExpressionStatement","src":"7381:36:10"},{"expression":{"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2155,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"7851:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2156,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"7860:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2157,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"7868:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2160,"nodeType":"ExpressionStatement","src":"7851:24:10"},{"expression":{"id":2161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"7896:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2050,"id":2162,"nodeType":"Return","src":"7889:13:10"}]}]},"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"3485:313:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":2165,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:10","nodeType":"FunctionDefinition","parameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"x","nameLocation":"3827:1:10","nodeType":"VariableDeclaration","scope":2165,"src":"3819:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2041,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2044,"mutability":"mutable","name":"y","nameLocation":"3838:1:10","nodeType":"VariableDeclaration","scope":2165,"src":"3830:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2043,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2046,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:10","nodeType":"VariableDeclaration","scope":2165,"src":"3841:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2045,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:10"},"returnParameters":{"id":2050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2049,"mutability":"mutable","name":"result","nameLocation":"3893:6:10","nodeType":"VariableDeclaration","scope":2165,"src":"3885:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:10"},"scope":2831,"src":"3803:4116:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2207,"nodeType":"Block","src":"8161:192:10","statements":[{"assignments":[2181],"declarations":[{"constant":false,"id":2181,"mutability":"mutable","name":"result","nameLocation":"8179:6:10","nodeType":"VariableDeclaration","scope":2207,"src":"8171:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2180,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2187,"initialValue":{"arguments":[{"id":2183,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"8195:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2184,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"8198:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2185,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"8201:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2182,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2165,2208],"referencedDeclaration":2165,"src":"8188:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2189,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"8244:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}],"id":2188,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"8227:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1788_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2192,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"8264:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2193,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"8267:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2194,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"8270:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2191,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2204,"nodeType":"IfStatement","src":"8223:101:10","trueBody":{"id":2203,"nodeType":"Block","src":"8288:36:10","statements":[{"expression":{"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"8302:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2202,"nodeType":"ExpressionStatement","src":"8302:11:10"}]}},{"expression":{"id":2205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"8340:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2179,"id":2206,"nodeType":"Return","src":"8333:13:10"}]},"documentation":{"id":2166,"nodeType":"StructuredDocumentation","src":"7925:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2208,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:10","nodeType":"FunctionDefinition","parameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"mutability":"mutable","name":"x","nameLocation":"8075:1:10","nodeType":"VariableDeclaration","scope":2208,"src":"8067:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2167,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2170,"mutability":"mutable","name":"y","nameLocation":"8086:1:10","nodeType":"VariableDeclaration","scope":2208,"src":"8078:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2169,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2172,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:10","nodeType":"VariableDeclaration","scope":2208,"src":"8089:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2171,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2175,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:10","nodeType":"VariableDeclaration","scope":2208,"src":"8110:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2174,"nodeType":"UserDefinedTypeName","pathNode":{"id":2173,"name":"Rounding","nameLocations":["8110:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"8110:8:10"},"referencedDeclaration":1788,"src":"8110:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:10"},"returnParameters":{"id":2179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2208,"src":"8152:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2177,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:10"},"scope":2831,"src":"8051:302:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2319,"nodeType":"Block","src":"8644:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2216,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"8658:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2222,"nodeType":"IfStatement","src":"8654:45:10","trueBody":{"id":2221,"nodeType":"Block","src":"8666:33:10","statements":[{"expression":{"hexValue":"30","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2215,"id":2220,"nodeType":"Return","src":"8680:8:10"}]}},{"assignments":[2224],"declarations":[{"constant":false,"id":2224,"mutability":"mutable","name":"result","nameLocation":"9386:6:10","nodeType":"VariableDeclaration","scope":2319,"src":"9378:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2223,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2233,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2227,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"9406:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2226,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2487,2522],"referencedDeclaration":2487,"src":"9401:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2231,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:10"},{"id":2318,"nodeType":"UncheckedBlock","src":"9815:408:10","statements":[{"expression":{"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9839:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2235,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9849:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"9858:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2237,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9862:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2244,"nodeType":"ExpressionStatement","src":"9839:35:10"},{"expression":{"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2245,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9888:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2246,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9898:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2247,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"9907:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9911:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2251,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2255,"nodeType":"ExpressionStatement","src":"9888:35:10"},{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2256,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9937:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2257,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9947:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2258,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"9956:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9960:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2266,"nodeType":"ExpressionStatement","src":"9937:35:10"},{"expression":{"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2267,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9986:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"9996:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"10005:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2270,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10009:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2273,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ExpressionStatement","src":"9986:35:10"},{"expression":{"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10035:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10045:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2280,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"10054:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2281,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10058:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2288,"nodeType":"ExpressionStatement","src":"10035:35:10"},{"expression":{"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2289,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10084:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10094:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2291,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"10103:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10107:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2295,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2299,"nodeType":"ExpressionStatement","src":"10084:35:10"},{"expression":{"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2300,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10133:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2301,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10143:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"10152:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2303,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10156:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2306,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2310,"nodeType":"ExpressionStatement","src":"10133:35:10"},{"expression":{"arguments":[{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10193:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"10201:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"10205:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2311,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"10189:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2215,"id":2317,"nodeType":"Return","src":"10182:30:10"}]}]},"documentation":{"id":2209,"nodeType":"StructuredDocumentation","src":"8359:223:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2320,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:10","nodeType":"FunctionDefinition","parameters":{"id":2212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2211,"mutability":"mutable","name":"a","nameLocation":"8609:1:10","nodeType":"VariableDeclaration","scope":2320,"src":"8601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2210,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:10"},"returnParameters":{"id":2215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2320,"src":"8635:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2213,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:10"},"scope":2831,"src":"8587:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2354,"nodeType":"Block","src":"10405:164:10","statements":[{"id":2353,"nodeType":"UncheckedBlock","src":"10415:148:10","statements":[{"assignments":[2332],"declarations":[{"constant":false,"id":2332,"mutability":"mutable","name":"result","nameLocation":"10447:6:10","nodeType":"VariableDeclaration","scope":2353,"src":"10439:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2336,"initialValue":{"arguments":[{"id":2334,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"10461:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2333,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2320,2355],"referencedDeclaration":2320,"src":"10456:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2337,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"10484:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2339,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"10511:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}],"id":2338,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"10494:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1788_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"10524:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2342,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"10533:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2344,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"10542:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:10","trueExpression":{"hexValue":"31","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2350,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2330,"id":2352,"nodeType":"Return","src":"10477:75:10"}]}]},"documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"10235:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2355,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:10","nodeType":"FunctionDefinition","parameters":{"id":2327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"a","nameLocation":"10351:1:10","nodeType":"VariableDeclaration","scope":2355,"src":"10343:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2322,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2326,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:10","nodeType":"VariableDeclaration","scope":2355,"src":"10354:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2325,"nodeType":"UserDefinedTypeName","pathNode":{"id":2324,"name":"Rounding","nameLocations":["10354:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"10354:8:10"},"referencedDeclaration":1788,"src":"10354:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:10"},"returnParameters":{"id":2330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2329,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2355,"src":"10396:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2328,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:10"},"scope":2831,"src":"10329:240:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2486,"nodeType":"Block","src":"10760:922:10","statements":[{"assignments":[2364],"declarations":[{"constant":false,"id":2364,"mutability":"mutable","name":"result","nameLocation":"10778:6:10","nodeType":"VariableDeclaration","scope":2486,"src":"10770:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2363,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2366,"initialValue":{"hexValue":"30","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:10"},{"id":2483,"nodeType":"UncheckedBlock","src":"10798:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2367,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"10826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2381,"nodeType":"IfStatement","src":"10822:99:10","trueBody":{"id":2380,"nodeType":"Block","src":"10844:77:10","statements":[{"expression":{"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2372,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"10862:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2375,"nodeType":"ExpressionStatement","src":"10862:13:10"},{"expression":{"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2376,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"10893:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2379,"nodeType":"ExpressionStatement","src":"10893:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"10938:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2396,"nodeType":"IfStatement","src":"10934:96:10","trueBody":{"id":2395,"nodeType":"Block","src":"10955:75:10","statements":[{"expression":{"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2387,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"10973:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2390,"nodeType":"ExpressionStatement","src":"10973:12:10"},{"expression":{"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2391,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11003:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2394,"nodeType":"ExpressionStatement","src":"11003:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2397,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11047:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2411,"nodeType":"IfStatement","src":"11043:96:10","trueBody":{"id":2410,"nodeType":"Block","src":"11064:75:10","statements":[{"expression":{"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11082:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2405,"nodeType":"ExpressionStatement","src":"11082:12:10"},{"expression":{"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11112:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2409,"nodeType":"ExpressionStatement","src":"11112:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11156:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2426,"nodeType":"IfStatement","src":"11152:96:10","trueBody":{"id":2425,"nodeType":"Block","src":"11173:75:10","statements":[{"expression":{"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11191:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2420,"nodeType":"ExpressionStatement","src":"11191:12:10"},{"expression":{"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2421,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11221:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2424,"nodeType":"ExpressionStatement","src":"11221:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11265:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2441,"nodeType":"IfStatement","src":"11261:93:10","trueBody":{"id":2440,"nodeType":"Block","src":"11281:73:10","statements":[{"expression":{"id":2434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11299:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2435,"nodeType":"ExpressionStatement","src":"11299:11:10"},{"expression":{"id":2438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11328:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2439,"nodeType":"ExpressionStatement","src":"11328:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11371:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2456,"nodeType":"IfStatement","src":"11367:93:10","trueBody":{"id":2455,"nodeType":"Block","src":"11387:73:10","statements":[{"expression":{"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11405:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2450,"nodeType":"ExpressionStatement","src":"11405:11:10"},{"expression":{"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11434:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2454,"nodeType":"ExpressionStatement","src":"11434:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2457,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11477:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2471,"nodeType":"IfStatement","src":"11473:93:10","trueBody":{"id":2470,"nodeType":"Block","src":"11493:73:10","statements":[{"expression":{"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2462,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11511:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2465,"nodeType":"ExpressionStatement","src":"11511:11:10"},{"expression":{"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2466,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11540:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2469,"nodeType":"ExpressionStatement","src":"11540:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2472,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"11583:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2482,"nodeType":"IfStatement","src":"11579:64:10","trueBody":{"id":2481,"nodeType":"Block","src":"11599:44:10","statements":[{"expression":{"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11617:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2480,"nodeType":"ExpressionStatement","src":"11617:11:10"}]}}]},{"expression":{"id":2484,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2364,"src":"11669:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2362,"id":2485,"nodeType":"Return","src":"11662:13:10"}]},"documentation":{"id":2356,"nodeType":"StructuredDocumentation","src":"10575:119:10","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2487,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:10","nodeType":"FunctionDefinition","parameters":{"id":2359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"value","nameLocation":"10721:5:10","nodeType":"VariableDeclaration","scope":2487,"src":"10713:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:10"},"returnParameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2487,"src":"10751:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2360,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:10"},"scope":2831,"src":"10699:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2521,"nodeType":"Block","src":"11915:168:10","statements":[{"id":2520,"nodeType":"UncheckedBlock","src":"11925:152:10","statements":[{"assignments":[2499],"declarations":[{"constant":false,"id":2499,"mutability":"mutable","name":"result","nameLocation":"11957:6:10","nodeType":"VariableDeclaration","scope":2520,"src":"11949:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2498,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2503,"initialValue":{"arguments":[{"id":2501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"11971:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2500,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2487,2522],"referencedDeclaration":2487,"src":"11966:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2504,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11998:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2506,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"12025:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}],"id":2505,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"12008:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1788_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12043:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"12052:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:10","trueExpression":{"hexValue":"31","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2497,"id":2519,"nodeType":"Return","src":"11991:75:10"}]}]},"documentation":{"id":2488,"nodeType":"StructuredDocumentation","src":"11688:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2522,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:10","nodeType":"FunctionDefinition","parameters":{"id":2494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2490,"mutability":"mutable","name":"value","nameLocation":"11857:5:10","nodeType":"VariableDeclaration","scope":2522,"src":"11849:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2489,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2493,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:10","nodeType":"VariableDeclaration","scope":2522,"src":"11864:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2492,"nodeType":"UserDefinedTypeName","pathNode":{"id":2491,"name":"Rounding","nameLocations":["11864:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"11864:8:10"},"referencedDeclaration":1788,"src":"11864:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:10"},"returnParameters":{"id":2497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2522,"src":"11906:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2495,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:10"},"scope":2831,"src":"11835:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2650,"nodeType":"Block","src":"12276:854:10","statements":[{"assignments":[2531],"declarations":[{"constant":false,"id":2531,"mutability":"mutable","name":"result","nameLocation":"12294:6:10","nodeType":"VariableDeclaration","scope":2650,"src":"12286:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2530,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2533,"initialValue":{"hexValue":"30","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:10"},{"id":2647,"nodeType":"UncheckedBlock","src":"12314:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12342:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2550,"nodeType":"IfStatement","src":"12338:103:10","trueBody":{"id":2549,"nodeType":"Block","src":"12361:80:10","statements":[{"expression":{"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2539,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12379:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2544,"nodeType":"ExpressionStatement","src":"12379:17:10"},{"expression":{"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"12414:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2548,"nodeType":"ExpressionStatement","src":"12414:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12458:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2554,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2567,"nodeType":"IfStatement","src":"12454:103:10","trueBody":{"id":2566,"nodeType":"Block","src":"12477:80:10","statements":[{"expression":{"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12495:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2561,"nodeType":"ExpressionStatement","src":"12495:17:10"},{"expression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2562,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"12530:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2565,"nodeType":"ExpressionStatement","src":"12530:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12574:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2584,"nodeType":"IfStatement","src":"12570:103:10","trueBody":{"id":2583,"nodeType":"Block","src":"12593:80:10","statements":[{"expression":{"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2573,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12611:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2578,"nodeType":"ExpressionStatement","src":"12611:17:10"},{"expression":{"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2579,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"12646:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2582,"nodeType":"ExpressionStatement","src":"12646:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2585,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12690:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2601,"nodeType":"IfStatement","src":"12686:100:10","trueBody":{"id":2600,"nodeType":"Block","src":"12708:78:10","statements":[{"expression":{"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2590,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12726:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2595,"nodeType":"ExpressionStatement","src":"12726:16:10"},{"expression":{"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2596,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"12760:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2599,"nodeType":"ExpressionStatement","src":"12760:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12803:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2618,"nodeType":"IfStatement","src":"12799:100:10","trueBody":{"id":2617,"nodeType":"Block","src":"12821:78:10","statements":[{"expression":{"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12839:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2612,"nodeType":"ExpressionStatement","src":"12839:16:10"},{"expression":{"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"12873:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2616,"nodeType":"ExpressionStatement","src":"12873:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2635,"nodeType":"IfStatement","src":"12912:100:10","trueBody":{"id":2634,"nodeType":"Block","src":"12934:78:10","statements":[{"expression":{"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"12952:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2629,"nodeType":"ExpressionStatement","src":"12952:16:10"},{"expression":{"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2630,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"12986:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2633,"nodeType":"ExpressionStatement","src":"12986:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2636,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"13029:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2646,"nodeType":"IfStatement","src":"13025:66:10","trueBody":{"id":2645,"nodeType":"Block","src":"13047:44:10","statements":[{"expression":{"id":2643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2641,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"13065:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2644,"nodeType":"ExpressionStatement","src":"13065:11:10"}]}}]},{"expression":{"id":2648,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"13117:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2529,"id":2649,"nodeType":"Return","src":"13110:13:10"}]},"documentation":{"id":2523,"nodeType":"StructuredDocumentation","src":"12089:120:10","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":2651,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:10","nodeType":"FunctionDefinition","parameters":{"id":2526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2525,"mutability":"mutable","name":"value","nameLocation":"12237:5:10","nodeType":"VariableDeclaration","scope":2651,"src":"12229:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2524,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:10"},"returnParameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2651,"src":"12267:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2527,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:10"},"scope":2831,"src":"12214:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2685,"nodeType":"Block","src":"13365:170:10","statements":[{"id":2684,"nodeType":"UncheckedBlock","src":"13375:154:10","statements":[{"assignments":[2663],"declarations":[{"constant":false,"id":2663,"mutability":"mutable","name":"result","nameLocation":"13407:6:10","nodeType":"VariableDeclaration","scope":2684,"src":"13399:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2662,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2667,"initialValue":{"arguments":[{"id":2665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"13422:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2664,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2651,2686],"referencedDeclaration":2651,"src":"13416:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"13449:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2670,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"13476:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}],"id":2669,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"13459:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1788_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"13495:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"13504:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:10","trueExpression":{"hexValue":"31","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2661,"id":2683,"nodeType":"Return","src":"13442:76:10"}]}]},"documentation":{"id":2652,"nodeType":"StructuredDocumentation","src":"13136:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2686,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:10","nodeType":"FunctionDefinition","parameters":{"id":2658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2654,"mutability":"mutable","name":"value","nameLocation":"13307:5:10","nodeType":"VariableDeclaration","scope":2686,"src":"13299:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2653,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:10","nodeType":"VariableDeclaration","scope":2686,"src":"13314:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2656,"nodeType":"UserDefinedTypeName","pathNode":{"id":2655,"name":"Rounding","nameLocations":["13314:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"13314:8:10"},"referencedDeclaration":1788,"src":"13314:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:10"},"returnParameters":{"id":2661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2686,"src":"13356:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2659,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:10"},"scope":2831,"src":"13284:251:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2772,"nodeType":"Block","src":"13855:600:10","statements":[{"assignments":[2695],"declarations":[{"constant":false,"id":2695,"mutability":"mutable","name":"result","nameLocation":"13873:6:10","nodeType":"VariableDeclaration","scope":2772,"src":"13865:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2694,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2697,"initialValue":{"hexValue":"30","id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:10"},{"id":2769,"nodeType":"UncheckedBlock","src":"13893:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"13921:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2712,"nodeType":"IfStatement","src":"13917:98:10","trueBody":{"id":2711,"nodeType":"Block","src":"13939:76:10","statements":[{"expression":{"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"13957:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2706,"nodeType":"ExpressionStatement","src":"13957:13:10"},{"expression":{"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"13988:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2710,"nodeType":"ExpressionStatement","src":"13988:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14032:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2727,"nodeType":"IfStatement","src":"14028:95:10","trueBody":{"id":2726,"nodeType":"Block","src":"14049:74:10","statements":[{"expression":{"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14067:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2721,"nodeType":"ExpressionStatement","src":"14067:12:10"},{"expression":{"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2722,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"14097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2725,"nodeType":"ExpressionStatement","src":"14097:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14140:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2742,"nodeType":"IfStatement","src":"14136:95:10","trueBody":{"id":2741,"nodeType":"Block","src":"14157:74:10","statements":[{"expression":{"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14175:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2736,"nodeType":"ExpressionStatement","src":"14175:12:10"},{"expression":{"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2737,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"14205:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2740,"nodeType":"ExpressionStatement","src":"14205:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14248:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2757,"nodeType":"IfStatement","src":"14244:95:10","trueBody":{"id":2756,"nodeType":"Block","src":"14265:74:10","statements":[{"expression":{"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2748,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14283:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2751,"nodeType":"ExpressionStatement","src":"14283:12:10"},{"expression":{"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2752,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"14313:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2755,"nodeType":"ExpressionStatement","src":"14313:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2758,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14356:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2768,"nodeType":"IfStatement","src":"14352:64:10","trueBody":{"id":2767,"nodeType":"Block","src":"14372:44:10","statements":[{"expression":{"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2763,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"14390:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2766,"nodeType":"ExpressionStatement","src":"14390:11:10"}]}}]},{"expression":{"id":2770,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"14442:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2693,"id":2771,"nodeType":"Return","src":"14435:13:10"}]},"documentation":{"id":2687,"nodeType":"StructuredDocumentation","src":"13541:246:10","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2773,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:10","nodeType":"FunctionDefinition","parameters":{"id":2690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2689,"mutability":"mutable","name":"value","nameLocation":"13816:5:10","nodeType":"VariableDeclaration","scope":2773,"src":"13808:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:10"},"returnParameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2773,"src":"13846:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2691,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:10"},"scope":2831,"src":"13792:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2810,"nodeType":"Block","src":"14692:177:10","statements":[{"id":2809,"nodeType":"UncheckedBlock","src":"14702:161:10","statements":[{"assignments":[2785],"declarations":[{"constant":false,"id":2785,"mutability":"mutable","name":"result","nameLocation":"14734:6:10","nodeType":"VariableDeclaration","scope":2809,"src":"14726:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2789,"initialValue":{"arguments":[{"id":2787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"14750:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2786,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2773,2811],"referencedDeclaration":2773,"src":"14743:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2790,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"14777:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2792,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2779,"src":"14804:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}],"id":2791,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2830,"src":"14787:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$1788_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2795,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"14823:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2798,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2776,"src":"14838:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:10","trueExpression":{"hexValue":"31","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2806,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2783,"id":2808,"nodeType":"Return","src":"14770:82:10"}]}]},"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"14461:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2811,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:10","nodeType":"FunctionDefinition","parameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"value","nameLocation":"14634:5:10","nodeType":"VariableDeclaration","scope":2811,"src":"14626:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2775,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2779,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:10","nodeType":"VariableDeclaration","scope":2811,"src":"14641:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2778,"nodeType":"UserDefinedTypeName","pathNode":{"id":2777,"name":"Rounding","nameLocations":["14641:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"14641:8:10"},"referencedDeclaration":1788,"src":"14641:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:10"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2811,"src":"14683:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2781,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:10"},"scope":2831,"src":"14610:259:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2829,"nodeType":"Block","src":"15067:48:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2822,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"15090:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}],"id":2821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2820,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:10","typeDescriptions":{}}},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":2824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2819,"id":2828,"nodeType":"Return","src":"15077:31:10"}]},"documentation":{"id":2812,"nodeType":"StructuredDocumentation","src":"14875:113:10","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":2830,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:10","nodeType":"FunctionDefinition","parameters":{"id":2816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2815,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:10","nodeType":"VariableDeclaration","scope":2830,"src":"15019:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"},"typeName":{"id":2814,"nodeType":"UserDefinedTypeName","pathNode":{"id":2813,"name":"Rounding","nameLocations":["15019:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1788,"src":"15019:8:10"},"referencedDeclaration":1788,"src":"15019:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1788","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:10"},"returnParameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2830,"src":"15061:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2817,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:10"},"scope":2831,"src":"14993:122:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2832,"src":"203:14914:10","usedErrors":[1783],"usedEvents":[]}],"src":"103:15015:10"},"id":10},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[2936]},"id":2937,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2833,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2834,"nodeType":"StructuredDocumentation","src":"135:80:11","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2936,"linearizedBaseContracts":[2936],"name":"SignedMath","nameLocation":"224:10:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2851,"nodeType":"Block","src":"376:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2844,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"393:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2845,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"397:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2848,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"405:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:11","trueExpression":{"id":2847,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"401:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2843,"id":2850,"nodeType":"Return","src":"386:20:11"}]},"documentation":{"id":2835,"nodeType":"StructuredDocumentation","src":"241:66:11","text":" @dev Returns the largest of two signed numbers."},"id":2852,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:11","nodeType":"FunctionDefinition","parameters":{"id":2840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"a","nameLocation":"332:1:11","nodeType":"VariableDeclaration","scope":2852,"src":"325:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2836,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2839,"mutability":"mutable","name":"b","nameLocation":"342:1:11","nodeType":"VariableDeclaration","scope":2852,"src":"335:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2838,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:11"},"returnParameters":{"id":2843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2852,"src":"368:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2841,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:11"},"scope":2936,"src":"312:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2869,"nodeType":"Block","src":"555:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2862,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"572:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2863,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"576:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2866,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"584:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:11","trueExpression":{"id":2865,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2855,"src":"580:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2861,"id":2868,"nodeType":"Return","src":"565:20:11"}]},"documentation":{"id":2853,"nodeType":"StructuredDocumentation","src":"419:67:11","text":" @dev Returns the smallest of two signed numbers."},"id":2870,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:11","nodeType":"FunctionDefinition","parameters":{"id":2858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2855,"mutability":"mutable","name":"a","nameLocation":"511:1:11","nodeType":"VariableDeclaration","scope":2870,"src":"504:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2854,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2857,"mutability":"mutable","name":"b","nameLocation":"521:1:11","nodeType":"VariableDeclaration","scope":2870,"src":"514:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2856,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:11"},"returnParameters":{"id":2861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2870,"src":"547:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2859,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:11"},"scope":2936,"src":"491:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2913,"nodeType":"Block","src":"797:162:11","statements":[{"assignments":[2881],"declarations":[{"constant":false,"id":2881,"mutability":"mutable","name":"x","nameLocation":"866:1:11","nodeType":"VariableDeclaration","scope":2913,"src":"859:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2880,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2894,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2882,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"871:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2883,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"875:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2885,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2886,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"882:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2887,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"886:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2889,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2892,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2895,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"911:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2900,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"931:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2898,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:11","typeDescriptions":{}}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2896,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:11","typeDescriptions":{}}},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2905,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"945:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2906,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"949:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2908,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2910,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2879,"id":2912,"nodeType":"Return","src":"904:48:11"}]},"documentation":{"id":2871,"nodeType":"StructuredDocumentation","src":"598:126:11","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2914,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:11","nodeType":"FunctionDefinition","parameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2873,"mutability":"mutable","name":"a","nameLocation":"753:1:11","nodeType":"VariableDeclaration","scope":2914,"src":"746:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2872,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"b","nameLocation":"763:1:11","nodeType":"VariableDeclaration","scope":2914,"src":"756:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2874,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:11"},"returnParameters":{"id":2879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2914,"src":"789:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2877,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:11"},"scope":2936,"src":"729:230:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2934,"nodeType":"Block","src":"1103:158:11","statements":[{"id":2933,"nodeType":"UncheckedBlock","src":"1113:142:11","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2924,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"1228:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:11","subExpression":{"id":2928,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"1242:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:11","trueExpression":{"id":2927,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"1237:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:11","typeDescriptions":{}}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2921,"id":2932,"nodeType":"Return","src":"1213:31:11"}]}]},"documentation":{"id":2915,"nodeType":"StructuredDocumentation","src":"965:78:11","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2935,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:11","nodeType":"FunctionDefinition","parameters":{"id":2918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2917,"mutability":"mutable","name":"n","nameLocation":"1068:1:11","nodeType":"VariableDeclaration","scope":2935,"src":"1061:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2916,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:11"},"returnParameters":{"id":2921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2935,"src":"1094:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2919,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:11"},"scope":2936,"src":"1048:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2937,"src":"216:1047:11","usedErrors":[],"usedEvents":[]}],"src":"109:1155:11"},"id":11},"contracts/Factory.sol":{"ast":{"absolutePath":"contracts/Factory.sol","exportedSymbols":{"Context":[1486],"ERC165":[1765],"ERC721":[1293],"Factory":[2996],"IERC165":[1777],"IERC721":[1410],"IERC721Errors":[237],"IERC721Metadata":[1456],"IERC721Receiver":[1428],"Ownable":[147],"Poap":[3276],"Strings":[1741]},"id":2997,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2938,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:12"},{"absolutePath":"contracts/Poap.sol","file":"./Poap.sol","id":2939,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2997,"sourceUnit":3277,"src":"57:20:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Factory","contractDependencies":[3276],"contractKind":"contract","fullyImplemented":true,"id":2996,"linearizedBaseContracts":[2996],"name":"Factory","nameLocation":"88:7:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"8a9d179e","id":2942,"mutability":"mutable","name":"deployedPOAPs","nameLocation":"119:13:12","nodeType":"VariableDeclaration","scope":2996,"src":"102:30:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":2940,"name":"address","nodeType":"ElementaryTypeName","src":"102:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2941,"nodeType":"ArrayTypeName","src":"102:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"public"},{"anonymous":false,"eventSelector":"8ffcdc15a283d706d38281f500270d8b5a656918f555de0913d7455e3e6bc1bf","id":2946,"name":"ContractDeployed","nameLocation":"151:16:12","nodeType":"EventDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2944,"indexed":true,"mutability":"mutable","name":"contractAddress","nameLocation":"184:15:12","nodeType":"VariableDeclaration","scope":2946,"src":"168:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2943,"name":"address","nodeType":"ElementaryTypeName","src":"168:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"167:33:12"},"src":"145:56:12"},{"body":{"id":2985,"nodeType":"Block","src":"374:257:12","statements":[{"assignments":[2959],"declarations":[{"constant":false,"id":2959,"mutability":"mutable","name":"newContract","nameLocation":"389:11:12","nodeType":"VariableDeclaration","scope":2985,"src":"384:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"},"typeName":{"id":2958,"nodeType":"UserDefinedTypeName","pathNode":{"id":2957,"name":"Poap","nameLocations":["384:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":3276,"src":"384:4:12"},"referencedDeclaration":3276,"src":"384:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"}},"visibility":"internal"}],"id":2968,"initialValue":{"arguments":[{"id":2963,"name":"_initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"425:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2964,"name":"_poapName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2950,"src":"452:9:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2965,"name":"_poapShortName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"475:14:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2966,"name":"_poapURL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"503:8:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"403:8:12","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_contract$_Poap_$3276_$","typeString":"function (address,string memory,string memory,string memory) returns (contract Poap)"},"typeName":{"id":2961,"nodeType":"UserDefinedTypeName","pathNode":{"id":2960,"name":"Poap","nameLocations":["407:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":3276,"src":"407:4:12"},"referencedDeclaration":3276,"src":"407:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"}}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"403:118:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"}},"nodeType":"VariableDeclarationStatement","src":"384:137:12"},{"expression":{"arguments":[{"arguments":[{"id":2974,"name":"newContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"558:11:12","typeDescriptions":{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"}],"id":2973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"550:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2972,"name":"address","nodeType":"ElementaryTypeName","src":"550:7:12","typeDescriptions":{}}},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"550:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2969,"name":"deployedPOAPs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"531:13:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"545:4:12","memberName":"push","nodeType":"MemberAccess","src":"531:18:12","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"531:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2977,"nodeType":"ExpressionStatement","src":"531:40:12"},{"eventCall":{"arguments":[{"arguments":[{"id":2981,"name":"newContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"611:11:12","typeDescriptions":{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Poap_$3276","typeString":"contract Poap"}],"id":2980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"603:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2979,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:12","typeDescriptions":{}}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"603:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2978,"name":"ContractDeployed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"586:16:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"586:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2984,"nodeType":"EmitStatement","src":"581:43:12"}]},"functionSelector":"00a48f58","id":2986,"implemented":true,"kind":"function","modifiers":[],"name":"deployPOAP","nameLocation":"216:10:12","nodeType":"FunctionDefinition","parameters":{"id":2955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2948,"mutability":"mutable","name":"_initialOwner","nameLocation":"244:13:12","nodeType":"VariableDeclaration","scope":2986,"src":"236:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2947,"name":"address","nodeType":"ElementaryTypeName","src":"236:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2950,"mutability":"mutable","name":"_poapName","nameLocation":"281:9:12","nodeType":"VariableDeclaration","scope":2986,"src":"267:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2949,"name":"string","nodeType":"ElementaryTypeName","src":"267:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2952,"mutability":"mutable","name":"_poapShortName","nameLocation":"314:14:12","nodeType":"VariableDeclaration","scope":2986,"src":"300:28:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2951,"name":"string","nodeType":"ElementaryTypeName","src":"300:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2954,"mutability":"mutable","name":"_poapURL","nameLocation":"352:8:12","nodeType":"VariableDeclaration","scope":2986,"src":"338:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2953,"name":"string","nodeType":"ElementaryTypeName","src":"338:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"226:140:12"},"returnParameters":{"id":2956,"nodeType":"ParameterList","parameters":[],"src":"374:0:12"},"scope":2996,"src":"207:424:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2994,"nodeType":"Block","src":"708:37:12","statements":[{"expression":{"id":2992,"name":"deployedPOAPs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2942,"src":"725:13:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"functionReturnParameters":2991,"id":2993,"nodeType":"Return","src":"718:20:12"}]},"functionSelector":"aa9a068f","id":2995,"implemented":true,"kind":"function","modifiers":[],"name":"getDeployedContracts","nameLocation":"646:20:12","nodeType":"FunctionDefinition","parameters":{"id":2987,"nodeType":"ParameterList","parameters":[],"src":"666:2:12"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2995,"src":"690:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2988,"name":"address","nodeType":"ElementaryTypeName","src":"690:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2989,"nodeType":"ArrayTypeName","src":"690:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"689:18:12"},"scope":2996,"src":"637:108:12","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":2997,"src":"79:668:12","usedErrors":[],"usedEvents":[2946]}],"src":"32:716:12"},"id":12},"contracts/Poap.sol":{"ast":{"absolutePath":"contracts/Poap.sol","exportedSymbols":{"Context":[1486],"ERC165":[1765],"ERC721":[1293],"IERC165":[1777],"IERC721":[1410],"IERC721Errors":[237],"IERC721Metadata":[1456],"IERC721Receiver":[1428],"Ownable":[147],"Poap":[3276],"Strings":[1741]},"id":3277,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2998,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"81:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2999,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3277,"sourceUnit":1294,"src":"106:57:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3000,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3277,"sourceUnit":148,"src":"164:52:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3001,"name":"ERC721","nameLocations":["235:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1293,"src":"235:6:13"},"id":3002,"nodeType":"InheritanceSpecifier","src":"235:6:13"},{"baseName":{"id":3003,"name":"Ownable","nameLocations":["243:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"243:7:13"},"id":3004,"nodeType":"InheritanceSpecifier","src":"243:7:13"}],"canonicalName":"Poap","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3276,"linearizedBaseContracts":[3276,147,1293,237,1456,1410,1765,1777,1486],"name":"Poap","nameLocation":"227:4:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3006,"mutability":"mutable","name":"_nextTokenId","nameLocation":"273:12:13","nodeType":"VariableDeclaration","scope":3276,"src":"257:28:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3005,"name":"uint256","nodeType":"ElementaryTypeName","src":"257:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"54a18d57","id":3008,"mutability":"mutable","name":"poapURL","nameLocation":"305:7:13","nodeType":"VariableDeclaration","scope":3276,"src":"291:21:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3007,"name":"string","nodeType":"ElementaryTypeName","src":"291:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"7824407f","id":3010,"mutability":"mutable","name":"tokenSupply","nameLocation":"333:11:13","nodeType":"VariableDeclaration","scope":3276,"src":"318:26:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3009,"name":"uint256","nodeType":"ElementaryTypeName","src":"318:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"8af05318","id":3012,"mutability":"mutable","name":"volunteerSignUp","nameLocation":"365:15:13","nodeType":"VariableDeclaration","scope":3276,"src":"350:30:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3011,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"2a11ced0","id":3015,"mutability":"mutable","name":"holders","nameLocation":"403:7:13","nodeType":"VariableDeclaration","scope":3276,"src":"386:24:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":3013,"name":"address","nodeType":"ElementaryTypeName","src":"386:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3014,"nodeType":"ArrayTypeName","src":"386:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"public"},{"constant":false,"functionSelector":"30bee0f1","id":3017,"mutability":"mutable","name":"signUpEnabled","nameLocation":"428:13:13","nodeType":"VariableDeclaration","scope":3276,"src":"416:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3016,"name":"bool","nodeType":"ElementaryTypeName","src":"416:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"id":3021,"mutability":"mutable","name":"signUpWallet","nameLocation":"480:12:13","nodeType":"VariableDeclaration","scope":3276,"src":"447:45:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3020,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3018,"name":"address","nodeType":"ElementaryTypeName","src":"455:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"447:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3019,"name":"bool","nodeType":"ElementaryTypeName","src":"466:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"private"},{"constant":false,"id":3025,"mutability":"mutable","name":"holderIndex","nameLocation":"534:11:13","nodeType":"VariableDeclaration","scope":3276,"src":"498:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3024,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3022,"name":"address","nodeType":"ElementaryTypeName","src":"506:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"498:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3023,"name":"uint256","nodeType":"ElementaryTypeName","src":"517:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":3051,"nodeType":"Block","src":"760:65:13","statements":[{"expression":{"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3043,"name":"poapURL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"770:7:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3044,"name":"_poapURL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"780:8:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"770:18:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3046,"nodeType":"ExpressionStatement","src":"770:18:13"},{"expression":{"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3047,"name":"signUpEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"798:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"814:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"798:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3050,"nodeType":"ExpressionStatement","src":"798:20:13"}]},"id":3052,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3036,"name":"_poapName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"711:9:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3037,"name":"_poapShortName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"722:14:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3038,"kind":"baseConstructorSpecifier","modifierName":{"id":3035,"name":"ERC721","nameLocations":["704:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":1293,"src":"704:6:13"},"nodeType":"ModifierInvocation","src":"704:33:13"},{"arguments":[{"id":3040,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"746:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3041,"kind":"baseConstructorSpecifier","modifierName":{"id":3039,"name":"Ownable","nameLocations":["738:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"738:7:13"},"nodeType":"ModifierInvocation","src":"738:21:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3027,"mutability":"mutable","name":"initialOwner","nameLocation":"582:12:13","nodeType":"VariableDeclaration","scope":3052,"src":"574:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"574:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3029,"mutability":"mutable","name":"_poapName","nameLocation":"618:9:13","nodeType":"VariableDeclaration","scope":3052,"src":"604:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3028,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3031,"mutability":"mutable","name":"_poapShortName","nameLocation":"651:14:13","nodeType":"VariableDeclaration","scope":3052,"src":"637:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3030,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3033,"mutability":"mutable","name":"_poapURL","nameLocation":"689:8:13","nodeType":"VariableDeclaration","scope":3052,"src":"675:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3032,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"564:139:13"},"returnParameters":{"id":3042,"nodeType":"ParameterList","parameters":[],"src":"760:0:13"},"scope":3276,"src":"553:272:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[489],"body":{"id":3060,"nodeType":"Block","src":"898:31:13","statements":[{"expression":{"id":3058,"name":"poapURL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"915:7:13","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3057,"id":3059,"nodeType":"Return","src":"908:14:13"}]},"id":3061,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"840:8:13","nodeType":"FunctionDefinition","overrides":{"id":3054,"nodeType":"OverrideSpecifier","overrides":[],"src":"865:8:13"},"parameters":{"id":3053,"nodeType":"ParameterList","parameters":[],"src":"848:2:13"},"returnParameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3061,"src":"883:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3055,"name":"string","nodeType":"ElementaryTypeName","src":"883:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"882:15:13"},"scope":3276,"src":"831:98:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3071,"nodeType":"Block","src":"1036:47:13","statements":[{"expression":{"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3066,"name":"signUpEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"1046:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1062:14:13","subExpression":{"id":3067,"name":"signUpEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"1063:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1046:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3070,"nodeType":"ExpressionStatement","src":"1046:30:13"}]},"functionSelector":"9b4f7b20","id":3072,"implemented":true,"kind":"function","modifiers":[{"id":3064,"kind":"modifierInvocation","modifierName":{"id":3063,"name":"onlyOwner","nameLocations":["1026:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1026:9:13"},"nodeType":"ModifierInvocation","src":"1026:9:13"}],"name":"toggleSignUp","nameLocation":"1004:12:13","nodeType":"FunctionDefinition","parameters":{"id":3062,"nodeType":"ParameterList","parameters":[],"src":"1016:2:13"},"returnParameters":{"id":3065,"nodeType":"ParameterList","parameters":[],"src":"1036:0:13"},"scope":3276,"src":"995:88:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3099,"nodeType":"Block","src":"1153:218:13","statements":[{"expression":{"arguments":[{"id":3076,"name":"signUpEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3017,"src":"1171:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5369676e2d757073206172652063757272656e746c792064697361626c65642e","id":3077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1186:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f","typeString":"literal_string \"Sign-ups are currently disabled.\""},"value":"Sign-ups are currently disabled."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f","typeString":"literal_string \"Sign-ups are currently disabled.\""}],"id":3075,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1163:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1163:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3079,"nodeType":"ExpressionStatement","src":"1163:58:13"},{"expression":{"arguments":[{"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1239:25:13","subExpression":{"baseExpression":{"id":3081,"name":"signUpWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"1240:12:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3084,"indexExpression":{"expression":{"id":3082,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1253:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1257:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1253:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1240:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f75206861766520616c7265616479207369676e65642075702e","id":3086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1266:29:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931","typeString":"literal_string \"You have already signed up.\""},"value":"You have already signed up."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931","typeString":"literal_string \"You have already signed up.\""}],"id":3080,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1231:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1231:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3088,"nodeType":"ExpressionStatement","src":"1231:65:13"},{"expression":{"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3089,"name":"signUpWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"1306:12:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3092,"indexExpression":{"expression":{"id":3090,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1319:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1319:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1306:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1333:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1306:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3095,"nodeType":"ExpressionStatement","src":"1306:31:13"},{"expression":{"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1347:17:13","subExpression":{"id":3096,"name":"volunteerSignUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"1347:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3098,"nodeType":"ExpressionStatement","src":"1347:17:13"}]},"functionSelector":"bf96ae63","id":3100,"implemented":true,"kind":"function","modifiers":[],"name":"signUp","nameLocation":"1137:6:13","nodeType":"FunctionDefinition","parameters":{"id":3073,"nodeType":"ParameterList","parameters":[],"src":"1143:2:13"},"returnParameters":{"id":3074,"nodeType":"ParameterList","parameters":[],"src":"1153:0:13"},"scope":3276,"src":"1128:243:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3151,"nodeType":"Block","src":"1424:309:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3108,"name":"signUpWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"1442:12:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3110,"indexExpression":{"id":3109,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"1455:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1442:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4164647265737320686173206e6f74207369676e65642075702e","id":3111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1460:28:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8","typeString":"literal_string \"Address has not signed up.\""},"value":"Address has not signed up."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8","typeString":"literal_string \"Address has not signed up.\""}],"id":3107,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1434:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1434:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3113,"nodeType":"ExpressionStatement","src":"1434:55:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3116,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"1517:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3115,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1507:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1507:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1524:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1507:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4164647265737320616c7265616479206f776e73206120504f4150","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1527:29:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb","typeString":"literal_string \"Address already owns a POAP\""},"value":"Address already owns a POAP"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb","typeString":"literal_string \"Address already owns a POAP\""}],"id":3114,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1499:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1499:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3122,"nodeType":"ExpressionStatement","src":"1499:58:13"},{"assignments":[3124],"declarations":[{"constant":false,"id":3124,"mutability":"mutable","name":"tokenId","nameLocation":"1575:7:13","nodeType":"VariableDeclaration","scope":3151,"src":"1567:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3123,"name":"uint256","nodeType":"ElementaryTypeName","src":"1567:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3127,"initialValue":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1585:14:13","subExpression":{"id":3125,"name":"_nextTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"1585:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1567:32:13"},{"expression":{"arguments":[{"id":3129,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"1619:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3130,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"1623:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3128,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[915,941],"referencedDeclaration":915,"src":"1609:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1609:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3132,"nodeType":"ExpressionStatement","src":"1609:22:13"},{"expression":{"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1641:13:13","subExpression":{"id":3133,"name":"tokenSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3010,"src":"1641:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3135,"nodeType":"ExpressionStatement","src":"1641:13:13"},{"expression":{"arguments":[{"id":3139,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"1677:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3136,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"1664:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1672:4:13","memberName":"push","nodeType":"MemberAccess","src":"1664:12:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":3140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1664:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3141,"nodeType":"ExpressionStatement","src":"1664:16:13"},{"expression":{"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3142,"name":"holderIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"1690:11:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3144,"indexExpression":{"id":3143,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3102,"src":"1702:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1690:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3145,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"1708:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1716:6:13","memberName":"length","nodeType":"MemberAccess","src":"1708:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1725:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1708:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1690:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3150,"nodeType":"ExpressionStatement","src":"1690:36:13"}]},"functionSelector":"40d097c3","id":3152,"implemented":true,"kind":"function","modifiers":[{"id":3105,"kind":"modifierInvocation","modifierName":{"id":3104,"name":"onlyOwner","nameLocations":["1414:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":58,"src":"1414:9:13"},"nodeType":"ModifierInvocation","src":"1414:9:13"}],"name":"safeMint","nameLocation":"1386:8:13","nodeType":"FunctionDefinition","parameters":{"id":3103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3102,"mutability":"mutable","name":"to","nameLocation":"1403:2:13","nodeType":"VariableDeclaration","scope":3152,"src":"1395:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3101,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1394:12:13"},"returnParameters":{"id":3106,"nodeType":"ParameterList","parameters":[],"src":"1424:0:13"},"scope":3276,"src":"1377:356:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[601],"body":{"id":3222,"nodeType":"Block","src":"1820:488:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3163,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"1838:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1852:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1844:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3164,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:13","typeDescriptions":{}}},"id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1844:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1838:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207472616e7366657220746f2061207a65726f2061646472657373","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1856:35:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79","typeString":"literal_string \"Cannot transfer to a zero address\""},"value":"Cannot transfer to a zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79","typeString":"literal_string \"Cannot transfer to a zero address\""}],"id":3162,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1830:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1830:62:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3171,"nodeType":"ExpressionStatement","src":"1830:62:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3174,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"1920:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3173,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1910:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1927:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1910:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"526563697069656e7420616c7265616479206f776e73206120504f4150","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1930:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad","typeString":"literal_string \"Recipient already owns a POAP\""},"value":"Recipient already owns a POAP"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad","typeString":"literal_string \"Recipient already owns a POAP\""}],"id":3172,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1902:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1902:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3180,"nodeType":"ExpressionStatement","src":"1902:60:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3182,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2022:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3181,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"2012:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2012:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":3184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2031:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2012:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3191,"nodeType":"IfStatement","src":"2008:70:13","trueBody":{"id":3190,"nodeType":"Block","src":"2034:44:13","statements":[{"expression":{"arguments":[{"id":3187,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2062:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3186,"name":"_removeHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"2048:13:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3189,"nodeType":"ExpressionStatement","src":"2048:19:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3193,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"2102:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3192,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"2092:9:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2109:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2092:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3213,"nodeType":"IfStatement","src":"2088:115:13","trueBody":{"id":3212,"nodeType":"Block","src":"2112:91:13","statements":[{"expression":{"arguments":[{"id":3200,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"2139:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3197,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2126:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2134:4:13","memberName":"push","nodeType":"MemberAccess","src":"2126:12:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2126:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3202,"nodeType":"ExpressionStatement","src":"2126:16:13"},{"expression":{"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3203,"name":"holderIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"2156:11:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3205,"indexExpression":{"id":3204,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"2168:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2156:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3206,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2174:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2182:6:13","memberName":"length","nodeType":"MemberAccess","src":"2174:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2191:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2174:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2156:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3211,"nodeType":"ExpressionStatement","src":"2156:36:13"}]}},{"expression":{"arguments":[{"id":3217,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"2283:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3218,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"2289:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3219,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"2293:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3214,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2264:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Poap_$3276_$","typeString":"type(contract super Poap)"}},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2270:12:13","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":601,"src":"2264:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2264:37:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3221,"nodeType":"ExpressionStatement","src":"2264:37:13"}]},"functionSelector":"23b872dd","id":3223,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1748:12:13","nodeType":"FunctionDefinition","overrides":{"id":3160,"nodeType":"OverrideSpecifier","overrides":[],"src":"1811:8:13"},"parameters":{"id":3159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3154,"mutability":"mutable","name":"from","nameLocation":"1769:4:13","nodeType":"VariableDeclaration","scope":3223,"src":"1761:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3153,"name":"address","nodeType":"ElementaryTypeName","src":"1761:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3156,"mutability":"mutable","name":"to","nameLocation":"1783:2:13","nodeType":"VariableDeclaration","scope":3223,"src":"1775:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3155,"name":"address","nodeType":"ElementaryTypeName","src":"1775:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3158,"mutability":"mutable","name":"tokenId","nameLocation":"1795:7:13","nodeType":"VariableDeclaration","scope":3223,"src":"1787:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3157,"name":"uint256","nodeType":"ElementaryTypeName","src":"1787:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1760:43:13"},"returnParameters":{"id":3161,"nodeType":"ParameterList","parameters":[],"src":"1820:0:13"},"scope":3276,"src":"1739:569:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3265,"nodeType":"Block","src":"2361:420:13","statements":[{"assignments":[3229],"declarations":[{"constant":false,"id":3229,"mutability":"mutable","name":"index","nameLocation":"2379:5:13","nodeType":"VariableDeclaration","scope":3265,"src":"2371:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3228,"name":"uint256","nodeType":"ElementaryTypeName","src":"2371:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3233,"initialValue":{"baseExpression":{"id":3230,"name":"holderIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"2387:11:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3232,"indexExpression":{"id":3231,"name":"holder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3225,"src":"2399:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2387:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2371:35:13"},{"assignments":[3235],"declarations":[{"constant":false,"id":3235,"mutability":"mutable","name":"lastHolder","nameLocation":"2424:10:13","nodeType":"VariableDeclaration","scope":3265,"src":"2416:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3234,"name":"address","nodeType":"ElementaryTypeName","src":"2416:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3242,"initialValue":{"baseExpression":{"id":3236,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2437:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3241,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3237,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2445:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2453:6:13","memberName":"length","nodeType":"MemberAccess","src":"2445:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2462:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2445:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2437:27:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2416:48:13"},{"expression":{"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3243,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2483:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3245,"indexExpression":{"id":3244,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"2491:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2483:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3246,"name":"lastHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"2500:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2483:27:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3248,"nodeType":"ExpressionStatement","src":"2483:27:13"},{"expression":{"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3249,"name":"holderIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"2571:11:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3251,"indexExpression":{"id":3250,"name":"lastHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"2583:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2571:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3252,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"2597:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2571:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3254,"nodeType":"ExpressionStatement","src":"2571:31:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3255,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2648:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2656:3:13","memberName":"pop","nodeType":"MemberAccess","src":"2648:11:13","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer)"}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2648:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3259,"nodeType":"ExpressionStatement","src":"2648:13:13"},{"expression":{"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2697:26:13","subExpression":{"baseExpression":{"id":3260,"name":"holderIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3025,"src":"2704:11:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3262,"indexExpression":{"id":3261,"name":"holder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3225,"src":"2716:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2704:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3264,"nodeType":"ExpressionStatement","src":"2697:26:13"}]},"id":3266,"implemented":true,"kind":"function","modifiers":[],"name":"_removeHolder","nameLocation":"2323:13:13","nodeType":"FunctionDefinition","parameters":{"id":3226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3225,"mutability":"mutable","name":"holder","nameLocation":"2345:6:13","nodeType":"VariableDeclaration","scope":3266,"src":"2337:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3224,"name":"address","nodeType":"ElementaryTypeName","src":"2337:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2336:16:13"},"returnParameters":{"id":3227,"nodeType":"ParameterList","parameters":[],"src":"2361:0:13"},"scope":3276,"src":"2314:467:13","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3274,"nodeType":"Block","src":"2847:31:13","statements":[{"expression":{"id":3272,"name":"holders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3015,"src":"2864:7:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"functionReturnParameters":3271,"id":3273,"nodeType":"Return","src":"2857:14:13"}]},"functionSelector":"5fe8e7cc","id":3275,"implemented":true,"kind":"function","modifiers":[],"name":"getHolders","nameLocation":"2795:10:13","nodeType":"FunctionDefinition","parameters":{"id":3267,"nodeType":"ParameterList","parameters":[],"src":"2805:2:13"},"returnParameters":{"id":3271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3275,"src":"2829:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3268,"name":"address","nodeType":"ElementaryTypeName","src":"2829:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3269,"nodeType":"ArrayTypeName","src":"2829:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2828:18:13"},"scope":3276,"src":"2786:92:13","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3277,"src":"218:2664:13","usedErrors":[13,18,195,200,209,214,219,226,231,236],"usedEvents":[24,1309,1318,1327]}],"src":"81:2802:13"},"id":13}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":317,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":319,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":323,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":327,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":331,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":337,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff1e058765945b0f4a0353413b93a8f53e5e0d240c40116d57cd087b472bbe4264736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0x1E SDIV DUP8 PUSH6 0x945B0F4A0353 COINBASE EXTCODESIZE SWAP4 0xA8 CREATE2 RETURNDATACOPY MCOPY 0xD 0x24 0xC BLOCKHASH GT PUSH14 0x57CD087B472BBE4264736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"251:2847:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff1e058765945b0f4a0353413b93a8f53e5e0d240c40116d57cd087b472bbe4264736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0x1E SDIV DUP8 PUSH6 0x945B0F4A0353 COINBASE EXTCODESIZE SWAP4 0xA8 CREATE2 RETURNDATACOPY MCOPY 0xD 0x24 0xC BLOCKHASH GT PUSH14 0x57CD087B472BBE4264736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"251:2847:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083904c22ff58551053b2d1165d14421e22451b994007ff32f007f9ab66f7ffb964736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 SWAP1 0x4C 0x22 SELFDESTRUCT PC SSTORE LT MSTORE8 0xB2 0xD1 AND TSTORE EQ TIMESTAMP 0x1E 0x22 GASLIMIT SHL SWAP10 BLOCKHASH SMOD SELFDESTRUCT ORIGIN CREATE SMOD 0xF9 0xAB PUSH7 0xF7FFB964736F6C PUSH4 0x43000818 STOP CALLER ","sourceMap":"203:14914:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122083904c22ff58551053b2d1165d14421e22451b994007ff32f007f9ab66f7ffb964736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 SWAP1 0x4C 0x22 SELFDESTRUCT PC SSTORE LT MSTORE8 0xB2 0xD1 AND TSTORE EQ TIMESTAMP 0x1E 0x22 GASLIMIT SHL SWAP10 BLOCKHASH SMOD SELFDESTRUCT ORIGIN CREATE SMOD 0xF9 0xAB PUSH7 0xF7FFB964736F6C PUSH4 0x43000818 STOP CALLER ","sourceMap":"203:14914:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220382a5543c9235e574f11d0c034a9aac0dd301c8091120a6198ca75c96f85459864736f6c63430008180033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0x2A SSTORE NUMBER 0xC9 0x23 MCOPY JUMPI 0x4F GT 0xD0 0xC0 CALLVALUE 0xA9 0xAA 0xC0 0xDD ADDRESS SHR DUP1 SWAP2 SLT EXP PUSH2 0x98CA PUSH22 0xC96F85459864736F6C63430008180033000000000000 ","sourceMap":"216:1047:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220382a5543c9235e574f11d0c034a9aac0dd301c8091120a6198ca75c96f85459864736f6c63430008180033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0x2A SSTORE NUMBER 0xC9 0x23 MCOPY JUMPI 0x4F GT 0xD0 0xC0 CALLVALUE 0xA9 0xAA 0xC0 0xDD ADDRESS SHR DUP1 SWAP2 SLT EXP PUSH2 0x98CA PUSH22 0xC96F85459864736F6C63430008180033000000000000 ","sourceMap":"216:1047:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Factory.sol":{"Factory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractDeployed","type":"event"},{"inputs":[{"internalType":"address","name":"_initialOwner","type":"address"},{"internalType":"string","name":"_poapName","type":"string"},{"internalType":"string","name":"_poapShortName","type":"string"},{"internalType":"string","name":"_poapURL","type":"string"}],"name":"deployPOAP","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"deployedPOAPs","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeployedContracts","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50613efc806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000455760003560e01c8062a48f58146200004a5780638a9d179e146200006a578063aa9a068f14620000a0575b600080fd5b6200006860048036038101906200006291906200046b565b620000c2565b005b62000088600480360381019062000082919062000575565b620001b2565b604051620000979190620005b8565b60405180910390f35b620000aa620001f2565b604051620000b99190620006a3565b60405180910390f35b600084848484604051620000d69062000282565b620000e5949392919062000750565b604051809103906000f08015801562000102573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f8ffcdc15a283d706d38281f500270d8b5a656918f555de0913d7455e3e6bc1bf60405160405180910390a25050505050565b60008181548110620001c357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200027857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200022d575b5050505050905090565b61371480620007b383390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002d182620002a4565b9050919050565b620002e381620002c4565b8114620002ef57600080fd5b50565b6000813590506200030381620002d8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200035e8262000313565b810181811067ffffffffffffffff8211171562000380576200037f62000324565b5b80604052505050565b60006200039562000290565b9050620003a3828262000353565b919050565b600067ffffffffffffffff821115620003c657620003c562000324565b5b620003d18262000313565b9050602081019050919050565b82818337600083830152505050565b600062000404620003fe84620003a8565b62000389565b9050828152602081018484840111156200042357620004226200030e565b5b62000430848285620003de565b509392505050565b600082601f83011262000450576200044f62000309565b5b813562000462848260208601620003ed565b91505092915050565b600080600080608085870312156200048857620004876200029a565b5b60006200049887828801620002f2565b945050602085013567ffffffffffffffff811115620004bc57620004bb6200029f565b5b620004ca8782880162000438565b935050604085013567ffffffffffffffff811115620004ee57620004ed6200029f565b5b620004fc8782880162000438565b925050606085013567ffffffffffffffff81111562000520576200051f6200029f565b5b6200052e8782880162000438565b91505092959194509250565b6000819050919050565b6200054f816200053a565b81146200055b57600080fd5b50565b6000813590506200056f8162000544565b92915050565b6000602082840312156200058e576200058d6200029a565b5b60006200059e848285016200055e565b91505092915050565b620005b281620002c4565b82525050565b6000602082019050620005cf6000830184620005a7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200060c81620002c4565b82525050565b600062000620838362000601565b60208301905092915050565b6000602082019050919050565b60006200064682620005d5565b620006528185620005e0565b93506200065f83620005f1565b8060005b83811015620006965781516200067a888262000612565b975062000687836200062c565b92505060018101905062000663565b5085935050505092915050565b60006020820190508181036000830152620006bf818462000639565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000703578082015181840152602081019050620006e6565b60008484015250505050565b60006200071c82620006c7565b620007288185620006d2565b93506200073a818560208601620006e3565b620007458162000313565b840191505092915050565b6000608082019050620007676000830187620005a7565b81810360208301526200077b81866200070f565b905081810360408301526200079181856200070f565b90508181036060830152620007a781846200070f565b90509594505050505056fe60806040523480156200001157600080fd5b5060405162003714380380620037148339818101604052810190620000379190620003dc565b83838381600090816200004b9190620006f6565b5080600190816200005d9190620006f6565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000cc9190620007ee565b60405180910390fd5b620000e6816200011e60201b60201c565b508060089081620000f89190620006f6565b506001600c60006101000a81548160ff021916908315150217905550505050506200080b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022582620001f8565b9050919050565b620002378162000218565b81146200024357600080fd5b50565b60008151905062000257816200022c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b28262000267565b810181811067ffffffffffffffff82111715620002d457620002d362000278565b5b80604052505050565b6000620002e9620001e4565b9050620002f78282620002a7565b919050565b600067ffffffffffffffff8211156200031a576200031962000278565b5b620003258262000267565b9050602081019050919050565b60005b838110156200035257808201518184015260208101905062000335565b60008484015250505050565b6000620003756200036f84620002fc565b620002dd565b90508281526020810184848401111562000394576200039362000262565b5b620003a184828562000332565b509392505050565b600082601f830112620003c157620003c06200025d565b5b8151620003d38482602086016200035e565b91505092915050565b60008060008060808587031215620003f957620003f8620001ee565b5b6000620004098782880162000246565b945050602085015167ffffffffffffffff8111156200042d576200042c620001f3565b5b6200043b87828801620003a9565b935050604085015167ffffffffffffffff8111156200045f576200045e620001f3565b5b6200046d87828801620003a9565b925050606085015167ffffffffffffffff811115620004915762000490620001f3565b5b6200049f87828801620003a9565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004fe57607f821691505b602082108103620005145762000513620004b6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200057e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200053f565b6200058a86836200053f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005d7620005d1620005cb84620005a2565b620005ac565b620005a2565b9050919050565b6000819050919050565b620005f383620005b6565b6200060b6200060282620005de565b8484546200054c565b825550505050565b600090565b6200062262000613565b6200062f818484620005e8565b505050565b5b8181101562000657576200064b60008262000618565b60018101905062000635565b5050565b601f821115620006a65762000670816200051a565b6200067b846200052f565b810160208510156200068b578190505b620006a36200069a856200052f565b83018262000634565b50505b505050565b600082821c905092915050565b6000620006cb60001984600802620006ab565b1980831691505092915050565b6000620006e68383620006b8565b9150826002028217905092915050565b6200070182620004ab565b67ffffffffffffffff8111156200071d576200071c62000278565b5b620007298254620004e5565b620007368282856200065b565b600060209050601f8311600181146200076e576000841562000759578287015190505b620007658582620006d8565b865550620007d5565b601f1984166200077e866200051a565b60005b82811015620007a85784890151825560018201915060208501945060208101905062000781565b86831015620007c85784890151620007c4601f891682620006b8565b8355505b6001600288020188555050505b505050505050565b620007e88162000218565b82525050565b6000602082019050620008056000830184620007dd565b92915050565b612ef9806200081b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de5780639b4f7b2011610097578063bf96ae6311610071578063bf96ae6314610414578063c87b56dd1461041e578063e985e9c51461044e578063f2fde38b1461047e57610173565b80639b4f7b20146103d2578063a22cb465146103dc578063b88d4fde146103f857610173565b806370a0823114610320578063715018a6146103505780637824407f1461035a5780638af05318146103785780638da5cb5b1461039657806395d89b41146103b457610173565b806330bee0f11161013057806330bee0f11461025e57806340d097c31461027c57806342842e0e1461029857806354a18d57146102b45780635fe8e7cc146102d25780636352211e146102f057610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f657806323b872dd146102125780632a11ced01461022e575b600080fd5b610192600480360381019061018d91906122ac565b61049a565b60405161019f91906122f4565b60405180910390f35b6101b061057c565b6040516101bd919061239f565b60405180910390f35b6101e060048036038101906101db91906123f7565b61060e565b6040516101ed9190612465565b60405180910390f35b610210600480360381019061020b91906124ac565b61062a565b005b61022c600480360381019061022791906124ec565b610640565b005b610248600480360381019061024391906123f7565b6107ed565b6040516102559190612465565b60405180910390f35b61026661082c565b60405161027391906122f4565b60405180910390f35b6102966004803603810190610291919061253f565b61083f565b005b6102b260048036038101906102ad91906124ec565b610a17565b005b6102bc610a37565b6040516102c9919061239f565b60405180910390f35b6102da610ac5565b6040516102e7919061262a565b60405180910390f35b61030a600480360381019061030591906123f7565b610b53565b6040516103179190612465565b60405180910390f35b61033a6004803603810190610335919061253f565b610b65565b604051610347919061265b565b60405180910390f35b610358610c1f565b005b610362610c33565b60405161036f919061265b565b60405180910390f35b610380610c39565b60405161038d919061265b565b60405180910390f35b61039e610c3f565b6040516103ab9190612465565b60405180910390f35b6103bc610c69565b6040516103c9919061239f565b60405180910390f35b6103da610cfb565b005b6103f660048036038101906103f191906126a2565b610d2f565b005b610412600480360381019061040d9190612817565b610d45565b005b61041c610d62565b005b610438600480360381019061043391906123f7565b610eb0565b604051610445919061239f565b60405180910390f35b6104686004803603810190610463919061289a565b610f19565b60405161047591906122f4565b60405180910390f35b6104986004803603810190610493919061253f565b610fad565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610575575061057482611033565b5b9050919050565b60606000805461058b90612909565b80601f01602080910402602001604051908101604052809291908181526020018280546105b790612909565b80156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b5050505050905090565b60006106198261109d565b5061062382611125565b9050919050565b61063c8282610637611162565b61116a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906129ac565b60405180910390fd5b60006106ba83610b65565b146106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190612a18565b60405180910390fd5b600161070584610b65565b03610714576107138361117c565b5b600061071f83610b65565b036107dd57600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506107999190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6107e8838383611344565b505050565b600b81815481106107fd57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900460ff1681565b610847611446565b600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ca90612ae7565b60405180910390fd5b60006108de82610b65565b1461091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590612b53565b60405180910390fd5b60006007600081548092919061093390612b73565b91905055905061094382826114cd565b6009600081548092919061095690612b73565b9190505550600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506109d09190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610a3283838360405180602001604052806000815250610d45565b505050565b60088054610a4490612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7090612909565b8015610abd5780601f10610a9257610100808354040283529160200191610abd565b820191906000526020600020905b815481529060010190602001808311610aa057829003601f168201915b505050505081565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b4957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aff575b5050505050905090565b6000610b5e8261109d565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bd85760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610bcf9190612465565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c27611446565b610c3160006114eb565b565b60095481565b600a5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610c7890612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490612909565b8015610cf15780601f10610cc657610100808354040283529160200191610cf1565b820191906000526020600020905b815481529060010190602001808311610cd457829003601f168201915b5050505050905090565b610d03611446565b600c60009054906101000a900460ff1615600c60006101000a81548160ff021916908315150217905550565b610d41610d3a611162565b83836115b1565b5050565b610d50848484610640565b610d5c84848484611720565b50505050565b600c60009054906101000a900460ff16610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da890612c07565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3590612c73565b60405180910390fd5b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600a6000815480929190610ea990612b73565b9190505550565b6060610ebb8261109d565b506000610ec66118d7565b90506000815111610ee65760405180602001604052806000815250610f11565b80610ef084611969565b604051602001610f01929190612ccf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610fb5611446565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110275760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161101e9190612465565b60405180910390fd5b611030816114eb565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806110a983611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111c57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611113919061265b565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6111778383836001611a74565b505050565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b6001600b805490506111d69190612a67565b815481106111e7576111e6612cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600b838154811061122957611228612cf3565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b8054806112c7576112c6612d22565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113b65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113ad9190612465565b60405180910390fd5b60006113ca83836113c5611162565b611c39565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611440578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161143793929190612d51565b60405180910390fd5b50505050565b61144e611162565b73ffffffffffffffffffffffffffffffffffffffff1661146c610c3f565b73ffffffffffffffffffffffffffffffffffffffff16146114cb5761148f611162565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114c29190612465565b60405180910390fd5b565b6114e7828260405180602001604052806000815250611e53565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162257816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016116199190612465565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171391906122f4565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156118d1578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611764611162565b8685856040518563ffffffff1660e01b81526004016117869493929190612ddd565b6020604051808303816000875af19250505080156117c257506040513d601f19601f820116820180604052508101906117bf9190612e3e565b60015b611846573d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50600081510361183e57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118359190612465565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146118cf57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118c69190612465565b60405180910390fd5b505b50505050565b6060600880546118e690612909565b80601f016020809104026020016040519081016040528092919081815260200182805461191290612909565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b5050505050905090565b60606000600161197884611e6f565b01905060008167ffffffffffffffff811115611997576119966126ec565b5b6040519080825280601f01601f1916602001820160405280156119c95781602001600182028036833780820191505090505b509050600082602001820190505b600115611a2c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a2057611a1f612e6b565b5b049450600085036119d7575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611aad5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611be1576000611abd8461109d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b2857508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611b3b5750611b398184610f19565b155b15611b7d57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611b749190612465565b60405180910390fd5b8115611bdf57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600080611c4584611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c8757611c86818486611fc2565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d1857611cc9600085600080611a74565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611d9b576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b611e5d8383612086565b611e6a6000848484611720565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ecd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ec357611ec2612e6b565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f0a576d04ee2d6d415b85acef81000000008381611f0057611eff612e6b565b5b0492506020810190505b662386f26fc100008310611f3957662386f26fc100008381611f2f57611f2e612e6b565b5b0492506010810190505b6305f5e1008310611f62576305f5e1008381611f5857611f57612e6b565b5b0492506008810190505b6127108310611f87576127108381611f7d57611f7c612e6b565b5b0492506004810190505b60648310611faa5760648381611fa057611f9f612e6b565b5b0492506002810190505b600a8310611fb9576001810190505b80915050919050565b611fcd83838361217f565b61208157600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361204257806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612039919061265b565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612078929190612e9a565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120f85760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016120ef9190612465565b60405180910390fd5b600061210683836000611c39565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461217a5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016121719190612465565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561223757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806121f857506121f78484610f19565b5b8061223657508273ffffffffffffffffffffffffffffffffffffffff1661221e83611125565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61228981612254565b811461229457600080fd5b50565b6000813590506122a681612280565b92915050565b6000602082840312156122c2576122c161224a565b5b60006122d084828501612297565b91505092915050565b60008115159050919050565b6122ee816122d9565b82525050565b600060208201905061230960008301846122e5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561234957808201518184015260208101905061232e565b60008484015250505050565b6000601f19601f8301169050919050565b60006123718261230f565b61237b818561231a565b935061238b81856020860161232b565b61239481612355565b840191505092915050565b600060208201905081810360008301526123b98184612366565b905092915050565b6000819050919050565b6123d4816123c1565b81146123df57600080fd5b50565b6000813590506123f1816123cb565b92915050565b60006020828403121561240d5761240c61224a565b5b600061241b848285016123e2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244f82612424565b9050919050565b61245f81612444565b82525050565b600060208201905061247a6000830184612456565b92915050565b61248981612444565b811461249457600080fd5b50565b6000813590506124a681612480565b92915050565b600080604083850312156124c3576124c261224a565b5b60006124d185828601612497565b92505060206124e2858286016123e2565b9150509250929050565b6000806000606084860312156125055761250461224a565b5b600061251386828701612497565b935050602061252486828701612497565b9250506040612535868287016123e2565b9150509250925092565b6000602082840312156125555761255461224a565b5b600061256384828501612497565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125a181612444565b82525050565b60006125b38383612598565b60208301905092915050565b6000602082019050919050565b60006125d78261256c565b6125e18185612577565b93506125ec83612588565b8060005b8381101561261d57815161260488826125a7565b975061260f836125bf565b9250506001810190506125f0565b5085935050505092915050565b6000602082019050818103600083015261264481846125cc565b905092915050565b612655816123c1565b82525050565b6000602082019050612670600083018461264c565b92915050565b61267f816122d9565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b600080604083850312156126b9576126b861224a565b5b60006126c785828601612497565b92505060206126d88582860161268d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61272482612355565b810181811067ffffffffffffffff82111715612743576127426126ec565b5b80604052505050565b6000612756612240565b9050612762828261271b565b919050565b600067ffffffffffffffff821115612782576127816126ec565b5b61278b82612355565b9050602081019050919050565b82818337600083830152505050565b60006127ba6127b584612767565b61274c565b9050828152602081018484840111156127d6576127d56126e7565b5b6127e1848285612798565b509392505050565b600082601f8301126127fe576127fd6126e2565b5b813561280e8482602086016127a7565b91505092915050565b600080600080608085870312156128315761283061224a565b5b600061283f87828801612497565b945050602061285087828801612497565b9350506040612861878288016123e2565b925050606085013567ffffffffffffffff8111156128825761288161224f565b5b61288e878288016127e9565b91505092959194509250565b600080604083850312156128b1576128b061224a565b5b60006128bf85828601612497565b92505060206128d085828601612497565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061292157607f821691505b602082108103612934576129336128da565b5b50919050565b7f43616e6e6f74207472616e7366657220746f2061207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061299660218361231a565b91506129a18261293a565b604082019050919050565b600060208201905081810360008301526129c581612989565b9050919050565b7f526563697069656e7420616c7265616479206f776e73206120504f4150000000600082015250565b6000612a02601d8361231a565b9150612a0d826129cc565b602082019050919050565b60006020820190508181036000830152612a31816129f5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a72826123c1565b9150612a7d836123c1565b9250828203905081811115612a9557612a94612a38565b5b92915050565b7f4164647265737320686173206e6f74207369676e65642075702e000000000000600082015250565b6000612ad1601a8361231a565b9150612adc82612a9b565b602082019050919050565b60006020820190508181036000830152612b0081612ac4565b9050919050565b7f4164647265737320616c7265616479206f776e73206120504f41500000000000600082015250565b6000612b3d601b8361231a565b9150612b4882612b07565b602082019050919050565b60006020820190508181036000830152612b6c81612b30565b9050919050565b6000612b7e826123c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bb057612baf612a38565b5b600182019050919050565b7f5369676e2d757073206172652063757272656e746c792064697361626c65642e600082015250565b6000612bf160208361231a565b9150612bfc82612bbb565b602082019050919050565b60006020820190508181036000830152612c2081612be4565b9050919050565b7f596f75206861766520616c7265616479207369676e65642075702e0000000000600082015250565b6000612c5d601b8361231a565b9150612c6882612c27565b602082019050919050565b60006020820190508181036000830152612c8c81612c50565b9050919050565b600081905092915050565b6000612ca98261230f565b612cb38185612c93565b9350612cc381856020860161232b565b80840191505092915050565b6000612cdb8285612c9e565b9150612ce78284612c9e565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000606082019050612d666000830186612456565b612d73602083018561264c565b612d806040830184612456565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000612daf82612d88565b612db98185612d93565b9350612dc981856020860161232b565b612dd281612355565b840191505092915050565b6000608082019050612df26000830187612456565b612dff6020830186612456565b612e0c604083018561264c565b8181036060830152612e1e8184612da4565b905095945050505050565b600081519050612e3881612280565b92915050565b600060208284031215612e5457612e5361224a565b5b6000612e6284828501612e29565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000604082019050612eaf6000830185612456565b612ebc602083018461264c565b939250505056fea26469706673582212206dd576b79bb2ce0b45bc0be17068c095cc92612d30c302fb67e1b387076e2d8e64736f6c63430008180033a2646970667358221220fe5c5f8067ce9cc16a08ef78c12316a16d6dc58aea06c79dbaf00dfd29bd75de64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EFC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x45 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xA48F58 EQ PUSH3 0x4A JUMPI DUP1 PUSH4 0x8A9D179E EQ PUSH3 0x6A JUMPI DUP1 PUSH4 0xAA9A068F EQ PUSH3 0xA0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x68 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x62 SWAP2 SWAP1 PUSH3 0x46B JUMP JUMPDEST PUSH3 0xC2 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x82 SWAP2 SWAP1 PUSH3 0x575 JUMP JUMPDEST PUSH3 0x1B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x97 SWAP2 SWAP1 PUSH3 0x5B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xAA PUSH3 0x1F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xB9 SWAP2 SWAP1 PUSH3 0x6A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0xD6 SWAP1 PUSH3 0x282 JUMP JUMPDEST PUSH3 0xE5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x750 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x102 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8FFCDC15A283D706D38281F500270D8B5A656918F555DE0913D7455E3E6BC1BF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x278 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH3 0x22D JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3714 DUP1 PUSH3 0x7B3 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D1 DUP3 PUSH3 0x2A4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2E3 DUP2 PUSH3 0x2C4 JUMP JUMPDEST DUP2 EQ PUSH3 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x303 DUP2 PUSH3 0x2D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x35E DUP3 PUSH3 0x313 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x380 JUMPI PUSH3 0x37F PUSH3 0x324 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x395 PUSH3 0x290 JUMP JUMPDEST SWAP1 POP PUSH3 0x3A3 DUP3 DUP3 PUSH3 0x353 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x3C6 JUMPI PUSH3 0x3C5 PUSH3 0x324 JUMP JUMPDEST JUMPDEST PUSH3 0x3D1 DUP3 PUSH3 0x313 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x404 PUSH3 0x3FE DUP5 PUSH3 0x3A8 JUMP JUMPDEST PUSH3 0x389 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x423 JUMPI PUSH3 0x422 PUSH3 0x30E JUMP JUMPDEST JUMPDEST PUSH3 0x430 DUP5 DUP3 DUP6 PUSH3 0x3DE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x450 JUMPI PUSH3 0x44F PUSH3 0x309 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0x462 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x3ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x488 JUMPI PUSH3 0x487 PUSH3 0x29A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x498 DUP8 DUP3 DUP9 ADD PUSH3 0x2F2 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4BC JUMPI PUSH3 0x4BB PUSH3 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x4CA DUP8 DUP3 DUP9 ADD PUSH3 0x438 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4EE JUMPI PUSH3 0x4ED PUSH3 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x4FC DUP8 DUP3 DUP9 ADD PUSH3 0x438 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x520 JUMPI PUSH3 0x51F PUSH3 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x52E DUP8 DUP3 DUP9 ADD PUSH3 0x438 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x54F DUP2 PUSH3 0x53A JUMP JUMPDEST DUP2 EQ PUSH3 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x56F DUP2 PUSH3 0x544 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x58E JUMPI PUSH3 0x58D PUSH3 0x29A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x59E DUP5 DUP3 DUP6 ADD PUSH3 0x55E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x5B2 DUP2 PUSH3 0x2C4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x5CF PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x60C DUP2 PUSH3 0x2C4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x620 DUP4 DUP4 PUSH3 0x601 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x646 DUP3 PUSH3 0x5D5 JUMP JUMPDEST PUSH3 0x652 DUP2 DUP6 PUSH3 0x5E0 JUMP JUMPDEST SWAP4 POP PUSH3 0x65F DUP4 PUSH3 0x5F1 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x696 JUMPI DUP2 MLOAD PUSH3 0x67A DUP9 DUP3 PUSH3 0x612 JUMP JUMPDEST SWAP8 POP PUSH3 0x687 DUP4 PUSH3 0x62C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x663 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x6BF DUP2 DUP5 PUSH3 0x639 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x703 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x6E6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x71C DUP3 PUSH3 0x6C7 JUMP JUMPDEST PUSH3 0x728 DUP2 DUP6 PUSH3 0x6D2 JUMP JUMPDEST SWAP4 POP PUSH3 0x73A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x6E3 JUMP JUMPDEST PUSH3 0x745 DUP2 PUSH3 0x313 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH3 0x767 PUSH1 0x0 DUP4 ADD DUP8 PUSH3 0x5A7 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x77B DUP2 DUP7 PUSH3 0x70F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH3 0x791 DUP2 DUP6 PUSH3 0x70F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH3 0x7A7 DUP2 DUP5 PUSH3 0x70F JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3714 CODESIZE SUB DUP1 PUSH3 0x3714 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x3DC JUMP JUMPDEST DUP4 DUP4 DUP4 DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x4B SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0x5D SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xCC SWAP2 SWAP1 PUSH3 0x7EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xE6 DUP2 PUSH3 0x11E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP1 PUSH1 0x8 SWAP1 DUP2 PUSH3 0xF8 SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP PUSH3 0x80B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x225 DUP3 PUSH3 0x1F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x237 DUP2 PUSH3 0x218 JUMP JUMPDEST DUP2 EQ PUSH3 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x257 DUP2 PUSH3 0x22C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x2B2 DUP3 PUSH3 0x267 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x2D3 PUSH3 0x278 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2E9 PUSH3 0x1E4 JUMP JUMPDEST SWAP1 POP PUSH3 0x2F7 DUP3 DUP3 PUSH3 0x2A7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x31A JUMPI PUSH3 0x319 PUSH3 0x278 JUMP JUMPDEST JUMPDEST PUSH3 0x325 DUP3 PUSH3 0x267 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x352 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x335 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x375 PUSH3 0x36F DUP5 PUSH3 0x2FC JUMP JUMPDEST PUSH3 0x2DD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x394 JUMPI PUSH3 0x393 PUSH3 0x262 JUMP JUMPDEST JUMPDEST PUSH3 0x3A1 DUP5 DUP3 DUP6 PUSH3 0x332 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3C1 JUMPI PUSH3 0x3C0 PUSH3 0x25D JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x3D3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x35E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x3F9 JUMPI PUSH3 0x3F8 PUSH3 0x1EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x409 DUP8 DUP3 DUP9 ADD PUSH3 0x246 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x42D JUMPI PUSH3 0x42C PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x43B DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x45F JUMPI PUSH3 0x45E PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x46D DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x491 JUMPI PUSH3 0x490 PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x49F DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x4FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x514 JUMPI PUSH3 0x513 PUSH3 0x4B6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x57E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x53F JUMP JUMPDEST PUSH3 0x58A DUP7 DUP4 PUSH3 0x53F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5D7 PUSH3 0x5D1 PUSH3 0x5CB DUP5 PUSH3 0x5A2 JUMP JUMPDEST PUSH3 0x5AC JUMP JUMPDEST PUSH3 0x5A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x5F3 DUP4 PUSH3 0x5B6 JUMP JUMPDEST PUSH3 0x60B PUSH3 0x602 DUP3 PUSH3 0x5DE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x54C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x622 PUSH3 0x613 JUMP JUMPDEST PUSH3 0x62F DUP2 DUP5 DUP5 PUSH3 0x5E8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x657 JUMPI PUSH3 0x64B PUSH1 0x0 DUP3 PUSH3 0x618 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x635 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x6A6 JUMPI PUSH3 0x670 DUP2 PUSH3 0x51A JUMP JUMPDEST PUSH3 0x67B DUP5 PUSH3 0x52F JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x68B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x6A3 PUSH3 0x69A DUP6 PUSH3 0x52F JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x634 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6CB PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x6AB JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6E6 DUP4 DUP4 PUSH3 0x6B8 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x701 DUP3 PUSH3 0x4AB JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x71D JUMPI PUSH3 0x71C PUSH3 0x278 JUMP JUMPDEST JUMPDEST PUSH3 0x729 DUP3 SLOAD PUSH3 0x4E5 JUMP JUMPDEST PUSH3 0x736 DUP3 DUP3 DUP6 PUSH3 0x65B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x76E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x759 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x765 DUP6 DUP3 PUSH3 0x6D8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x7D5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x77E DUP7 PUSH3 0x51A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x7A8 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x781 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x7C8 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x7C4 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x6B8 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x7E8 DUP2 PUSH3 0x218 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x805 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x7DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2EF9 DUP1 PUSH3 0x81B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9B4F7B20 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xBF96AE63 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBF96AE63 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x47E JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x9B4F7B20 EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3F8 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x7824407F EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x8AF05318 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3B4 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x30BEE0F1 GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x30BEE0F1 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x54A18D57 EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x5FE8E7CC EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2F0 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x2A11CED0 EQ PUSH2 0x22E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x22AC JUMP JUMPDEST PUSH2 0x49A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x24AC JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x227 SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x248 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0x83F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BC PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DA PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x262A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xB53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xB65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x358 PUSH2 0xC1F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x362 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x380 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39E PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3BC PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DA PUSH2 0xCFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F1 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST PUSH2 0xD2F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x412 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40D SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST PUSH2 0xD45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH2 0xD62 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x438 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xEB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x445 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x468 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x289A JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x475 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x498 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xFAD JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x565 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x575 JUMPI POP PUSH2 0x574 DUP3 PUSH2 0x1033 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x58B SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5B7 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x604 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x604 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH2 0x623 DUP3 PUSH2 0x1125 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x63C DUP3 DUP3 PUSH2 0x637 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A6 SWAP1 PUSH2 0x29AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6BA DUP4 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x6FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F1 SWAP1 PUSH2 0x2A18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x705 DUP5 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x714 JUMPI PUSH2 0x713 DUP4 PUSH2 0x117C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x71F DUP4 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x7DD JUMPI PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x799 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0x1344 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x7FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x847 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8CA SWAP1 PUSH2 0x2AE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x915 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x933 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x943 DUP3 DUP3 PUSH2 0x14CD JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x956 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x9D0 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xA32 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD45 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0xA44 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA70 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xABD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xABD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAA0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB49 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xAFF JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC27 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0xC31 PUSH1 0x0 PUSH2 0x14EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xC78 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCA4 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCC6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD03 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0xC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD41 PUSH2 0xD3A PUSH2 0x1162 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x15B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD50 DUP5 DUP5 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0xD5C DUP5 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA8 SWAP1 PUSH2 0x2C07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE35 SWAP1 PUSH2 0x2C73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xEA9 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEBB DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xEC6 PUSH2 0x18D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xEE6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF11 JUMP JUMPDEST DUP1 PUSH2 0xEF0 DUP5 PUSH2 0x1969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF01 SWAP3 SWAP2 SWAP1 PUSH2 0x2CCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFB5 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1027 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x101E SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1030 DUP2 PUSH2 0x14EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A9 DUP4 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x111C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1113 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1177 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1A74 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0xB PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x11D6 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x11E7 JUMPI PUSH2 0x11E6 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0xB DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1229 JUMPI PUSH2 0x1228 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xB DUP1 SLOAD DUP1 PUSH2 0x12C7 JUMPI PUSH2 0x12C6 PUSH2 0x2D22 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13B6 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AD SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13CA DUP4 DUP4 PUSH2 0x13C5 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1440 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1437 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x144E PUSH2 0x1162 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x146C PUSH2 0xC3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14CB JUMPI PUSH2 0x148F PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x14E7 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E53 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1622 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1619 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1713 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x18D1 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1764 PUSH2 0x1162 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1786 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x17C2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BF SWAP2 SWAP1 PUSH2 0x2E3E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1846 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x183E JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1835 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x18CF JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18C6 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x8 DUP1 SLOAD PUSH2 0x18E6 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1912 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x195F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1934 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x195F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1942 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1978 DUP5 PUSH2 0x1E6F JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1997 JUMPI PUSH2 0x1996 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19C9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1A2C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1A20 JUMPI PUSH2 0x1A1F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x19D7 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1AAD JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1BE1 JUMPI PUSH1 0x0 PUSH2 0x1ABD DUP5 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B28 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1B3B JUMPI POP PUSH2 0x1B39 DUP2 DUP5 PUSH2 0xF19 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B7D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B74 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1BDF JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C45 DUP5 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C87 JUMPI PUSH2 0x1C86 DUP2 DUP5 DUP7 PUSH2 0x1FC2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D18 JUMPI PUSH2 0x1CC9 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1A74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D9B JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E5D DUP4 DUP4 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x1E6A PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1ECD JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1EC3 JUMPI PUSH2 0x1EC2 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1F0A JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1F00 JUMPI PUSH2 0x1EFF PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1F39 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1F2F JUMPI PUSH2 0x1F2E PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1F62 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1F58 JUMPI PUSH2 0x1F57 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1F87 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1F7D JUMPI PUSH2 0x1F7C PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1FAA JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1FA0 JUMPI PUSH2 0x1F9F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1FB9 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FCD DUP4 DUP4 DUP4 PUSH2 0x217F JUMP JUMPDEST PUSH2 0x2081 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2042 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2039 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2078 SWAP3 SWAP2 SWAP1 PUSH2 0x2E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20F8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20EF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2106 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x217A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2171 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2237 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x21F8 JUMPI POP PUSH2 0x21F7 DUP5 DUP5 PUSH2 0xF19 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2236 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x221E DUP4 PUSH2 0x1125 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2289 DUP2 PUSH2 0x2254 JUMP JUMPDEST DUP2 EQ PUSH2 0x2294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22A6 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22C2 JUMPI PUSH2 0x22C1 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22D0 DUP5 DUP3 DUP6 ADD PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22EE DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2309 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2349 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x232E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2371 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x237B DUP2 DUP6 PUSH2 0x231A JUMP JUMPDEST SWAP4 POP PUSH2 0x238B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2394 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23B9 DUP2 DUP5 PUSH2 0x2366 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23D4 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP2 EQ PUSH2 0x23DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23F1 DUP2 PUSH2 0x23CB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x240D JUMPI PUSH2 0x240C PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x241B DUP5 DUP3 DUP6 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x244F DUP3 PUSH2 0x2424 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x245F DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x247A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2489 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP2 EQ PUSH2 0x2494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24A6 DUP2 PUSH2 0x2480 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C3 JUMPI PUSH2 0x24C2 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24E2 DUP6 DUP3 DUP7 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2505 JUMPI PUSH2 0x2504 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2513 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2524 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2535 DUP7 DUP3 DUP8 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2555 JUMPI PUSH2 0x2554 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2563 DUP5 DUP3 DUP6 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25A1 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B3 DUP4 DUP4 PUSH2 0x2598 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25D7 DUP3 PUSH2 0x256C JUMP JUMPDEST PUSH2 0x25E1 DUP2 DUP6 PUSH2 0x2577 JUMP JUMPDEST SWAP4 POP PUSH2 0x25EC DUP4 PUSH2 0x2588 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x261D JUMPI DUP2 MLOAD PUSH2 0x2604 DUP9 DUP3 PUSH2 0x25A7 JUMP JUMPDEST SWAP8 POP PUSH2 0x260F DUP4 PUSH2 0x25BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25F0 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2644 DUP2 DUP5 PUSH2 0x25CC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2655 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2670 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x267F DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x268A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x269C DUP2 PUSH2 0x2676 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26B9 JUMPI PUSH2 0x26B8 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26C7 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26D8 DUP6 DUP3 DUP7 ADD PUSH2 0x268D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2724 DUP3 PUSH2 0x2355 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2743 JUMPI PUSH2 0x2742 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2756 PUSH2 0x2240 JUMP JUMPDEST SWAP1 POP PUSH2 0x2762 DUP3 DUP3 PUSH2 0x271B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2782 JUMPI PUSH2 0x2781 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH2 0x278B DUP3 PUSH2 0x2355 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27BA PUSH2 0x27B5 DUP5 PUSH2 0x2767 JUMP JUMPDEST PUSH2 0x274C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x27D6 JUMPI PUSH2 0x27D5 PUSH2 0x26E7 JUMP JUMPDEST JUMPDEST PUSH2 0x27E1 DUP5 DUP3 DUP6 PUSH2 0x2798 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27FE JUMPI PUSH2 0x27FD PUSH2 0x26E2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x280E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27A7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2831 JUMPI PUSH2 0x2830 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x283F DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2850 DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2861 DUP8 DUP3 DUP9 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2882 JUMPI PUSH2 0x2881 PUSH2 0x224F JUMP JUMPDEST JUMPDEST PUSH2 0x288E DUP8 DUP3 DUP9 ADD PUSH2 0x27E9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28B1 JUMPI PUSH2 0x28B0 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28BF DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28D0 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2921 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2934 JUMPI PUSH2 0x2933 PUSH2 0x28DA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2061207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2996 PUSH1 0x21 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x29A1 DUP3 PUSH2 0x293A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29C5 DUP2 PUSH2 0x2989 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526563697069656E7420616C7265616479206F776E73206120504F4150000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A02 PUSH1 0x1D DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2A0D DUP3 PUSH2 0x29CC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A31 DUP2 PUSH2 0x29F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A72 DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A7D DUP4 PUSH2 0x23C1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2A95 JUMPI PUSH2 0x2A94 PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4164647265737320686173206E6F74207369676E65642075702E000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD1 PUSH1 0x1A DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2ADC DUP3 PUSH2 0x2A9B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B00 DUP2 PUSH2 0x2AC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4164647265737320616C7265616479206F776E73206120504F41500000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2B48 DUP3 PUSH2 0x2B07 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B6C DUP2 PUSH2 0x2B30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7E DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2BB0 JUMPI PUSH2 0x2BAF PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5369676E2D757073206172652063757272656E746C792064697361626C65642E PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF1 PUSH1 0x20 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2BFC DUP3 PUSH2 0x2BBB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C20 DUP2 PUSH2 0x2BE4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x596F75206861766520616C7265616479207369676E65642075702E0000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2C68 DUP3 PUSH2 0x2C27 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C8C DUP2 PUSH2 0x2C50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA9 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x2CB3 DUP2 DUP6 PUSH2 0x2C93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2CC3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CDB DUP3 DUP6 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CE7 DUP3 DUP5 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2D66 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2D73 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST PUSH2 0x2D80 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DAF DUP3 PUSH2 0x2D88 JUMP JUMPDEST PUSH2 0x2DB9 DUP2 DUP6 PUSH2 0x2D93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2DC9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2DD2 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DF2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2DFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2E0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2E1E DUP2 DUP5 PUSH2 0x2DA4 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E38 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E54 JUMPI PUSH2 0x2E53 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E62 DUP5 DUP3 DUP6 ADD PUSH2 0x2E29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EAF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2EBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xD576B79BB2CE0B45BC0BE17068C0 SWAP6 0xCC SWAP3 PUSH2 0x2D30 0xC3 MUL 0xFB PUSH8 0xE1B387076E2D8E64 PUSH20 0x6F6C63430008180033A2646970667358221220FE TLOAD PUSH0 DUP1 PUSH8 0xCE9CC16A08EF78C1 0x23 AND LOG1 PUSH14 0x6DC58AEA06C79DBAF00DFD29BD75 0xDE PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"79:668:12:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@deployPOAP_2986":{"entryPoint":194,"id":2986,"parameterSlots":4,"returnSlots":0},"@deployedPOAPs_2942":{"entryPoint":434,"id":2942,"parameterSlots":0,"returnSlots":0},"@getDeployedContracts_2995":{"entryPoint":498,"id":2995,"parameterSlots":0,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":1005,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":754,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":1080,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":1374,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr":{"entryPoint":1131,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256":{"entryPoint":1397,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":1554,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":1537,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1447,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":1593,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":1807,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1464,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_address_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1872,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":1699,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":905,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":656,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":936,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":1521,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":1493,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1735,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":1580,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":1504,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1746,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":708,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":676,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1338,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":990,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":1763,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":851,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":804,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":777,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":782,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":671,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":666,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":787,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":728,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1348,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:9171:14","nodeType":"YulBlock","src":"0:9171:14","statements":[{"body":{"nativeSrc":"47:35:14","nodeType":"YulBlock","src":"47:35:14","statements":[{"nativeSrc":"57:19:14","nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:14","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:14","nodeType":"YulIdentifier","src":"67:5:14"},"nativeSrc":"67:9:14","nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:14","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:14","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nativeSrc":"177:28:14","nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:14","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:14","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:14","nodeType":"YulIdentifier","src":"187:6:14"},"nativeSrc":"187:12:14","nodeType":"YulFunctionCall","src":"187:12:14"},"nativeSrc":"187:12:14","nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:14","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nativeSrc":"300:28:14","nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:14","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:14","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:14","nodeType":"YulIdentifier","src":"310:6:14"},"nativeSrc":"310:12:14","nodeType":"YulFunctionCall","src":"310:12:14"},"nativeSrc":"310:12:14","nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:14","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nativeSrc":"379:81:14","nodeType":"YulBlock","src":"379:81:14","statements":[{"nativeSrc":"389:65:14","nodeType":"YulAssignment","src":"389:65:14","value":{"arguments":[{"name":"value","nativeSrc":"404:5:14","nodeType":"YulIdentifier","src":"404:5:14"},{"kind":"number","nativeSrc":"411:42:14","nodeType":"YulLiteral","src":"411:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:14","nodeType":"YulIdentifier","src":"400:3:14"},"nativeSrc":"400:54:14","nodeType":"YulFunctionCall","src":"400:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:14","nodeType":"YulIdentifier","src":"389:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:14","nodeType":"YulTypedName","src":"361:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:14","nodeType":"YulTypedName","src":"371:7:14","type":""}],"src":"334:126:14"},{"body":{"nativeSrc":"511:51:14","nodeType":"YulBlock","src":"511:51:14","statements":[{"nativeSrc":"521:35:14","nodeType":"YulAssignment","src":"521:35:14","value":{"arguments":[{"name":"value","nativeSrc":"550:5:14","nodeType":"YulIdentifier","src":"550:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:14","nodeType":"YulIdentifier","src":"532:17:14"},"nativeSrc":"532:24:14","nodeType":"YulFunctionCall","src":"532:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:14","nodeType":"YulIdentifier","src":"521:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:14","nodeType":"YulTypedName","src":"493:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:14","nodeType":"YulTypedName","src":"503:7:14","type":""}],"src":"466:96:14"},{"body":{"nativeSrc":"611:79:14","nodeType":"YulBlock","src":"611:79:14","statements":[{"body":{"nativeSrc":"668:16:14","nodeType":"YulBlock","src":"668:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:14","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:14","nodeType":"YulLiteral","src":"680:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:14","nodeType":"YulIdentifier","src":"670:6:14"},"nativeSrc":"670:12:14","nodeType":"YulFunctionCall","src":"670:12:14"},"nativeSrc":"670:12:14","nodeType":"YulExpressionStatement","src":"670:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:14","nodeType":"YulIdentifier","src":"634:5:14"},{"arguments":[{"name":"value","nativeSrc":"659:5:14","nodeType":"YulIdentifier","src":"659:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:14","nodeType":"YulIdentifier","src":"641:17:14"},"nativeSrc":"641:24:14","nodeType":"YulFunctionCall","src":"641:24:14"}],"functionName":{"name":"eq","nativeSrc":"631:2:14","nodeType":"YulIdentifier","src":"631:2:14"},"nativeSrc":"631:35:14","nodeType":"YulFunctionCall","src":"631:35:14"}],"functionName":{"name":"iszero","nativeSrc":"624:6:14","nodeType":"YulIdentifier","src":"624:6:14"},"nativeSrc":"624:43:14","nodeType":"YulFunctionCall","src":"624:43:14"},"nativeSrc":"621:63:14","nodeType":"YulIf","src":"621:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:14","nodeType":"YulTypedName","src":"604:5:14","type":""}],"src":"568:122:14"},{"body":{"nativeSrc":"748:87:14","nodeType":"YulBlock","src":"748:87:14","statements":[{"nativeSrc":"758:29:14","nodeType":"YulAssignment","src":"758:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"780:6:14","nodeType":"YulIdentifier","src":"780:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"767:12:14","nodeType":"YulIdentifier","src":"767:12:14"},"nativeSrc":"767:20:14","nodeType":"YulFunctionCall","src":"767:20:14"},"variableNames":[{"name":"value","nativeSrc":"758:5:14","nodeType":"YulIdentifier","src":"758:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"823:5:14","nodeType":"YulIdentifier","src":"823:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"796:26:14","nodeType":"YulIdentifier","src":"796:26:14"},"nativeSrc":"796:33:14","nodeType":"YulFunctionCall","src":"796:33:14"},"nativeSrc":"796:33:14","nodeType":"YulExpressionStatement","src":"796:33:14"}]},"name":"abi_decode_t_address","nativeSrc":"696:139:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"726:6:14","nodeType":"YulTypedName","src":"726:6:14","type":""},{"name":"end","nativeSrc":"734:3:14","nodeType":"YulTypedName","src":"734:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"742:5:14","nodeType":"YulTypedName","src":"742:5:14","type":""}],"src":"696:139:14"},{"body":{"nativeSrc":"930:28:14","nodeType":"YulBlock","src":"930:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"947:1:14","nodeType":"YulLiteral","src":"947:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"950:1:14","nodeType":"YulLiteral","src":"950:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"940:6:14","nodeType":"YulIdentifier","src":"940:6:14"},"nativeSrc":"940:12:14","nodeType":"YulFunctionCall","src":"940:12:14"},"nativeSrc":"940:12:14","nodeType":"YulExpressionStatement","src":"940:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"841:117:14","nodeType":"YulFunctionDefinition","src":"841:117:14"},{"body":{"nativeSrc":"1053:28:14","nodeType":"YulBlock","src":"1053:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1070:1:14","nodeType":"YulLiteral","src":"1070:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1073:1:14","nodeType":"YulLiteral","src":"1073:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1063:6:14","nodeType":"YulIdentifier","src":"1063:6:14"},"nativeSrc":"1063:12:14","nodeType":"YulFunctionCall","src":"1063:12:14"},"nativeSrc":"1063:12:14","nodeType":"YulExpressionStatement","src":"1063:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"964:117:14","nodeType":"YulFunctionDefinition","src":"964:117:14"},{"body":{"nativeSrc":"1135:54:14","nodeType":"YulBlock","src":"1135:54:14","statements":[{"nativeSrc":"1145:38:14","nodeType":"YulAssignment","src":"1145:38:14","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1163:5:14","nodeType":"YulIdentifier","src":"1163:5:14"},{"kind":"number","nativeSrc":"1170:2:14","nodeType":"YulLiteral","src":"1170:2:14","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1159:3:14","nodeType":"YulIdentifier","src":"1159:3:14"},"nativeSrc":"1159:14:14","nodeType":"YulFunctionCall","src":"1159:14:14"},{"arguments":[{"kind":"number","nativeSrc":"1179:2:14","nodeType":"YulLiteral","src":"1179:2:14","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1175:3:14","nodeType":"YulIdentifier","src":"1175:3:14"},"nativeSrc":"1175:7:14","nodeType":"YulFunctionCall","src":"1175:7:14"}],"functionName":{"name":"and","nativeSrc":"1155:3:14","nodeType":"YulIdentifier","src":"1155:3:14"},"nativeSrc":"1155:28:14","nodeType":"YulFunctionCall","src":"1155:28:14"},"variableNames":[{"name":"result","nativeSrc":"1145:6:14","nodeType":"YulIdentifier","src":"1145:6:14"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"1087:102:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1118:5:14","nodeType":"YulTypedName","src":"1118:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"1128:6:14","nodeType":"YulTypedName","src":"1128:6:14","type":""}],"src":"1087:102:14"},{"body":{"nativeSrc":"1223:152:14","nodeType":"YulBlock","src":"1223:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1240:1:14","nodeType":"YulLiteral","src":"1240:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1243:77:14","nodeType":"YulLiteral","src":"1243:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1233:6:14","nodeType":"YulIdentifier","src":"1233:6:14"},"nativeSrc":"1233:88:14","nodeType":"YulFunctionCall","src":"1233:88:14"},"nativeSrc":"1233:88:14","nodeType":"YulExpressionStatement","src":"1233:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1337:1:14","nodeType":"YulLiteral","src":"1337:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"1340:4:14","nodeType":"YulLiteral","src":"1340:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"1330:6:14","nodeType":"YulIdentifier","src":"1330:6:14"},"nativeSrc":"1330:15:14","nodeType":"YulFunctionCall","src":"1330:15:14"},"nativeSrc":"1330:15:14","nodeType":"YulExpressionStatement","src":"1330:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1361:1:14","nodeType":"YulLiteral","src":"1361:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1364:4:14","nodeType":"YulLiteral","src":"1364:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1354:6:14","nodeType":"YulIdentifier","src":"1354:6:14"},"nativeSrc":"1354:15:14","nodeType":"YulFunctionCall","src":"1354:15:14"},"nativeSrc":"1354:15:14","nodeType":"YulExpressionStatement","src":"1354:15:14"}]},"name":"panic_error_0x41","nativeSrc":"1195:180:14","nodeType":"YulFunctionDefinition","src":"1195:180:14"},{"body":{"nativeSrc":"1424:238:14","nodeType":"YulBlock","src":"1424:238:14","statements":[{"nativeSrc":"1434:58:14","nodeType":"YulVariableDeclaration","src":"1434:58:14","value":{"arguments":[{"name":"memPtr","nativeSrc":"1456:6:14","nodeType":"YulIdentifier","src":"1456:6:14"},{"arguments":[{"name":"size","nativeSrc":"1486:4:14","nodeType":"YulIdentifier","src":"1486:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1464:21:14","nodeType":"YulIdentifier","src":"1464:21:14"},"nativeSrc":"1464:27:14","nodeType":"YulFunctionCall","src":"1464:27:14"}],"functionName":{"name":"add","nativeSrc":"1452:3:14","nodeType":"YulIdentifier","src":"1452:3:14"},"nativeSrc":"1452:40:14","nodeType":"YulFunctionCall","src":"1452:40:14"},"variables":[{"name":"newFreePtr","nativeSrc":"1438:10:14","nodeType":"YulTypedName","src":"1438:10:14","type":""}]},{"body":{"nativeSrc":"1603:22:14","nodeType":"YulBlock","src":"1603:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1605:16:14","nodeType":"YulIdentifier","src":"1605:16:14"},"nativeSrc":"1605:18:14","nodeType":"YulFunctionCall","src":"1605:18:14"},"nativeSrc":"1605:18:14","nodeType":"YulExpressionStatement","src":"1605:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1546:10:14","nodeType":"YulIdentifier","src":"1546:10:14"},{"kind":"number","nativeSrc":"1558:18:14","nodeType":"YulLiteral","src":"1558:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1543:2:14","nodeType":"YulIdentifier","src":"1543:2:14"},"nativeSrc":"1543:34:14","nodeType":"YulFunctionCall","src":"1543:34:14"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1582:10:14","nodeType":"YulIdentifier","src":"1582:10:14"},{"name":"memPtr","nativeSrc":"1594:6:14","nodeType":"YulIdentifier","src":"1594:6:14"}],"functionName":{"name":"lt","nativeSrc":"1579:2:14","nodeType":"YulIdentifier","src":"1579:2:14"},"nativeSrc":"1579:22:14","nodeType":"YulFunctionCall","src":"1579:22:14"}],"functionName":{"name":"or","nativeSrc":"1540:2:14","nodeType":"YulIdentifier","src":"1540:2:14"},"nativeSrc":"1540:62:14","nodeType":"YulFunctionCall","src":"1540:62:14"},"nativeSrc":"1537:88:14","nodeType":"YulIf","src":"1537:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1641:2:14","nodeType":"YulLiteral","src":"1641:2:14","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1645:10:14","nodeType":"YulIdentifier","src":"1645:10:14"}],"functionName":{"name":"mstore","nativeSrc":"1634:6:14","nodeType":"YulIdentifier","src":"1634:6:14"},"nativeSrc":"1634:22:14","nodeType":"YulFunctionCall","src":"1634:22:14"},"nativeSrc":"1634:22:14","nodeType":"YulExpressionStatement","src":"1634:22:14"}]},"name":"finalize_allocation","nativeSrc":"1381:281:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1410:6:14","nodeType":"YulTypedName","src":"1410:6:14","type":""},{"name":"size","nativeSrc":"1418:4:14","nodeType":"YulTypedName","src":"1418:4:14","type":""}],"src":"1381:281:14"},{"body":{"nativeSrc":"1709:88:14","nodeType":"YulBlock","src":"1709:88:14","statements":[{"nativeSrc":"1719:30:14","nodeType":"YulAssignment","src":"1719:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"1729:18:14","nodeType":"YulIdentifier","src":"1729:18:14"},"nativeSrc":"1729:20:14","nodeType":"YulFunctionCall","src":"1729:20:14"},"variableNames":[{"name":"memPtr","nativeSrc":"1719:6:14","nodeType":"YulIdentifier","src":"1719:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1778:6:14","nodeType":"YulIdentifier","src":"1778:6:14"},{"name":"size","nativeSrc":"1786:4:14","nodeType":"YulIdentifier","src":"1786:4:14"}],"functionName":{"name":"finalize_allocation","nativeSrc":"1758:19:14","nodeType":"YulIdentifier","src":"1758:19:14"},"nativeSrc":"1758:33:14","nodeType":"YulFunctionCall","src":"1758:33:14"},"nativeSrc":"1758:33:14","nodeType":"YulExpressionStatement","src":"1758:33:14"}]},"name":"allocate_memory","nativeSrc":"1668:129:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"1693:4:14","nodeType":"YulTypedName","src":"1693:4:14","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"1702:6:14","nodeType":"YulTypedName","src":"1702:6:14","type":""}],"src":"1668:129:14"},{"body":{"nativeSrc":"1870:241:14","nodeType":"YulBlock","src":"1870:241:14","statements":[{"body":{"nativeSrc":"1975:22:14","nodeType":"YulBlock","src":"1975:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1977:16:14","nodeType":"YulIdentifier","src":"1977:16:14"},"nativeSrc":"1977:18:14","nodeType":"YulFunctionCall","src":"1977:18:14"},"nativeSrc":"1977:18:14","nodeType":"YulExpressionStatement","src":"1977:18:14"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1947:6:14","nodeType":"YulIdentifier","src":"1947:6:14"},{"kind":"number","nativeSrc":"1955:18:14","nodeType":"YulLiteral","src":"1955:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1944:2:14","nodeType":"YulIdentifier","src":"1944:2:14"},"nativeSrc":"1944:30:14","nodeType":"YulFunctionCall","src":"1944:30:14"},"nativeSrc":"1941:56:14","nodeType":"YulIf","src":"1941:56:14"},{"nativeSrc":"2007:37:14","nodeType":"YulAssignment","src":"2007:37:14","value":{"arguments":[{"name":"length","nativeSrc":"2037:6:14","nodeType":"YulIdentifier","src":"2037:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2015:21:14","nodeType":"YulIdentifier","src":"2015:21:14"},"nativeSrc":"2015:29:14","nodeType":"YulFunctionCall","src":"2015:29:14"},"variableNames":[{"name":"size","nativeSrc":"2007:4:14","nodeType":"YulIdentifier","src":"2007:4:14"}]},{"nativeSrc":"2081:23:14","nodeType":"YulAssignment","src":"2081:23:14","value":{"arguments":[{"name":"size","nativeSrc":"2093:4:14","nodeType":"YulIdentifier","src":"2093:4:14"},{"kind":"number","nativeSrc":"2099:4:14","nodeType":"YulLiteral","src":"2099:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2089:3:14","nodeType":"YulIdentifier","src":"2089:3:14"},"nativeSrc":"2089:15:14","nodeType":"YulFunctionCall","src":"2089:15:14"},"variableNames":[{"name":"size","nativeSrc":"2081:4:14","nodeType":"YulIdentifier","src":"2081:4:14"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1803:308:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"1854:6:14","nodeType":"YulTypedName","src":"1854:6:14","type":""}],"returnVariables":[{"name":"size","nativeSrc":"1865:4:14","nodeType":"YulTypedName","src":"1865:4:14","type":""}],"src":"1803:308:14"},{"body":{"nativeSrc":"2181:82:14","nodeType":"YulBlock","src":"2181:82:14","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"2204:3:14","nodeType":"YulIdentifier","src":"2204:3:14"},{"name":"src","nativeSrc":"2209:3:14","nodeType":"YulIdentifier","src":"2209:3:14"},{"name":"length","nativeSrc":"2214:6:14","nodeType":"YulIdentifier","src":"2214:6:14"}],"functionName":{"name":"calldatacopy","nativeSrc":"2191:12:14","nodeType":"YulIdentifier","src":"2191:12:14"},"nativeSrc":"2191:30:14","nodeType":"YulFunctionCall","src":"2191:30:14"},"nativeSrc":"2191:30:14","nodeType":"YulExpressionStatement","src":"2191:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2241:3:14","nodeType":"YulIdentifier","src":"2241:3:14"},{"name":"length","nativeSrc":"2246:6:14","nodeType":"YulIdentifier","src":"2246:6:14"}],"functionName":{"name":"add","nativeSrc":"2237:3:14","nodeType":"YulIdentifier","src":"2237:3:14"},"nativeSrc":"2237:16:14","nodeType":"YulFunctionCall","src":"2237:16:14"},{"kind":"number","nativeSrc":"2255:1:14","nodeType":"YulLiteral","src":"2255:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2230:6:14","nodeType":"YulIdentifier","src":"2230:6:14"},"nativeSrc":"2230:27:14","nodeType":"YulFunctionCall","src":"2230:27:14"},"nativeSrc":"2230:27:14","nodeType":"YulExpressionStatement","src":"2230:27:14"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"2117:146:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"2163:3:14","nodeType":"YulTypedName","src":"2163:3:14","type":""},{"name":"dst","nativeSrc":"2168:3:14","nodeType":"YulTypedName","src":"2168:3:14","type":""},{"name":"length","nativeSrc":"2173:6:14","nodeType":"YulTypedName","src":"2173:6:14","type":""}],"src":"2117:146:14"},{"body":{"nativeSrc":"2353:341:14","nodeType":"YulBlock","src":"2353:341:14","statements":[{"nativeSrc":"2363:75:14","nodeType":"YulAssignment","src":"2363:75:14","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2430:6:14","nodeType":"YulIdentifier","src":"2430:6:14"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"2388:41:14","nodeType":"YulIdentifier","src":"2388:41:14"},"nativeSrc":"2388:49:14","nodeType":"YulFunctionCall","src":"2388:49:14"}],"functionName":{"name":"allocate_memory","nativeSrc":"2372:15:14","nodeType":"YulIdentifier","src":"2372:15:14"},"nativeSrc":"2372:66:14","nodeType":"YulFunctionCall","src":"2372:66:14"},"variableNames":[{"name":"array","nativeSrc":"2363:5:14","nodeType":"YulIdentifier","src":"2363:5:14"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2454:5:14","nodeType":"YulIdentifier","src":"2454:5:14"},{"name":"length","nativeSrc":"2461:6:14","nodeType":"YulIdentifier","src":"2461:6:14"}],"functionName":{"name":"mstore","nativeSrc":"2447:6:14","nodeType":"YulIdentifier","src":"2447:6:14"},"nativeSrc":"2447:21:14","nodeType":"YulFunctionCall","src":"2447:21:14"},"nativeSrc":"2447:21:14","nodeType":"YulExpressionStatement","src":"2447:21:14"},{"nativeSrc":"2477:27:14","nodeType":"YulVariableDeclaration","src":"2477:27:14","value":{"arguments":[{"name":"array","nativeSrc":"2492:5:14","nodeType":"YulIdentifier","src":"2492:5:14"},{"kind":"number","nativeSrc":"2499:4:14","nodeType":"YulLiteral","src":"2499:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2488:3:14","nodeType":"YulIdentifier","src":"2488:3:14"},"nativeSrc":"2488:16:14","nodeType":"YulFunctionCall","src":"2488:16:14"},"variables":[{"name":"dst","nativeSrc":"2481:3:14","nodeType":"YulTypedName","src":"2481:3:14","type":""}]},{"body":{"nativeSrc":"2542:83:14","nodeType":"YulBlock","src":"2542:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"2544:77:14","nodeType":"YulIdentifier","src":"2544:77:14"},"nativeSrc":"2544:79:14","nodeType":"YulFunctionCall","src":"2544:79:14"},"nativeSrc":"2544:79:14","nodeType":"YulExpressionStatement","src":"2544:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2523:3:14","nodeType":"YulIdentifier","src":"2523:3:14"},{"name":"length","nativeSrc":"2528:6:14","nodeType":"YulIdentifier","src":"2528:6:14"}],"functionName":{"name":"add","nativeSrc":"2519:3:14","nodeType":"YulIdentifier","src":"2519:3:14"},"nativeSrc":"2519:16:14","nodeType":"YulFunctionCall","src":"2519:16:14"},{"name":"end","nativeSrc":"2537:3:14","nodeType":"YulIdentifier","src":"2537:3:14"}],"functionName":{"name":"gt","nativeSrc":"2516:2:14","nodeType":"YulIdentifier","src":"2516:2:14"},"nativeSrc":"2516:25:14","nodeType":"YulFunctionCall","src":"2516:25:14"},"nativeSrc":"2513:112:14","nodeType":"YulIf","src":"2513:112:14"},{"expression":{"arguments":[{"name":"src","nativeSrc":"2671:3:14","nodeType":"YulIdentifier","src":"2671:3:14"},{"name":"dst","nativeSrc":"2676:3:14","nodeType":"YulIdentifier","src":"2676:3:14"},{"name":"length","nativeSrc":"2681:6:14","nodeType":"YulIdentifier","src":"2681:6:14"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"2634:36:14","nodeType":"YulIdentifier","src":"2634:36:14"},"nativeSrc":"2634:54:14","nodeType":"YulFunctionCall","src":"2634:54:14"},"nativeSrc":"2634:54:14","nodeType":"YulExpressionStatement","src":"2634:54:14"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"2269:425:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"2326:3:14","nodeType":"YulTypedName","src":"2326:3:14","type":""},{"name":"length","nativeSrc":"2331:6:14","nodeType":"YulTypedName","src":"2331:6:14","type":""},{"name":"end","nativeSrc":"2339:3:14","nodeType":"YulTypedName","src":"2339:3:14","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2347:5:14","nodeType":"YulTypedName","src":"2347:5:14","type":""}],"src":"2269:425:14"},{"body":{"nativeSrc":"2776:278:14","nodeType":"YulBlock","src":"2776:278:14","statements":[{"body":{"nativeSrc":"2825:83:14","nodeType":"YulBlock","src":"2825:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2827:77:14","nodeType":"YulIdentifier","src":"2827:77:14"},"nativeSrc":"2827:79:14","nodeType":"YulFunctionCall","src":"2827:79:14"},"nativeSrc":"2827:79:14","nodeType":"YulExpressionStatement","src":"2827:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2804:6:14","nodeType":"YulIdentifier","src":"2804:6:14"},{"kind":"number","nativeSrc":"2812:4:14","nodeType":"YulLiteral","src":"2812:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2800:3:14","nodeType":"YulIdentifier","src":"2800:3:14"},"nativeSrc":"2800:17:14","nodeType":"YulFunctionCall","src":"2800:17:14"},{"name":"end","nativeSrc":"2819:3:14","nodeType":"YulIdentifier","src":"2819:3:14"}],"functionName":{"name":"slt","nativeSrc":"2796:3:14","nodeType":"YulIdentifier","src":"2796:3:14"},"nativeSrc":"2796:27:14","nodeType":"YulFunctionCall","src":"2796:27:14"}],"functionName":{"name":"iszero","nativeSrc":"2789:6:14","nodeType":"YulIdentifier","src":"2789:6:14"},"nativeSrc":"2789:35:14","nodeType":"YulFunctionCall","src":"2789:35:14"},"nativeSrc":"2786:122:14","nodeType":"YulIf","src":"2786:122:14"},{"nativeSrc":"2917:34:14","nodeType":"YulVariableDeclaration","src":"2917:34:14","value":{"arguments":[{"name":"offset","nativeSrc":"2944:6:14","nodeType":"YulIdentifier","src":"2944:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"2931:12:14","nodeType":"YulIdentifier","src":"2931:12:14"},"nativeSrc":"2931:20:14","nodeType":"YulFunctionCall","src":"2931:20:14"},"variables":[{"name":"length","nativeSrc":"2921:6:14","nodeType":"YulTypedName","src":"2921:6:14","type":""}]},{"nativeSrc":"2960:88:14","nodeType":"YulAssignment","src":"2960:88:14","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3021:6:14","nodeType":"YulIdentifier","src":"3021:6:14"},{"kind":"number","nativeSrc":"3029:4:14","nodeType":"YulLiteral","src":"3029:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3017:3:14","nodeType":"YulIdentifier","src":"3017:3:14"},"nativeSrc":"3017:17:14","nodeType":"YulFunctionCall","src":"3017:17:14"},{"name":"length","nativeSrc":"3036:6:14","nodeType":"YulIdentifier","src":"3036:6:14"},{"name":"end","nativeSrc":"3044:3:14","nodeType":"YulIdentifier","src":"3044:3:14"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nativeSrc":"2969:47:14","nodeType":"YulIdentifier","src":"2969:47:14"},"nativeSrc":"2969:79:14","nodeType":"YulFunctionCall","src":"2969:79:14"},"variableNames":[{"name":"array","nativeSrc":"2960:5:14","nodeType":"YulIdentifier","src":"2960:5:14"}]}]},"name":"abi_decode_t_string_memory_ptr","nativeSrc":"2714:340:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2754:6:14","nodeType":"YulTypedName","src":"2754:6:14","type":""},{"name":"end","nativeSrc":"2762:3:14","nodeType":"YulTypedName","src":"2762:3:14","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2770:5:14","nodeType":"YulTypedName","src":"2770:5:14","type":""}],"src":"2714:340:14"},{"body":{"nativeSrc":"3207:1158:14","nodeType":"YulBlock","src":"3207:1158:14","statements":[{"body":{"nativeSrc":"3254:83:14","nodeType":"YulBlock","src":"3254:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3256:77:14","nodeType":"YulIdentifier","src":"3256:77:14"},"nativeSrc":"3256:79:14","nodeType":"YulFunctionCall","src":"3256:79:14"},"nativeSrc":"3256:79:14","nodeType":"YulExpressionStatement","src":"3256:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3228:7:14","nodeType":"YulIdentifier","src":"3228:7:14"},{"name":"headStart","nativeSrc":"3237:9:14","nodeType":"YulIdentifier","src":"3237:9:14"}],"functionName":{"name":"sub","nativeSrc":"3224:3:14","nodeType":"YulIdentifier","src":"3224:3:14"},"nativeSrc":"3224:23:14","nodeType":"YulFunctionCall","src":"3224:23:14"},{"kind":"number","nativeSrc":"3249:3:14","nodeType":"YulLiteral","src":"3249:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3220:3:14","nodeType":"YulIdentifier","src":"3220:3:14"},"nativeSrc":"3220:33:14","nodeType":"YulFunctionCall","src":"3220:33:14"},"nativeSrc":"3217:120:14","nodeType":"YulIf","src":"3217:120:14"},{"nativeSrc":"3347:117:14","nodeType":"YulBlock","src":"3347:117:14","statements":[{"nativeSrc":"3362:15:14","nodeType":"YulVariableDeclaration","src":"3362:15:14","value":{"kind":"number","nativeSrc":"3376:1:14","nodeType":"YulLiteral","src":"3376:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3366:6:14","nodeType":"YulTypedName","src":"3366:6:14","type":""}]},{"nativeSrc":"3391:63:14","nodeType":"YulAssignment","src":"3391:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3426:9:14","nodeType":"YulIdentifier","src":"3426:9:14"},{"name":"offset","nativeSrc":"3437:6:14","nodeType":"YulIdentifier","src":"3437:6:14"}],"functionName":{"name":"add","nativeSrc":"3422:3:14","nodeType":"YulIdentifier","src":"3422:3:14"},"nativeSrc":"3422:22:14","nodeType":"YulFunctionCall","src":"3422:22:14"},{"name":"dataEnd","nativeSrc":"3446:7:14","nodeType":"YulIdentifier","src":"3446:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"3401:20:14","nodeType":"YulIdentifier","src":"3401:20:14"},"nativeSrc":"3401:53:14","nodeType":"YulFunctionCall","src":"3401:53:14"},"variableNames":[{"name":"value0","nativeSrc":"3391:6:14","nodeType":"YulIdentifier","src":"3391:6:14"}]}]},{"nativeSrc":"3474:288:14","nodeType":"YulBlock","src":"3474:288:14","statements":[{"nativeSrc":"3489:46:14","nodeType":"YulVariableDeclaration","src":"3489:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3520:9:14","nodeType":"YulIdentifier","src":"3520:9:14"},{"kind":"number","nativeSrc":"3531:2:14","nodeType":"YulLiteral","src":"3531:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3516:3:14","nodeType":"YulIdentifier","src":"3516:3:14"},"nativeSrc":"3516:18:14","nodeType":"YulFunctionCall","src":"3516:18:14"}],"functionName":{"name":"calldataload","nativeSrc":"3503:12:14","nodeType":"YulIdentifier","src":"3503:12:14"},"nativeSrc":"3503:32:14","nodeType":"YulFunctionCall","src":"3503:32:14"},"variables":[{"name":"offset","nativeSrc":"3493:6:14","nodeType":"YulTypedName","src":"3493:6:14","type":""}]},{"body":{"nativeSrc":"3582:83:14","nodeType":"YulBlock","src":"3582:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3584:77:14","nodeType":"YulIdentifier","src":"3584:77:14"},"nativeSrc":"3584:79:14","nodeType":"YulFunctionCall","src":"3584:79:14"},"nativeSrc":"3584:79:14","nodeType":"YulExpressionStatement","src":"3584:79:14"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3554:6:14","nodeType":"YulIdentifier","src":"3554:6:14"},{"kind":"number","nativeSrc":"3562:18:14","nodeType":"YulLiteral","src":"3562:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3551:2:14","nodeType":"YulIdentifier","src":"3551:2:14"},"nativeSrc":"3551:30:14","nodeType":"YulFunctionCall","src":"3551:30:14"},"nativeSrc":"3548:117:14","nodeType":"YulIf","src":"3548:117:14"},{"nativeSrc":"3679:73:14","nodeType":"YulAssignment","src":"3679:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3724:9:14","nodeType":"YulIdentifier","src":"3724:9:14"},{"name":"offset","nativeSrc":"3735:6:14","nodeType":"YulIdentifier","src":"3735:6:14"}],"functionName":{"name":"add","nativeSrc":"3720:3:14","nodeType":"YulIdentifier","src":"3720:3:14"},"nativeSrc":"3720:22:14","nodeType":"YulFunctionCall","src":"3720:22:14"},{"name":"dataEnd","nativeSrc":"3744:7:14","nodeType":"YulIdentifier","src":"3744:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"3689:30:14","nodeType":"YulIdentifier","src":"3689:30:14"},"nativeSrc":"3689:63:14","nodeType":"YulFunctionCall","src":"3689:63:14"},"variableNames":[{"name":"value1","nativeSrc":"3679:6:14","nodeType":"YulIdentifier","src":"3679:6:14"}]}]},{"nativeSrc":"3772:288:14","nodeType":"YulBlock","src":"3772:288:14","statements":[{"nativeSrc":"3787:46:14","nodeType":"YulVariableDeclaration","src":"3787:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3818:9:14","nodeType":"YulIdentifier","src":"3818:9:14"},{"kind":"number","nativeSrc":"3829:2:14","nodeType":"YulLiteral","src":"3829:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3814:3:14","nodeType":"YulIdentifier","src":"3814:3:14"},"nativeSrc":"3814:18:14","nodeType":"YulFunctionCall","src":"3814:18:14"}],"functionName":{"name":"calldataload","nativeSrc":"3801:12:14","nodeType":"YulIdentifier","src":"3801:12:14"},"nativeSrc":"3801:32:14","nodeType":"YulFunctionCall","src":"3801:32:14"},"variables":[{"name":"offset","nativeSrc":"3791:6:14","nodeType":"YulTypedName","src":"3791:6:14","type":""}]},{"body":{"nativeSrc":"3880:83:14","nodeType":"YulBlock","src":"3880:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3882:77:14","nodeType":"YulIdentifier","src":"3882:77:14"},"nativeSrc":"3882:79:14","nodeType":"YulFunctionCall","src":"3882:79:14"},"nativeSrc":"3882:79:14","nodeType":"YulExpressionStatement","src":"3882:79:14"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3852:6:14","nodeType":"YulIdentifier","src":"3852:6:14"},{"kind":"number","nativeSrc":"3860:18:14","nodeType":"YulLiteral","src":"3860:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3849:2:14","nodeType":"YulIdentifier","src":"3849:2:14"},"nativeSrc":"3849:30:14","nodeType":"YulFunctionCall","src":"3849:30:14"},"nativeSrc":"3846:117:14","nodeType":"YulIf","src":"3846:117:14"},{"nativeSrc":"3977:73:14","nodeType":"YulAssignment","src":"3977:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4022:9:14","nodeType":"YulIdentifier","src":"4022:9:14"},{"name":"offset","nativeSrc":"4033:6:14","nodeType":"YulIdentifier","src":"4033:6:14"}],"functionName":{"name":"add","nativeSrc":"4018:3:14","nodeType":"YulIdentifier","src":"4018:3:14"},"nativeSrc":"4018:22:14","nodeType":"YulFunctionCall","src":"4018:22:14"},{"name":"dataEnd","nativeSrc":"4042:7:14","nodeType":"YulIdentifier","src":"4042:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"3987:30:14","nodeType":"YulIdentifier","src":"3987:30:14"},"nativeSrc":"3987:63:14","nodeType":"YulFunctionCall","src":"3987:63:14"},"variableNames":[{"name":"value2","nativeSrc":"3977:6:14","nodeType":"YulIdentifier","src":"3977:6:14"}]}]},{"nativeSrc":"4070:288:14","nodeType":"YulBlock","src":"4070:288:14","statements":[{"nativeSrc":"4085:46:14","nodeType":"YulVariableDeclaration","src":"4085:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4116:9:14","nodeType":"YulIdentifier","src":"4116:9:14"},{"kind":"number","nativeSrc":"4127:2:14","nodeType":"YulLiteral","src":"4127:2:14","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4112:3:14","nodeType":"YulIdentifier","src":"4112:3:14"},"nativeSrc":"4112:18:14","nodeType":"YulFunctionCall","src":"4112:18:14"}],"functionName":{"name":"calldataload","nativeSrc":"4099:12:14","nodeType":"YulIdentifier","src":"4099:12:14"},"nativeSrc":"4099:32:14","nodeType":"YulFunctionCall","src":"4099:32:14"},"variables":[{"name":"offset","nativeSrc":"4089:6:14","nodeType":"YulTypedName","src":"4089:6:14","type":""}]},{"body":{"nativeSrc":"4178:83:14","nodeType":"YulBlock","src":"4178:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"4180:77:14","nodeType":"YulIdentifier","src":"4180:77:14"},"nativeSrc":"4180:79:14","nodeType":"YulFunctionCall","src":"4180:79:14"},"nativeSrc":"4180:79:14","nodeType":"YulExpressionStatement","src":"4180:79:14"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4150:6:14","nodeType":"YulIdentifier","src":"4150:6:14"},{"kind":"number","nativeSrc":"4158:18:14","nodeType":"YulLiteral","src":"4158:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4147:2:14","nodeType":"YulIdentifier","src":"4147:2:14"},"nativeSrc":"4147:30:14","nodeType":"YulFunctionCall","src":"4147:30:14"},"nativeSrc":"4144:117:14","nodeType":"YulIf","src":"4144:117:14"},{"nativeSrc":"4275:73:14","nodeType":"YulAssignment","src":"4275:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4320:9:14","nodeType":"YulIdentifier","src":"4320:9:14"},{"name":"offset","nativeSrc":"4331:6:14","nodeType":"YulIdentifier","src":"4331:6:14"}],"functionName":{"name":"add","nativeSrc":"4316:3:14","nodeType":"YulIdentifier","src":"4316:3:14"},"nativeSrc":"4316:22:14","nodeType":"YulFunctionCall","src":"4316:22:14"},{"name":"dataEnd","nativeSrc":"4340:7:14","nodeType":"YulIdentifier","src":"4340:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nativeSrc":"4285:30:14","nodeType":"YulIdentifier","src":"4285:30:14"},"nativeSrc":"4285:63:14","nodeType":"YulFunctionCall","src":"4285:63:14"},"variableNames":[{"name":"value3","nativeSrc":"4275:6:14","nodeType":"YulIdentifier","src":"4275:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr","nativeSrc":"3060:1305:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3153:9:14","nodeType":"YulTypedName","src":"3153:9:14","type":""},{"name":"dataEnd","nativeSrc":"3164:7:14","nodeType":"YulTypedName","src":"3164:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3176:6:14","nodeType":"YulTypedName","src":"3176:6:14","type":""},{"name":"value1","nativeSrc":"3184:6:14","nodeType":"YulTypedName","src":"3184:6:14","type":""},{"name":"value2","nativeSrc":"3192:6:14","nodeType":"YulTypedName","src":"3192:6:14","type":""},{"name":"value3","nativeSrc":"3200:6:14","nodeType":"YulTypedName","src":"3200:6:14","type":""}],"src":"3060:1305:14"},{"body":{"nativeSrc":"4416:32:14","nodeType":"YulBlock","src":"4416:32:14","statements":[{"nativeSrc":"4426:16:14","nodeType":"YulAssignment","src":"4426:16:14","value":{"name":"value","nativeSrc":"4437:5:14","nodeType":"YulIdentifier","src":"4437:5:14"},"variableNames":[{"name":"cleaned","nativeSrc":"4426:7:14","nodeType":"YulIdentifier","src":"4426:7:14"}]}]},"name":"cleanup_t_uint256","nativeSrc":"4371:77:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4398:5:14","nodeType":"YulTypedName","src":"4398:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"4408:7:14","nodeType":"YulTypedName","src":"4408:7:14","type":""}],"src":"4371:77:14"},{"body":{"nativeSrc":"4497:79:14","nodeType":"YulBlock","src":"4497:79:14","statements":[{"body":{"nativeSrc":"4554:16:14","nodeType":"YulBlock","src":"4554:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4563:1:14","nodeType":"YulLiteral","src":"4563:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"4566:1:14","nodeType":"YulLiteral","src":"4566:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4556:6:14","nodeType":"YulIdentifier","src":"4556:6:14"},"nativeSrc":"4556:12:14","nodeType":"YulFunctionCall","src":"4556:12:14"},"nativeSrc":"4556:12:14","nodeType":"YulExpressionStatement","src":"4556:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4520:5:14","nodeType":"YulIdentifier","src":"4520:5:14"},{"arguments":[{"name":"value","nativeSrc":"4545:5:14","nodeType":"YulIdentifier","src":"4545:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"4527:17:14","nodeType":"YulIdentifier","src":"4527:17:14"},"nativeSrc":"4527:24:14","nodeType":"YulFunctionCall","src":"4527:24:14"}],"functionName":{"name":"eq","nativeSrc":"4517:2:14","nodeType":"YulIdentifier","src":"4517:2:14"},"nativeSrc":"4517:35:14","nodeType":"YulFunctionCall","src":"4517:35:14"}],"functionName":{"name":"iszero","nativeSrc":"4510:6:14","nodeType":"YulIdentifier","src":"4510:6:14"},"nativeSrc":"4510:43:14","nodeType":"YulFunctionCall","src":"4510:43:14"},"nativeSrc":"4507:63:14","nodeType":"YulIf","src":"4507:63:14"}]},"name":"validator_revert_t_uint256","nativeSrc":"4454:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4490:5:14","nodeType":"YulTypedName","src":"4490:5:14","type":""}],"src":"4454:122:14"},{"body":{"nativeSrc":"4634:87:14","nodeType":"YulBlock","src":"4634:87:14","statements":[{"nativeSrc":"4644:29:14","nodeType":"YulAssignment","src":"4644:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"4666:6:14","nodeType":"YulIdentifier","src":"4666:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"4653:12:14","nodeType":"YulIdentifier","src":"4653:12:14"},"nativeSrc":"4653:20:14","nodeType":"YulFunctionCall","src":"4653:20:14"},"variableNames":[{"name":"value","nativeSrc":"4644:5:14","nodeType":"YulIdentifier","src":"4644:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4709:5:14","nodeType":"YulIdentifier","src":"4709:5:14"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"4682:26:14","nodeType":"YulIdentifier","src":"4682:26:14"},"nativeSrc":"4682:33:14","nodeType":"YulFunctionCall","src":"4682:33:14"},"nativeSrc":"4682:33:14","nodeType":"YulExpressionStatement","src":"4682:33:14"}]},"name":"abi_decode_t_uint256","nativeSrc":"4582:139:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4612:6:14","nodeType":"YulTypedName","src":"4612:6:14","type":""},{"name":"end","nativeSrc":"4620:3:14","nodeType":"YulTypedName","src":"4620:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4628:5:14","nodeType":"YulTypedName","src":"4628:5:14","type":""}],"src":"4582:139:14"},{"body":{"nativeSrc":"4793:263:14","nodeType":"YulBlock","src":"4793:263:14","statements":[{"body":{"nativeSrc":"4839:83:14","nodeType":"YulBlock","src":"4839:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4841:77:14","nodeType":"YulIdentifier","src":"4841:77:14"},"nativeSrc":"4841:79:14","nodeType":"YulFunctionCall","src":"4841:79:14"},"nativeSrc":"4841:79:14","nodeType":"YulExpressionStatement","src":"4841:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4814:7:14","nodeType":"YulIdentifier","src":"4814:7:14"},{"name":"headStart","nativeSrc":"4823:9:14","nodeType":"YulIdentifier","src":"4823:9:14"}],"functionName":{"name":"sub","nativeSrc":"4810:3:14","nodeType":"YulIdentifier","src":"4810:3:14"},"nativeSrc":"4810:23:14","nodeType":"YulFunctionCall","src":"4810:23:14"},{"kind":"number","nativeSrc":"4835:2:14","nodeType":"YulLiteral","src":"4835:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4806:3:14","nodeType":"YulIdentifier","src":"4806:3:14"},"nativeSrc":"4806:32:14","nodeType":"YulFunctionCall","src":"4806:32:14"},"nativeSrc":"4803:119:14","nodeType":"YulIf","src":"4803:119:14"},{"nativeSrc":"4932:117:14","nodeType":"YulBlock","src":"4932:117:14","statements":[{"nativeSrc":"4947:15:14","nodeType":"YulVariableDeclaration","src":"4947:15:14","value":{"kind":"number","nativeSrc":"4961:1:14","nodeType":"YulLiteral","src":"4961:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4951:6:14","nodeType":"YulTypedName","src":"4951:6:14","type":""}]},{"nativeSrc":"4976:63:14","nodeType":"YulAssignment","src":"4976:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5011:9:14","nodeType":"YulIdentifier","src":"5011:9:14"},{"name":"offset","nativeSrc":"5022:6:14","nodeType":"YulIdentifier","src":"5022:6:14"}],"functionName":{"name":"add","nativeSrc":"5007:3:14","nodeType":"YulIdentifier","src":"5007:3:14"},"nativeSrc":"5007:22:14","nodeType":"YulFunctionCall","src":"5007:22:14"},{"name":"dataEnd","nativeSrc":"5031:7:14","nodeType":"YulIdentifier","src":"5031:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4986:20:14","nodeType":"YulIdentifier","src":"4986:20:14"},"nativeSrc":"4986:53:14","nodeType":"YulFunctionCall","src":"4986:53:14"},"variableNames":[{"name":"value0","nativeSrc":"4976:6:14","nodeType":"YulIdentifier","src":"4976:6:14"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"4727:329:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4763:9:14","nodeType":"YulTypedName","src":"4763:9:14","type":""},{"name":"dataEnd","nativeSrc":"4774:7:14","nodeType":"YulTypedName","src":"4774:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4786:6:14","nodeType":"YulTypedName","src":"4786:6:14","type":""}],"src":"4727:329:14"},{"body":{"nativeSrc":"5127:53:14","nodeType":"YulBlock","src":"5127:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5144:3:14","nodeType":"YulIdentifier","src":"5144:3:14"},{"arguments":[{"name":"value","nativeSrc":"5167:5:14","nodeType":"YulIdentifier","src":"5167:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"5149:17:14","nodeType":"YulIdentifier","src":"5149:17:14"},"nativeSrc":"5149:24:14","nodeType":"YulFunctionCall","src":"5149:24:14"}],"functionName":{"name":"mstore","nativeSrc":"5137:6:14","nodeType":"YulIdentifier","src":"5137:6:14"},"nativeSrc":"5137:37:14","nodeType":"YulFunctionCall","src":"5137:37:14"},"nativeSrc":"5137:37:14","nodeType":"YulExpressionStatement","src":"5137:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"5062:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5115:5:14","nodeType":"YulTypedName","src":"5115:5:14","type":""},{"name":"pos","nativeSrc":"5122:3:14","nodeType":"YulTypedName","src":"5122:3:14","type":""}],"src":"5062:118:14"},{"body":{"nativeSrc":"5284:124:14","nodeType":"YulBlock","src":"5284:124:14","statements":[{"nativeSrc":"5294:26:14","nodeType":"YulAssignment","src":"5294:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"5306:9:14","nodeType":"YulIdentifier","src":"5306:9:14"},{"kind":"number","nativeSrc":"5317:2:14","nodeType":"YulLiteral","src":"5317:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5302:3:14","nodeType":"YulIdentifier","src":"5302:3:14"},"nativeSrc":"5302:18:14","nodeType":"YulFunctionCall","src":"5302:18:14"},"variableNames":[{"name":"tail","nativeSrc":"5294:4:14","nodeType":"YulIdentifier","src":"5294:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"5374:6:14","nodeType":"YulIdentifier","src":"5374:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"5387:9:14","nodeType":"YulIdentifier","src":"5387:9:14"},{"kind":"number","nativeSrc":"5398:1:14","nodeType":"YulLiteral","src":"5398:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"5383:3:14","nodeType":"YulIdentifier","src":"5383:3:14"},"nativeSrc":"5383:17:14","nodeType":"YulFunctionCall","src":"5383:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"5330:43:14","nodeType":"YulIdentifier","src":"5330:43:14"},"nativeSrc":"5330:71:14","nodeType":"YulFunctionCall","src":"5330:71:14"},"nativeSrc":"5330:71:14","nodeType":"YulExpressionStatement","src":"5330:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"5186:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5256:9:14","nodeType":"YulTypedName","src":"5256:9:14","type":""},{"name":"value0","nativeSrc":"5268:6:14","nodeType":"YulTypedName","src":"5268:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5279:4:14","nodeType":"YulTypedName","src":"5279:4:14","type":""}],"src":"5186:222:14"},{"body":{"nativeSrc":"5488:40:14","nodeType":"YulBlock","src":"5488:40:14","statements":[{"nativeSrc":"5499:22:14","nodeType":"YulAssignment","src":"5499:22:14","value":{"arguments":[{"name":"value","nativeSrc":"5515:5:14","nodeType":"YulIdentifier","src":"5515:5:14"}],"functionName":{"name":"mload","nativeSrc":"5509:5:14","nodeType":"YulIdentifier","src":"5509:5:14"},"nativeSrc":"5509:12:14","nodeType":"YulFunctionCall","src":"5509:12:14"},"variableNames":[{"name":"length","nativeSrc":"5499:6:14","nodeType":"YulIdentifier","src":"5499:6:14"}]}]},"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"5414:114:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5471:5:14","nodeType":"YulTypedName","src":"5471:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"5481:6:14","nodeType":"YulTypedName","src":"5481:6:14","type":""}],"src":"5414:114:14"},{"body":{"nativeSrc":"5645:73:14","nodeType":"YulBlock","src":"5645:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5662:3:14","nodeType":"YulIdentifier","src":"5662:3:14"},{"name":"length","nativeSrc":"5667:6:14","nodeType":"YulIdentifier","src":"5667:6:14"}],"functionName":{"name":"mstore","nativeSrc":"5655:6:14","nodeType":"YulIdentifier","src":"5655:6:14"},"nativeSrc":"5655:19:14","nodeType":"YulFunctionCall","src":"5655:19:14"},"nativeSrc":"5655:19:14","nodeType":"YulExpressionStatement","src":"5655:19:14"},{"nativeSrc":"5683:29:14","nodeType":"YulAssignment","src":"5683:29:14","value":{"arguments":[{"name":"pos","nativeSrc":"5702:3:14","nodeType":"YulIdentifier","src":"5702:3:14"},{"kind":"number","nativeSrc":"5707:4:14","nodeType":"YulLiteral","src":"5707:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5698:3:14","nodeType":"YulIdentifier","src":"5698:3:14"},"nativeSrc":"5698:14:14","nodeType":"YulFunctionCall","src":"5698:14:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"5683:11:14","nodeType":"YulIdentifier","src":"5683:11:14"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"5534:184:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"5617:3:14","nodeType":"YulTypedName","src":"5617:3:14","type":""},{"name":"length","nativeSrc":"5622:6:14","nodeType":"YulTypedName","src":"5622:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"5633:11:14","nodeType":"YulTypedName","src":"5633:11:14","type":""}],"src":"5534:184:14"},{"body":{"nativeSrc":"5796:60:14","nodeType":"YulBlock","src":"5796:60:14","statements":[{"nativeSrc":"5806:11:14","nodeType":"YulAssignment","src":"5806:11:14","value":{"name":"ptr","nativeSrc":"5814:3:14","nodeType":"YulIdentifier","src":"5814:3:14"},"variableNames":[{"name":"data","nativeSrc":"5806:4:14","nodeType":"YulIdentifier","src":"5806:4:14"}]},{"nativeSrc":"5827:22:14","nodeType":"YulAssignment","src":"5827:22:14","value":{"arguments":[{"name":"ptr","nativeSrc":"5839:3:14","nodeType":"YulIdentifier","src":"5839:3:14"},{"kind":"number","nativeSrc":"5844:4:14","nodeType":"YulLiteral","src":"5844:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5835:3:14","nodeType":"YulIdentifier","src":"5835:3:14"},"nativeSrc":"5835:14:14","nodeType":"YulFunctionCall","src":"5835:14:14"},"variableNames":[{"name":"data","nativeSrc":"5827:4:14","nodeType":"YulIdentifier","src":"5827:4:14"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"5724:132:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"5783:3:14","nodeType":"YulTypedName","src":"5783:3:14","type":""}],"returnVariables":[{"name":"data","nativeSrc":"5791:4:14","nodeType":"YulTypedName","src":"5791:4:14","type":""}],"src":"5724:132:14"},{"body":{"nativeSrc":"5917:53:14","nodeType":"YulBlock","src":"5917:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5934:3:14","nodeType":"YulIdentifier","src":"5934:3:14"},{"arguments":[{"name":"value","nativeSrc":"5957:5:14","nodeType":"YulIdentifier","src":"5957:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"5939:17:14","nodeType":"YulIdentifier","src":"5939:17:14"},"nativeSrc":"5939:24:14","nodeType":"YulFunctionCall","src":"5939:24:14"}],"functionName":{"name":"mstore","nativeSrc":"5927:6:14","nodeType":"YulIdentifier","src":"5927:6:14"},"nativeSrc":"5927:37:14","nodeType":"YulFunctionCall","src":"5927:37:14"},"nativeSrc":"5927:37:14","nodeType":"YulExpressionStatement","src":"5927:37:14"}]},"name":"abi_encode_t_address_to_t_address","nativeSrc":"5862:108:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5905:5:14","nodeType":"YulTypedName","src":"5905:5:14","type":""},{"name":"pos","nativeSrc":"5912:3:14","nodeType":"YulTypedName","src":"5912:3:14","type":""}],"src":"5862:108:14"},{"body":{"nativeSrc":"6056:99:14","nodeType":"YulBlock","src":"6056:99:14","statements":[{"expression":{"arguments":[{"name":"value0","nativeSrc":"6100:6:14","nodeType":"YulIdentifier","src":"6100:6:14"},{"name":"pos","nativeSrc":"6108:3:14","nodeType":"YulIdentifier","src":"6108:3:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nativeSrc":"6066:33:14","nodeType":"YulIdentifier","src":"6066:33:14"},"nativeSrc":"6066:46:14","nodeType":"YulFunctionCall","src":"6066:46:14"},"nativeSrc":"6066:46:14","nodeType":"YulExpressionStatement","src":"6066:46:14"},{"nativeSrc":"6121:28:14","nodeType":"YulAssignment","src":"6121:28:14","value":{"arguments":[{"name":"pos","nativeSrc":"6139:3:14","nodeType":"YulIdentifier","src":"6139:3:14"},{"kind":"number","nativeSrc":"6144:4:14","nodeType":"YulLiteral","src":"6144:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6135:3:14","nodeType":"YulIdentifier","src":"6135:3:14"},"nativeSrc":"6135:14:14","nodeType":"YulFunctionCall","src":"6135:14:14"},"variableNames":[{"name":"updatedPos","nativeSrc":"6121:10:14","nodeType":"YulIdentifier","src":"6121:10:14"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nativeSrc":"5976:179:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nativeSrc":"6029:6:14","nodeType":"YulTypedName","src":"6029:6:14","type":""},{"name":"pos","nativeSrc":"6037:3:14","nodeType":"YulTypedName","src":"6037:3:14","type":""}],"returnVariables":[{"name":"updatedPos","nativeSrc":"6045:10:14","nodeType":"YulTypedName","src":"6045:10:14","type":""}],"src":"5976:179:14"},{"body":{"nativeSrc":"6236:38:14","nodeType":"YulBlock","src":"6236:38:14","statements":[{"nativeSrc":"6246:22:14","nodeType":"YulAssignment","src":"6246:22:14","value":{"arguments":[{"name":"ptr","nativeSrc":"6258:3:14","nodeType":"YulIdentifier","src":"6258:3:14"},{"kind":"number","nativeSrc":"6263:4:14","nodeType":"YulLiteral","src":"6263:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6254:3:14","nodeType":"YulIdentifier","src":"6254:3:14"},"nativeSrc":"6254:14:14","nodeType":"YulFunctionCall","src":"6254:14:14"},"variableNames":[{"name":"next","nativeSrc":"6246:4:14","nodeType":"YulIdentifier","src":"6246:4:14"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"6161:113:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"6223:3:14","nodeType":"YulTypedName","src":"6223:3:14","type":""}],"returnVariables":[{"name":"next","nativeSrc":"6231:4:14","nodeType":"YulTypedName","src":"6231:4:14","type":""}],"src":"6161:113:14"},{"body":{"nativeSrc":"6434:608:14","nodeType":"YulBlock","src":"6434:608:14","statements":[{"nativeSrc":"6444:68:14","nodeType":"YulVariableDeclaration","src":"6444:68:14","value":{"arguments":[{"name":"value","nativeSrc":"6506:5:14","nodeType":"YulIdentifier","src":"6506:5:14"}],"functionName":{"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"6458:47:14","nodeType":"YulIdentifier","src":"6458:47:14"},"nativeSrc":"6458:54:14","nodeType":"YulFunctionCall","src":"6458:54:14"},"variables":[{"name":"length","nativeSrc":"6448:6:14","nodeType":"YulTypedName","src":"6448:6:14","type":""}]},{"nativeSrc":"6521:93:14","nodeType":"YulAssignment","src":"6521:93:14","value":{"arguments":[{"name":"pos","nativeSrc":"6602:3:14","nodeType":"YulIdentifier","src":"6602:3:14"},{"name":"length","nativeSrc":"6607:6:14","nodeType":"YulIdentifier","src":"6607:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"6528:73:14","nodeType":"YulIdentifier","src":"6528:73:14"},"nativeSrc":"6528:86:14","nodeType":"YulFunctionCall","src":"6528:86:14"},"variableNames":[{"name":"pos","nativeSrc":"6521:3:14","nodeType":"YulIdentifier","src":"6521:3:14"}]},{"nativeSrc":"6623:71:14","nodeType":"YulVariableDeclaration","src":"6623:71:14","value":{"arguments":[{"name":"value","nativeSrc":"6688:5:14","nodeType":"YulIdentifier","src":"6688:5:14"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"6638:49:14","nodeType":"YulIdentifier","src":"6638:49:14"},"nativeSrc":"6638:56:14","nodeType":"YulFunctionCall","src":"6638:56:14"},"variables":[{"name":"baseRef","nativeSrc":"6627:7:14","nodeType":"YulTypedName","src":"6627:7:14","type":""}]},{"nativeSrc":"6703:21:14","nodeType":"YulVariableDeclaration","src":"6703:21:14","value":{"name":"baseRef","nativeSrc":"6717:7:14","nodeType":"YulIdentifier","src":"6717:7:14"},"variables":[{"name":"srcPtr","nativeSrc":"6707:6:14","nodeType":"YulTypedName","src":"6707:6:14","type":""}]},{"body":{"nativeSrc":"6793:224:14","nodeType":"YulBlock","src":"6793:224:14","statements":[{"nativeSrc":"6807:34:14","nodeType":"YulVariableDeclaration","src":"6807:34:14","value":{"arguments":[{"name":"srcPtr","nativeSrc":"6834:6:14","nodeType":"YulIdentifier","src":"6834:6:14"}],"functionName":{"name":"mload","nativeSrc":"6828:5:14","nodeType":"YulIdentifier","src":"6828:5:14"},"nativeSrc":"6828:13:14","nodeType":"YulFunctionCall","src":"6828:13:14"},"variables":[{"name":"elementValue0","nativeSrc":"6811:13:14","nodeType":"YulTypedName","src":"6811:13:14","type":""}]},{"nativeSrc":"6854:70:14","nodeType":"YulAssignment","src":"6854:70:14","value":{"arguments":[{"name":"elementValue0","nativeSrc":"6905:13:14","nodeType":"YulIdentifier","src":"6905:13:14"},{"name":"pos","nativeSrc":"6920:3:14","nodeType":"YulIdentifier","src":"6920:3:14"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nativeSrc":"6861:43:14","nodeType":"YulIdentifier","src":"6861:43:14"},"nativeSrc":"6861:63:14","nodeType":"YulFunctionCall","src":"6861:63:14"},"variableNames":[{"name":"pos","nativeSrc":"6854:3:14","nodeType":"YulIdentifier","src":"6854:3:14"}]},{"nativeSrc":"6937:70:14","nodeType":"YulAssignment","src":"6937:70:14","value":{"arguments":[{"name":"srcPtr","nativeSrc":"7000:6:14","nodeType":"YulIdentifier","src":"7000:6:14"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"6947:52:14","nodeType":"YulIdentifier","src":"6947:52:14"},"nativeSrc":"6947:60:14","nodeType":"YulFunctionCall","src":"6947:60:14"},"variableNames":[{"name":"srcPtr","nativeSrc":"6937:6:14","nodeType":"YulIdentifier","src":"6937:6:14"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"6755:1:14","nodeType":"YulIdentifier","src":"6755:1:14"},{"name":"length","nativeSrc":"6758:6:14","nodeType":"YulIdentifier","src":"6758:6:14"}],"functionName":{"name":"lt","nativeSrc":"6752:2:14","nodeType":"YulIdentifier","src":"6752:2:14"},"nativeSrc":"6752:13:14","nodeType":"YulFunctionCall","src":"6752:13:14"},"nativeSrc":"6733:284:14","nodeType":"YulForLoop","post":{"nativeSrc":"6766:18:14","nodeType":"YulBlock","src":"6766:18:14","statements":[{"nativeSrc":"6768:14:14","nodeType":"YulAssignment","src":"6768:14:14","value":{"arguments":[{"name":"i","nativeSrc":"6777:1:14","nodeType":"YulIdentifier","src":"6777:1:14"},{"kind":"number","nativeSrc":"6780:1:14","nodeType":"YulLiteral","src":"6780:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6773:3:14","nodeType":"YulIdentifier","src":"6773:3:14"},"nativeSrc":"6773:9:14","nodeType":"YulFunctionCall","src":"6773:9:14"},"variableNames":[{"name":"i","nativeSrc":"6768:1:14","nodeType":"YulIdentifier","src":"6768:1:14"}]}]},"pre":{"nativeSrc":"6737:14:14","nodeType":"YulBlock","src":"6737:14:14","statements":[{"nativeSrc":"6739:10:14","nodeType":"YulVariableDeclaration","src":"6739:10:14","value":{"kind":"number","nativeSrc":"6748:1:14","nodeType":"YulLiteral","src":"6748:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"6743:1:14","nodeType":"YulTypedName","src":"6743:1:14","type":""}]}]},"src":"6733:284:14"},{"nativeSrc":"7026:10:14","nodeType":"YulAssignment","src":"7026:10:14","value":{"name":"pos","nativeSrc":"7033:3:14","nodeType":"YulIdentifier","src":"7033:3:14"},"variableNames":[{"name":"end","nativeSrc":"7026:3:14","nodeType":"YulIdentifier","src":"7026:3:14"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"6310:732:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6413:5:14","nodeType":"YulTypedName","src":"6413:5:14","type":""},{"name":"pos","nativeSrc":"6420:3:14","nodeType":"YulTypedName","src":"6420:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6429:3:14","nodeType":"YulTypedName","src":"6429:3:14","type":""}],"src":"6310:732:14"},{"body":{"nativeSrc":"7196:225:14","nodeType":"YulBlock","src":"7196:225:14","statements":[{"nativeSrc":"7206:26:14","nodeType":"YulAssignment","src":"7206:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"7218:9:14","nodeType":"YulIdentifier","src":"7218:9:14"},{"kind":"number","nativeSrc":"7229:2:14","nodeType":"YulLiteral","src":"7229:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7214:3:14","nodeType":"YulIdentifier","src":"7214:3:14"},"nativeSrc":"7214:18:14","nodeType":"YulFunctionCall","src":"7214:18:14"},"variableNames":[{"name":"tail","nativeSrc":"7206:4:14","nodeType":"YulIdentifier","src":"7206:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7253:9:14","nodeType":"YulIdentifier","src":"7253:9:14"},{"kind":"number","nativeSrc":"7264:1:14","nodeType":"YulLiteral","src":"7264:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7249:3:14","nodeType":"YulIdentifier","src":"7249:3:14"},"nativeSrc":"7249:17:14","nodeType":"YulFunctionCall","src":"7249:17:14"},{"arguments":[{"name":"tail","nativeSrc":"7272:4:14","nodeType":"YulIdentifier","src":"7272:4:14"},{"name":"headStart","nativeSrc":"7278:9:14","nodeType":"YulIdentifier","src":"7278:9:14"}],"functionName":{"name":"sub","nativeSrc":"7268:3:14","nodeType":"YulIdentifier","src":"7268:3:14"},"nativeSrc":"7268:20:14","nodeType":"YulFunctionCall","src":"7268:20:14"}],"functionName":{"name":"mstore","nativeSrc":"7242:6:14","nodeType":"YulIdentifier","src":"7242:6:14"},"nativeSrc":"7242:47:14","nodeType":"YulFunctionCall","src":"7242:47:14"},"nativeSrc":"7242:47:14","nodeType":"YulExpressionStatement","src":"7242:47:14"},{"nativeSrc":"7298:116:14","nodeType":"YulAssignment","src":"7298:116:14","value":{"arguments":[{"name":"value0","nativeSrc":"7400:6:14","nodeType":"YulIdentifier","src":"7400:6:14"},{"name":"tail","nativeSrc":"7409:4:14","nodeType":"YulIdentifier","src":"7409:4:14"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"7306:93:14","nodeType":"YulIdentifier","src":"7306:93:14"},"nativeSrc":"7306:108:14","nodeType":"YulFunctionCall","src":"7306:108:14"},"variableNames":[{"name":"tail","nativeSrc":"7298:4:14","nodeType":"YulIdentifier","src":"7298:4:14"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"7048:373:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7168:9:14","nodeType":"YulTypedName","src":"7168:9:14","type":""},{"name":"value0","nativeSrc":"7180:6:14","nodeType":"YulTypedName","src":"7180:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7191:4:14","nodeType":"YulTypedName","src":"7191:4:14","type":""}],"src":"7048:373:14"},{"body":{"nativeSrc":"7486:40:14","nodeType":"YulBlock","src":"7486:40:14","statements":[{"nativeSrc":"7497:22:14","nodeType":"YulAssignment","src":"7497:22:14","value":{"arguments":[{"name":"value","nativeSrc":"7513:5:14","nodeType":"YulIdentifier","src":"7513:5:14"}],"functionName":{"name":"mload","nativeSrc":"7507:5:14","nodeType":"YulIdentifier","src":"7507:5:14"},"nativeSrc":"7507:12:14","nodeType":"YulFunctionCall","src":"7507:12:14"},"variableNames":[{"name":"length","nativeSrc":"7497:6:14","nodeType":"YulIdentifier","src":"7497:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"7427:99:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7469:5:14","nodeType":"YulTypedName","src":"7469:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"7479:6:14","nodeType":"YulTypedName","src":"7479:6:14","type":""}],"src":"7427:99:14"},{"body":{"nativeSrc":"7628:73:14","nodeType":"YulBlock","src":"7628:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7645:3:14","nodeType":"YulIdentifier","src":"7645:3:14"},{"name":"length","nativeSrc":"7650:6:14","nodeType":"YulIdentifier","src":"7650:6:14"}],"functionName":{"name":"mstore","nativeSrc":"7638:6:14","nodeType":"YulIdentifier","src":"7638:6:14"},"nativeSrc":"7638:19:14","nodeType":"YulFunctionCall","src":"7638:19:14"},"nativeSrc":"7638:19:14","nodeType":"YulExpressionStatement","src":"7638:19:14"},{"nativeSrc":"7666:29:14","nodeType":"YulAssignment","src":"7666:29:14","value":{"arguments":[{"name":"pos","nativeSrc":"7685:3:14","nodeType":"YulIdentifier","src":"7685:3:14"},{"kind":"number","nativeSrc":"7690:4:14","nodeType":"YulLiteral","src":"7690:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7681:3:14","nodeType":"YulIdentifier","src":"7681:3:14"},"nativeSrc":"7681:14:14","nodeType":"YulFunctionCall","src":"7681:14:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"7666:11:14","nodeType":"YulIdentifier","src":"7666:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"7532:169:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"7600:3:14","nodeType":"YulTypedName","src":"7600:3:14","type":""},{"name":"length","nativeSrc":"7605:6:14","nodeType":"YulTypedName","src":"7605:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"7616:11:14","nodeType":"YulTypedName","src":"7616:11:14","type":""}],"src":"7532:169:14"},{"body":{"nativeSrc":"7769:184:14","nodeType":"YulBlock","src":"7769:184:14","statements":[{"nativeSrc":"7779:10:14","nodeType":"YulVariableDeclaration","src":"7779:10:14","value":{"kind":"number","nativeSrc":"7788:1:14","nodeType":"YulLiteral","src":"7788:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7783:1:14","nodeType":"YulTypedName","src":"7783:1:14","type":""}]},{"body":{"nativeSrc":"7848:63:14","nodeType":"YulBlock","src":"7848:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"7873:3:14","nodeType":"YulIdentifier","src":"7873:3:14"},{"name":"i","nativeSrc":"7878:1:14","nodeType":"YulIdentifier","src":"7878:1:14"}],"functionName":{"name":"add","nativeSrc":"7869:3:14","nodeType":"YulIdentifier","src":"7869:3:14"},"nativeSrc":"7869:11:14","nodeType":"YulFunctionCall","src":"7869:11:14"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"7892:3:14","nodeType":"YulIdentifier","src":"7892:3:14"},{"name":"i","nativeSrc":"7897:1:14","nodeType":"YulIdentifier","src":"7897:1:14"}],"functionName":{"name":"add","nativeSrc":"7888:3:14","nodeType":"YulIdentifier","src":"7888:3:14"},"nativeSrc":"7888:11:14","nodeType":"YulFunctionCall","src":"7888:11:14"}],"functionName":{"name":"mload","nativeSrc":"7882:5:14","nodeType":"YulIdentifier","src":"7882:5:14"},"nativeSrc":"7882:18:14","nodeType":"YulFunctionCall","src":"7882:18:14"}],"functionName":{"name":"mstore","nativeSrc":"7862:6:14","nodeType":"YulIdentifier","src":"7862:6:14"},"nativeSrc":"7862:39:14","nodeType":"YulFunctionCall","src":"7862:39:14"},"nativeSrc":"7862:39:14","nodeType":"YulExpressionStatement","src":"7862:39:14"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7809:1:14","nodeType":"YulIdentifier","src":"7809:1:14"},{"name":"length","nativeSrc":"7812:6:14","nodeType":"YulIdentifier","src":"7812:6:14"}],"functionName":{"name":"lt","nativeSrc":"7806:2:14","nodeType":"YulIdentifier","src":"7806:2:14"},"nativeSrc":"7806:13:14","nodeType":"YulFunctionCall","src":"7806:13:14"},"nativeSrc":"7798:113:14","nodeType":"YulForLoop","post":{"nativeSrc":"7820:19:14","nodeType":"YulBlock","src":"7820:19:14","statements":[{"nativeSrc":"7822:15:14","nodeType":"YulAssignment","src":"7822:15:14","value":{"arguments":[{"name":"i","nativeSrc":"7831:1:14","nodeType":"YulIdentifier","src":"7831:1:14"},{"kind":"number","nativeSrc":"7834:2:14","nodeType":"YulLiteral","src":"7834:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7827:3:14","nodeType":"YulIdentifier","src":"7827:3:14"},"nativeSrc":"7827:10:14","nodeType":"YulFunctionCall","src":"7827:10:14"},"variableNames":[{"name":"i","nativeSrc":"7822:1:14","nodeType":"YulIdentifier","src":"7822:1:14"}]}]},"pre":{"nativeSrc":"7802:3:14","nodeType":"YulBlock","src":"7802:3:14","statements":[]},"src":"7798:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"7931:3:14","nodeType":"YulIdentifier","src":"7931:3:14"},{"name":"length","nativeSrc":"7936:6:14","nodeType":"YulIdentifier","src":"7936:6:14"}],"functionName":{"name":"add","nativeSrc":"7927:3:14","nodeType":"YulIdentifier","src":"7927:3:14"},"nativeSrc":"7927:16:14","nodeType":"YulFunctionCall","src":"7927:16:14"},{"kind":"number","nativeSrc":"7945:1:14","nodeType":"YulLiteral","src":"7945:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"7920:6:14","nodeType":"YulIdentifier","src":"7920:6:14"},"nativeSrc":"7920:27:14","nodeType":"YulFunctionCall","src":"7920:27:14"},"nativeSrc":"7920:27:14","nodeType":"YulExpressionStatement","src":"7920:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"7707:246:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"7751:3:14","nodeType":"YulTypedName","src":"7751:3:14","type":""},{"name":"dst","nativeSrc":"7756:3:14","nodeType":"YulTypedName","src":"7756:3:14","type":""},{"name":"length","nativeSrc":"7761:6:14","nodeType":"YulTypedName","src":"7761:6:14","type":""}],"src":"7707:246:14"},{"body":{"nativeSrc":"8051:285:14","nodeType":"YulBlock","src":"8051:285:14","statements":[{"nativeSrc":"8061:53:14","nodeType":"YulVariableDeclaration","src":"8061:53:14","value":{"arguments":[{"name":"value","nativeSrc":"8108:5:14","nodeType":"YulIdentifier","src":"8108:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"8075:32:14","nodeType":"YulIdentifier","src":"8075:32:14"},"nativeSrc":"8075:39:14","nodeType":"YulFunctionCall","src":"8075:39:14"},"variables":[{"name":"length","nativeSrc":"8065:6:14","nodeType":"YulTypedName","src":"8065:6:14","type":""}]},{"nativeSrc":"8123:78:14","nodeType":"YulAssignment","src":"8123:78:14","value":{"arguments":[{"name":"pos","nativeSrc":"8189:3:14","nodeType":"YulIdentifier","src":"8189:3:14"},{"name":"length","nativeSrc":"8194:6:14","nodeType":"YulIdentifier","src":"8194:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"8130:58:14","nodeType":"YulIdentifier","src":"8130:58:14"},"nativeSrc":"8130:71:14","nodeType":"YulFunctionCall","src":"8130:71:14"},"variableNames":[{"name":"pos","nativeSrc":"8123:3:14","nodeType":"YulIdentifier","src":"8123:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8249:5:14","nodeType":"YulIdentifier","src":"8249:5:14"},{"kind":"number","nativeSrc":"8256:4:14","nodeType":"YulLiteral","src":"8256:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8245:3:14","nodeType":"YulIdentifier","src":"8245:3:14"},"nativeSrc":"8245:16:14","nodeType":"YulFunctionCall","src":"8245:16:14"},{"name":"pos","nativeSrc":"8263:3:14","nodeType":"YulIdentifier","src":"8263:3:14"},{"name":"length","nativeSrc":"8268:6:14","nodeType":"YulIdentifier","src":"8268:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"8210:34:14","nodeType":"YulIdentifier","src":"8210:34:14"},"nativeSrc":"8210:65:14","nodeType":"YulFunctionCall","src":"8210:65:14"},"nativeSrc":"8210:65:14","nodeType":"YulExpressionStatement","src":"8210:65:14"},{"nativeSrc":"8284:46:14","nodeType":"YulAssignment","src":"8284:46:14","value":{"arguments":[{"name":"pos","nativeSrc":"8295:3:14","nodeType":"YulIdentifier","src":"8295:3:14"},{"arguments":[{"name":"length","nativeSrc":"8322:6:14","nodeType":"YulIdentifier","src":"8322:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"8300:21:14","nodeType":"YulIdentifier","src":"8300:21:14"},"nativeSrc":"8300:29:14","nodeType":"YulFunctionCall","src":"8300:29:14"}],"functionName":{"name":"add","nativeSrc":"8291:3:14","nodeType":"YulIdentifier","src":"8291:3:14"},"nativeSrc":"8291:39:14","nodeType":"YulFunctionCall","src":"8291:39:14"},"variableNames":[{"name":"end","nativeSrc":"8284:3:14","nodeType":"YulIdentifier","src":"8284:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"7959:377:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8032:5:14","nodeType":"YulTypedName","src":"8032:5:14","type":""},{"name":"pos","nativeSrc":"8039:3:14","nodeType":"YulTypedName","src":"8039:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8047:3:14","nodeType":"YulTypedName","src":"8047:3:14","type":""}],"src":"7959:377:14"},{"body":{"nativeSrc":"8584:584:14","nodeType":"YulBlock","src":"8584:584:14","statements":[{"nativeSrc":"8594:27:14","nodeType":"YulAssignment","src":"8594:27:14","value":{"arguments":[{"name":"headStart","nativeSrc":"8606:9:14","nodeType":"YulIdentifier","src":"8606:9:14"},{"kind":"number","nativeSrc":"8617:3:14","nodeType":"YulLiteral","src":"8617:3:14","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8602:3:14","nodeType":"YulIdentifier","src":"8602:3:14"},"nativeSrc":"8602:19:14","nodeType":"YulFunctionCall","src":"8602:19:14"},"variableNames":[{"name":"tail","nativeSrc":"8594:4:14","nodeType":"YulIdentifier","src":"8594:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"8675:6:14","nodeType":"YulIdentifier","src":"8675:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"8688:9:14","nodeType":"YulIdentifier","src":"8688:9:14"},{"kind":"number","nativeSrc":"8699:1:14","nodeType":"YulLiteral","src":"8699:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"8684:3:14","nodeType":"YulIdentifier","src":"8684:3:14"},"nativeSrc":"8684:17:14","nodeType":"YulFunctionCall","src":"8684:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"8631:43:14","nodeType":"YulIdentifier","src":"8631:43:14"},"nativeSrc":"8631:71:14","nodeType":"YulFunctionCall","src":"8631:71:14"},"nativeSrc":"8631:71:14","nodeType":"YulExpressionStatement","src":"8631:71:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8723:9:14","nodeType":"YulIdentifier","src":"8723:9:14"},{"kind":"number","nativeSrc":"8734:2:14","nodeType":"YulLiteral","src":"8734:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8719:3:14","nodeType":"YulIdentifier","src":"8719:3:14"},"nativeSrc":"8719:18:14","nodeType":"YulFunctionCall","src":"8719:18:14"},{"arguments":[{"name":"tail","nativeSrc":"8743:4:14","nodeType":"YulIdentifier","src":"8743:4:14"},{"name":"headStart","nativeSrc":"8749:9:14","nodeType":"YulIdentifier","src":"8749:9:14"}],"functionName":{"name":"sub","nativeSrc":"8739:3:14","nodeType":"YulIdentifier","src":"8739:3:14"},"nativeSrc":"8739:20:14","nodeType":"YulFunctionCall","src":"8739:20:14"}],"functionName":{"name":"mstore","nativeSrc":"8712:6:14","nodeType":"YulIdentifier","src":"8712:6:14"},"nativeSrc":"8712:48:14","nodeType":"YulFunctionCall","src":"8712:48:14"},"nativeSrc":"8712:48:14","nodeType":"YulExpressionStatement","src":"8712:48:14"},{"nativeSrc":"8769:86:14","nodeType":"YulAssignment","src":"8769:86:14","value":{"arguments":[{"name":"value1","nativeSrc":"8841:6:14","nodeType":"YulIdentifier","src":"8841:6:14"},{"name":"tail","nativeSrc":"8850:4:14","nodeType":"YulIdentifier","src":"8850:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"8777:63:14","nodeType":"YulIdentifier","src":"8777:63:14"},"nativeSrc":"8777:78:14","nodeType":"YulFunctionCall","src":"8777:78:14"},"variableNames":[{"name":"tail","nativeSrc":"8769:4:14","nodeType":"YulIdentifier","src":"8769:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8876:9:14","nodeType":"YulIdentifier","src":"8876:9:14"},{"kind":"number","nativeSrc":"8887:2:14","nodeType":"YulLiteral","src":"8887:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8872:3:14","nodeType":"YulIdentifier","src":"8872:3:14"},"nativeSrc":"8872:18:14","nodeType":"YulFunctionCall","src":"8872:18:14"},{"arguments":[{"name":"tail","nativeSrc":"8896:4:14","nodeType":"YulIdentifier","src":"8896:4:14"},{"name":"headStart","nativeSrc":"8902:9:14","nodeType":"YulIdentifier","src":"8902:9:14"}],"functionName":{"name":"sub","nativeSrc":"8892:3:14","nodeType":"YulIdentifier","src":"8892:3:14"},"nativeSrc":"8892:20:14","nodeType":"YulFunctionCall","src":"8892:20:14"}],"functionName":{"name":"mstore","nativeSrc":"8865:6:14","nodeType":"YulIdentifier","src":"8865:6:14"},"nativeSrc":"8865:48:14","nodeType":"YulFunctionCall","src":"8865:48:14"},"nativeSrc":"8865:48:14","nodeType":"YulExpressionStatement","src":"8865:48:14"},{"nativeSrc":"8922:86:14","nodeType":"YulAssignment","src":"8922:86:14","value":{"arguments":[{"name":"value2","nativeSrc":"8994:6:14","nodeType":"YulIdentifier","src":"8994:6:14"},{"name":"tail","nativeSrc":"9003:4:14","nodeType":"YulIdentifier","src":"9003:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"8930:63:14","nodeType":"YulIdentifier","src":"8930:63:14"},"nativeSrc":"8930:78:14","nodeType":"YulFunctionCall","src":"8930:78:14"},"variableNames":[{"name":"tail","nativeSrc":"8922:4:14","nodeType":"YulIdentifier","src":"8922:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9029:9:14","nodeType":"YulIdentifier","src":"9029:9:14"},{"kind":"number","nativeSrc":"9040:2:14","nodeType":"YulLiteral","src":"9040:2:14","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9025:3:14","nodeType":"YulIdentifier","src":"9025:3:14"},"nativeSrc":"9025:18:14","nodeType":"YulFunctionCall","src":"9025:18:14"},{"arguments":[{"name":"tail","nativeSrc":"9049:4:14","nodeType":"YulIdentifier","src":"9049:4:14"},{"name":"headStart","nativeSrc":"9055:9:14","nodeType":"YulIdentifier","src":"9055:9:14"}],"functionName":{"name":"sub","nativeSrc":"9045:3:14","nodeType":"YulIdentifier","src":"9045:3:14"},"nativeSrc":"9045:20:14","nodeType":"YulFunctionCall","src":"9045:20:14"}],"functionName":{"name":"mstore","nativeSrc":"9018:6:14","nodeType":"YulIdentifier","src":"9018:6:14"},"nativeSrc":"9018:48:14","nodeType":"YulFunctionCall","src":"9018:48:14"},"nativeSrc":"9018:48:14","nodeType":"YulExpressionStatement","src":"9018:48:14"},{"nativeSrc":"9075:86:14","nodeType":"YulAssignment","src":"9075:86:14","value":{"arguments":[{"name":"value3","nativeSrc":"9147:6:14","nodeType":"YulIdentifier","src":"9147:6:14"},{"name":"tail","nativeSrc":"9156:4:14","nodeType":"YulIdentifier","src":"9156:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"9083:63:14","nodeType":"YulIdentifier","src":"9083:63:14"},"nativeSrc":"9083:78:14","nodeType":"YulFunctionCall","src":"9083:78:14"},"variableNames":[{"name":"tail","nativeSrc":"9075:4:14","nodeType":"YulIdentifier","src":"9075:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_address_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"8342:826:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8532:9:14","nodeType":"YulTypedName","src":"8532:9:14","type":""},{"name":"value3","nativeSrc":"8544:6:14","nodeType":"YulTypedName","src":"8544:6:14","type":""},{"name":"value2","nativeSrc":"8552:6:14","nodeType":"YulTypedName","src":"8552:6:14","type":""},{"name":"value1","nativeSrc":"8560:6:14","nodeType":"YulTypedName","src":"8560:6:14","type":""},{"name":"value0","nativeSrc":"8568:6:14","nodeType":"YulTypedName","src":"8568:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8579:4:14","nodeType":"YulTypedName","src":"8579:4:14","type":""}],"src":"8342:826:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__to_t_address_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060043610620000455760003560e01c8062a48f58146200004a5780638a9d179e146200006a578063aa9a068f14620000a0575b600080fd5b6200006860048036038101906200006291906200046b565b620000c2565b005b62000088600480360381019062000082919062000575565b620001b2565b604051620000979190620005b8565b60405180910390f35b620000aa620001f2565b604051620000b99190620006a3565b60405180910390f35b600084848484604051620000d69062000282565b620000e5949392919062000750565b604051809103906000f08015801562000102573d6000803e3d6000fd5b5090506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f8ffcdc15a283d706d38281f500270d8b5a656918f555de0913d7455e3e6bc1bf60405160405180910390a25050505050565b60008181548110620001c357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200027857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200022d575b5050505050905090565b61371480620007b383390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002d182620002a4565b9050919050565b620002e381620002c4565b8114620002ef57600080fd5b50565b6000813590506200030381620002d8565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200035e8262000313565b810181811067ffffffffffffffff8211171562000380576200037f62000324565b5b80604052505050565b60006200039562000290565b9050620003a3828262000353565b919050565b600067ffffffffffffffff821115620003c657620003c562000324565b5b620003d18262000313565b9050602081019050919050565b82818337600083830152505050565b600062000404620003fe84620003a8565b62000389565b9050828152602081018484840111156200042357620004226200030e565b5b62000430848285620003de565b509392505050565b600082601f83011262000450576200044f62000309565b5b813562000462848260208601620003ed565b91505092915050565b600080600080608085870312156200048857620004876200029a565b5b60006200049887828801620002f2565b945050602085013567ffffffffffffffff811115620004bc57620004bb6200029f565b5b620004ca8782880162000438565b935050604085013567ffffffffffffffff811115620004ee57620004ed6200029f565b5b620004fc8782880162000438565b925050606085013567ffffffffffffffff81111562000520576200051f6200029f565b5b6200052e8782880162000438565b91505092959194509250565b6000819050919050565b6200054f816200053a565b81146200055b57600080fd5b50565b6000813590506200056f8162000544565b92915050565b6000602082840312156200058e576200058d6200029a565b5b60006200059e848285016200055e565b91505092915050565b620005b281620002c4565b82525050565b6000602082019050620005cf6000830184620005a7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200060c81620002c4565b82525050565b600062000620838362000601565b60208301905092915050565b6000602082019050919050565b60006200064682620005d5565b620006528185620005e0565b93506200065f83620005f1565b8060005b83811015620006965781516200067a888262000612565b975062000687836200062c565b92505060018101905062000663565b5085935050505092915050565b60006020820190508181036000830152620006bf818462000639565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000703578082015181840152602081019050620006e6565b60008484015250505050565b60006200071c82620006c7565b620007288185620006d2565b93506200073a818560208601620006e3565b620007458162000313565b840191505092915050565b6000608082019050620007676000830187620005a7565b81810360208301526200077b81866200070f565b905081810360408301526200079181856200070f565b90508181036060830152620007a781846200070f565b90509594505050505056fe60806040523480156200001157600080fd5b5060405162003714380380620037148339818101604052810190620000379190620003dc565b83838381600090816200004b9190620006f6565b5080600190816200005d9190620006f6565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000cc9190620007ee565b60405180910390fd5b620000e6816200011e60201b60201c565b508060089081620000f89190620006f6565b506001600c60006101000a81548160ff021916908315150217905550505050506200080b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022582620001f8565b9050919050565b620002378162000218565b81146200024357600080fd5b50565b60008151905062000257816200022c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b28262000267565b810181811067ffffffffffffffff82111715620002d457620002d362000278565b5b80604052505050565b6000620002e9620001e4565b9050620002f78282620002a7565b919050565b600067ffffffffffffffff8211156200031a576200031962000278565b5b620003258262000267565b9050602081019050919050565b60005b838110156200035257808201518184015260208101905062000335565b60008484015250505050565b6000620003756200036f84620002fc565b620002dd565b90508281526020810184848401111562000394576200039362000262565b5b620003a184828562000332565b509392505050565b600082601f830112620003c157620003c06200025d565b5b8151620003d38482602086016200035e565b91505092915050565b60008060008060808587031215620003f957620003f8620001ee565b5b6000620004098782880162000246565b945050602085015167ffffffffffffffff8111156200042d576200042c620001f3565b5b6200043b87828801620003a9565b935050604085015167ffffffffffffffff8111156200045f576200045e620001f3565b5b6200046d87828801620003a9565b925050606085015167ffffffffffffffff811115620004915762000490620001f3565b5b6200049f87828801620003a9565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004fe57607f821691505b602082108103620005145762000513620004b6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200057e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200053f565b6200058a86836200053f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005d7620005d1620005cb84620005a2565b620005ac565b620005a2565b9050919050565b6000819050919050565b620005f383620005b6565b6200060b6200060282620005de565b8484546200054c565b825550505050565b600090565b6200062262000613565b6200062f818484620005e8565b505050565b5b8181101562000657576200064b60008262000618565b60018101905062000635565b5050565b601f821115620006a65762000670816200051a565b6200067b846200052f565b810160208510156200068b578190505b620006a36200069a856200052f565b83018262000634565b50505b505050565b600082821c905092915050565b6000620006cb60001984600802620006ab565b1980831691505092915050565b6000620006e68383620006b8565b9150826002028217905092915050565b6200070182620004ab565b67ffffffffffffffff8111156200071d576200071c62000278565b5b620007298254620004e5565b620007368282856200065b565b600060209050601f8311600181146200076e576000841562000759578287015190505b620007658582620006d8565b865550620007d5565b601f1984166200077e866200051a565b60005b82811015620007a85784890151825560018201915060208501945060208101905062000781565b86831015620007c85784890151620007c4601f891682620006b8565b8355505b6001600288020188555050505b505050505050565b620007e88162000218565b82525050565b6000602082019050620008056000830184620007dd565b92915050565b612ef9806200081b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de5780639b4f7b2011610097578063bf96ae6311610071578063bf96ae6314610414578063c87b56dd1461041e578063e985e9c51461044e578063f2fde38b1461047e57610173565b80639b4f7b20146103d2578063a22cb465146103dc578063b88d4fde146103f857610173565b806370a0823114610320578063715018a6146103505780637824407f1461035a5780638af05318146103785780638da5cb5b1461039657806395d89b41146103b457610173565b806330bee0f11161013057806330bee0f11461025e57806340d097c31461027c57806342842e0e1461029857806354a18d57146102b45780635fe8e7cc146102d25780636352211e146102f057610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f657806323b872dd146102125780632a11ced01461022e575b600080fd5b610192600480360381019061018d91906122ac565b61049a565b60405161019f91906122f4565b60405180910390f35b6101b061057c565b6040516101bd919061239f565b60405180910390f35b6101e060048036038101906101db91906123f7565b61060e565b6040516101ed9190612465565b60405180910390f35b610210600480360381019061020b91906124ac565b61062a565b005b61022c600480360381019061022791906124ec565b610640565b005b610248600480360381019061024391906123f7565b6107ed565b6040516102559190612465565b60405180910390f35b61026661082c565b60405161027391906122f4565b60405180910390f35b6102966004803603810190610291919061253f565b61083f565b005b6102b260048036038101906102ad91906124ec565b610a17565b005b6102bc610a37565b6040516102c9919061239f565b60405180910390f35b6102da610ac5565b6040516102e7919061262a565b60405180910390f35b61030a600480360381019061030591906123f7565b610b53565b6040516103179190612465565b60405180910390f35b61033a6004803603810190610335919061253f565b610b65565b604051610347919061265b565b60405180910390f35b610358610c1f565b005b610362610c33565b60405161036f919061265b565b60405180910390f35b610380610c39565b60405161038d919061265b565b60405180910390f35b61039e610c3f565b6040516103ab9190612465565b60405180910390f35b6103bc610c69565b6040516103c9919061239f565b60405180910390f35b6103da610cfb565b005b6103f660048036038101906103f191906126a2565b610d2f565b005b610412600480360381019061040d9190612817565b610d45565b005b61041c610d62565b005b610438600480360381019061043391906123f7565b610eb0565b604051610445919061239f565b60405180910390f35b6104686004803603810190610463919061289a565b610f19565b60405161047591906122f4565b60405180910390f35b6104986004803603810190610493919061253f565b610fad565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610575575061057482611033565b5b9050919050565b60606000805461058b90612909565b80601f01602080910402602001604051908101604052809291908181526020018280546105b790612909565b80156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b5050505050905090565b60006106198261109d565b5061062382611125565b9050919050565b61063c8282610637611162565b61116a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906129ac565b60405180910390fd5b60006106ba83610b65565b146106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190612a18565b60405180910390fd5b600161070584610b65565b03610714576107138361117c565b5b600061071f83610b65565b036107dd57600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506107999190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6107e8838383611344565b505050565b600b81815481106107fd57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900460ff1681565b610847611446565b600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ca90612ae7565b60405180910390fd5b60006108de82610b65565b1461091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590612b53565b60405180910390fd5b60006007600081548092919061093390612b73565b91905055905061094382826114cd565b6009600081548092919061095690612b73565b9190505550600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506109d09190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610a3283838360405180602001604052806000815250610d45565b505050565b60088054610a4490612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7090612909565b8015610abd5780601f10610a9257610100808354040283529160200191610abd565b820191906000526020600020905b815481529060010190602001808311610aa057829003601f168201915b505050505081565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b4957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aff575b5050505050905090565b6000610b5e8261109d565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bd85760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610bcf9190612465565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c27611446565b610c3160006114eb565b565b60095481565b600a5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610c7890612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490612909565b8015610cf15780601f10610cc657610100808354040283529160200191610cf1565b820191906000526020600020905b815481529060010190602001808311610cd457829003601f168201915b5050505050905090565b610d03611446565b600c60009054906101000a900460ff1615600c60006101000a81548160ff021916908315150217905550565b610d41610d3a611162565b83836115b1565b5050565b610d50848484610640565b610d5c84848484611720565b50505050565b600c60009054906101000a900460ff16610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da890612c07565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3590612c73565b60405180910390fd5b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600a6000815480929190610ea990612b73565b9190505550565b6060610ebb8261109d565b506000610ec66118d7565b90506000815111610ee65760405180602001604052806000815250610f11565b80610ef084611969565b604051602001610f01929190612ccf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610fb5611446565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110275760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161101e9190612465565b60405180910390fd5b611030816114eb565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806110a983611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111c57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611113919061265b565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6111778383836001611a74565b505050565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b6001600b805490506111d69190612a67565b815481106111e7576111e6612cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600b838154811061122957611228612cf3565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b8054806112c7576112c6612d22565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113b65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113ad9190612465565b60405180910390fd5b60006113ca83836113c5611162565b611c39565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611440578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161143793929190612d51565b60405180910390fd5b50505050565b61144e611162565b73ffffffffffffffffffffffffffffffffffffffff1661146c610c3f565b73ffffffffffffffffffffffffffffffffffffffff16146114cb5761148f611162565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114c29190612465565b60405180910390fd5b565b6114e7828260405180602001604052806000815250611e53565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162257816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016116199190612465565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171391906122f4565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156118d1578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611764611162565b8685856040518563ffffffff1660e01b81526004016117869493929190612ddd565b6020604051808303816000875af19250505080156117c257506040513d601f19601f820116820180604052508101906117bf9190612e3e565b60015b611846573d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50600081510361183e57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118359190612465565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146118cf57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118c69190612465565b60405180910390fd5b505b50505050565b6060600880546118e690612909565b80601f016020809104026020016040519081016040528092919081815260200182805461191290612909565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b5050505050905090565b60606000600161197884611e6f565b01905060008167ffffffffffffffff811115611997576119966126ec565b5b6040519080825280601f01601f1916602001820160405280156119c95781602001600182028036833780820191505090505b509050600082602001820190505b600115611a2c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a2057611a1f612e6b565b5b049450600085036119d7575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611aad5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611be1576000611abd8461109d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b2857508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611b3b5750611b398184610f19565b155b15611b7d57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611b749190612465565b60405180910390fd5b8115611bdf57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600080611c4584611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c8757611c86818486611fc2565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d1857611cc9600085600080611a74565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611d9b576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b611e5d8383612086565b611e6a6000848484611720565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ecd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ec357611ec2612e6b565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f0a576d04ee2d6d415b85acef81000000008381611f0057611eff612e6b565b5b0492506020810190505b662386f26fc100008310611f3957662386f26fc100008381611f2f57611f2e612e6b565b5b0492506010810190505b6305f5e1008310611f62576305f5e1008381611f5857611f57612e6b565b5b0492506008810190505b6127108310611f87576127108381611f7d57611f7c612e6b565b5b0492506004810190505b60648310611faa5760648381611fa057611f9f612e6b565b5b0492506002810190505b600a8310611fb9576001810190505b80915050919050565b611fcd83838361217f565b61208157600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361204257806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612039919061265b565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612078929190612e9a565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120f85760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016120ef9190612465565b60405180910390fd5b600061210683836000611c39565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461217a5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016121719190612465565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561223757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806121f857506121f78484610f19565b5b8061223657508273ffffffffffffffffffffffffffffffffffffffff1661221e83611125565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61228981612254565b811461229457600080fd5b50565b6000813590506122a681612280565b92915050565b6000602082840312156122c2576122c161224a565b5b60006122d084828501612297565b91505092915050565b60008115159050919050565b6122ee816122d9565b82525050565b600060208201905061230960008301846122e5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561234957808201518184015260208101905061232e565b60008484015250505050565b6000601f19601f8301169050919050565b60006123718261230f565b61237b818561231a565b935061238b81856020860161232b565b61239481612355565b840191505092915050565b600060208201905081810360008301526123b98184612366565b905092915050565b6000819050919050565b6123d4816123c1565b81146123df57600080fd5b50565b6000813590506123f1816123cb565b92915050565b60006020828403121561240d5761240c61224a565b5b600061241b848285016123e2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244f82612424565b9050919050565b61245f81612444565b82525050565b600060208201905061247a6000830184612456565b92915050565b61248981612444565b811461249457600080fd5b50565b6000813590506124a681612480565b92915050565b600080604083850312156124c3576124c261224a565b5b60006124d185828601612497565b92505060206124e2858286016123e2565b9150509250929050565b6000806000606084860312156125055761250461224a565b5b600061251386828701612497565b935050602061252486828701612497565b9250506040612535868287016123e2565b9150509250925092565b6000602082840312156125555761255461224a565b5b600061256384828501612497565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125a181612444565b82525050565b60006125b38383612598565b60208301905092915050565b6000602082019050919050565b60006125d78261256c565b6125e18185612577565b93506125ec83612588565b8060005b8381101561261d57815161260488826125a7565b975061260f836125bf565b9250506001810190506125f0565b5085935050505092915050565b6000602082019050818103600083015261264481846125cc565b905092915050565b612655816123c1565b82525050565b6000602082019050612670600083018461264c565b92915050565b61267f816122d9565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b600080604083850312156126b9576126b861224a565b5b60006126c785828601612497565b92505060206126d88582860161268d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61272482612355565b810181811067ffffffffffffffff82111715612743576127426126ec565b5b80604052505050565b6000612756612240565b9050612762828261271b565b919050565b600067ffffffffffffffff821115612782576127816126ec565b5b61278b82612355565b9050602081019050919050565b82818337600083830152505050565b60006127ba6127b584612767565b61274c565b9050828152602081018484840111156127d6576127d56126e7565b5b6127e1848285612798565b509392505050565b600082601f8301126127fe576127fd6126e2565b5b813561280e8482602086016127a7565b91505092915050565b600080600080608085870312156128315761283061224a565b5b600061283f87828801612497565b945050602061285087828801612497565b9350506040612861878288016123e2565b925050606085013567ffffffffffffffff8111156128825761288161224f565b5b61288e878288016127e9565b91505092959194509250565b600080604083850312156128b1576128b061224a565b5b60006128bf85828601612497565b92505060206128d085828601612497565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061292157607f821691505b602082108103612934576129336128da565b5b50919050565b7f43616e6e6f74207472616e7366657220746f2061207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061299660218361231a565b91506129a18261293a565b604082019050919050565b600060208201905081810360008301526129c581612989565b9050919050565b7f526563697069656e7420616c7265616479206f776e73206120504f4150000000600082015250565b6000612a02601d8361231a565b9150612a0d826129cc565b602082019050919050565b60006020820190508181036000830152612a31816129f5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a72826123c1565b9150612a7d836123c1565b9250828203905081811115612a9557612a94612a38565b5b92915050565b7f4164647265737320686173206e6f74207369676e65642075702e000000000000600082015250565b6000612ad1601a8361231a565b9150612adc82612a9b565b602082019050919050565b60006020820190508181036000830152612b0081612ac4565b9050919050565b7f4164647265737320616c7265616479206f776e73206120504f41500000000000600082015250565b6000612b3d601b8361231a565b9150612b4882612b07565b602082019050919050565b60006020820190508181036000830152612b6c81612b30565b9050919050565b6000612b7e826123c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bb057612baf612a38565b5b600182019050919050565b7f5369676e2d757073206172652063757272656e746c792064697361626c65642e600082015250565b6000612bf160208361231a565b9150612bfc82612bbb565b602082019050919050565b60006020820190508181036000830152612c2081612be4565b9050919050565b7f596f75206861766520616c7265616479207369676e65642075702e0000000000600082015250565b6000612c5d601b8361231a565b9150612c6882612c27565b602082019050919050565b60006020820190508181036000830152612c8c81612c50565b9050919050565b600081905092915050565b6000612ca98261230f565b612cb38185612c93565b9350612cc381856020860161232b565b80840191505092915050565b6000612cdb8285612c9e565b9150612ce78284612c9e565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000606082019050612d666000830186612456565b612d73602083018561264c565b612d806040830184612456565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000612daf82612d88565b612db98185612d93565b9350612dc981856020860161232b565b612dd281612355565b840191505092915050565b6000608082019050612df26000830187612456565b612dff6020830186612456565b612e0c604083018561264c565b8181036060830152612e1e8184612da4565b905095945050505050565b600081519050612e3881612280565b92915050565b600060208284031215612e5457612e5361224a565b5b6000612e6284828501612e29565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000604082019050612eaf6000830185612456565b612ebc602083018461264c565b939250505056fea26469706673582212206dd576b79bb2ce0b45bc0be17068c095cc92612d30c302fb67e1b387076e2d8e64736f6c63430008180033a2646970667358221220fe5c5f8067ce9cc16a08ef78c12316a16d6dc58aea06c79dbaf00dfd29bd75de64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x45 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xA48F58 EQ PUSH3 0x4A JUMPI DUP1 PUSH4 0x8A9D179E EQ PUSH3 0x6A JUMPI DUP1 PUSH4 0xAA9A068F EQ PUSH3 0xA0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x68 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x62 SWAP2 SWAP1 PUSH3 0x46B JUMP JUMPDEST PUSH3 0xC2 JUMP JUMPDEST STOP JUMPDEST PUSH3 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x82 SWAP2 SWAP1 PUSH3 0x575 JUMP JUMPDEST PUSH3 0x1B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x97 SWAP2 SWAP1 PUSH3 0x5B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xAA PUSH3 0x1F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xB9 SWAP2 SWAP1 PUSH3 0x6A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0xD6 SWAP1 PUSH3 0x282 JUMP JUMPDEST PUSH3 0xE5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x750 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x102 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8FFCDC15A283D706D38281F500270D8B5A656918F555DE0913D7455E3E6BC1BF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH3 0x278 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH3 0x22D JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3714 DUP1 PUSH3 0x7B3 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2D1 DUP3 PUSH3 0x2A4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2E3 DUP2 PUSH3 0x2C4 JUMP JUMPDEST DUP2 EQ PUSH3 0x2EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x303 DUP2 PUSH3 0x2D8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x35E DUP3 PUSH3 0x313 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x380 JUMPI PUSH3 0x37F PUSH3 0x324 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x395 PUSH3 0x290 JUMP JUMPDEST SWAP1 POP PUSH3 0x3A3 DUP3 DUP3 PUSH3 0x353 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x3C6 JUMPI PUSH3 0x3C5 PUSH3 0x324 JUMP JUMPDEST JUMPDEST PUSH3 0x3D1 DUP3 PUSH3 0x313 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x404 PUSH3 0x3FE DUP5 PUSH3 0x3A8 JUMP JUMPDEST PUSH3 0x389 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x423 JUMPI PUSH3 0x422 PUSH3 0x30E JUMP JUMPDEST JUMPDEST PUSH3 0x430 DUP5 DUP3 DUP6 PUSH3 0x3DE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x450 JUMPI PUSH3 0x44F PUSH3 0x309 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0x462 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x3ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x488 JUMPI PUSH3 0x487 PUSH3 0x29A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x498 DUP8 DUP3 DUP9 ADD PUSH3 0x2F2 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4BC JUMPI PUSH3 0x4BB PUSH3 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x4CA DUP8 DUP3 DUP9 ADD PUSH3 0x438 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4EE JUMPI PUSH3 0x4ED PUSH3 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x4FC DUP8 DUP3 DUP9 ADD PUSH3 0x438 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x520 JUMPI PUSH3 0x51F PUSH3 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x52E DUP8 DUP3 DUP9 ADD PUSH3 0x438 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x54F DUP2 PUSH3 0x53A JUMP JUMPDEST DUP2 EQ PUSH3 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x56F DUP2 PUSH3 0x544 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x58E JUMPI PUSH3 0x58D PUSH3 0x29A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x59E DUP5 DUP3 DUP6 ADD PUSH3 0x55E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x5B2 DUP2 PUSH3 0x2C4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x5CF PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x60C DUP2 PUSH3 0x2C4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x620 DUP4 DUP4 PUSH3 0x601 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x646 DUP3 PUSH3 0x5D5 JUMP JUMPDEST PUSH3 0x652 DUP2 DUP6 PUSH3 0x5E0 JUMP JUMPDEST SWAP4 POP PUSH3 0x65F DUP4 PUSH3 0x5F1 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x696 JUMPI DUP2 MLOAD PUSH3 0x67A DUP9 DUP3 PUSH3 0x612 JUMP JUMPDEST SWAP8 POP PUSH3 0x687 DUP4 PUSH3 0x62C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x663 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x6BF DUP2 DUP5 PUSH3 0x639 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x703 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x6E6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x71C DUP3 PUSH3 0x6C7 JUMP JUMPDEST PUSH3 0x728 DUP2 DUP6 PUSH3 0x6D2 JUMP JUMPDEST SWAP4 POP PUSH3 0x73A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x6E3 JUMP JUMPDEST PUSH3 0x745 DUP2 PUSH3 0x313 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH3 0x767 PUSH1 0x0 DUP4 ADD DUP8 PUSH3 0x5A7 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0x77B DUP2 DUP7 PUSH3 0x70F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH3 0x791 DUP2 DUP6 PUSH3 0x70F JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH3 0x7A7 DUP2 DUP5 PUSH3 0x70F JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3714 CODESIZE SUB DUP1 PUSH3 0x3714 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x3DC JUMP JUMPDEST DUP4 DUP4 DUP4 DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x4B SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0x5D SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xCC SWAP2 SWAP1 PUSH3 0x7EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xE6 DUP2 PUSH3 0x11E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP1 PUSH1 0x8 SWAP1 DUP2 PUSH3 0xF8 SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP PUSH3 0x80B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x225 DUP3 PUSH3 0x1F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x237 DUP2 PUSH3 0x218 JUMP JUMPDEST DUP2 EQ PUSH3 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x257 DUP2 PUSH3 0x22C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x2B2 DUP3 PUSH3 0x267 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x2D3 PUSH3 0x278 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2E9 PUSH3 0x1E4 JUMP JUMPDEST SWAP1 POP PUSH3 0x2F7 DUP3 DUP3 PUSH3 0x2A7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x31A JUMPI PUSH3 0x319 PUSH3 0x278 JUMP JUMPDEST JUMPDEST PUSH3 0x325 DUP3 PUSH3 0x267 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x352 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x335 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x375 PUSH3 0x36F DUP5 PUSH3 0x2FC JUMP JUMPDEST PUSH3 0x2DD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x394 JUMPI PUSH3 0x393 PUSH3 0x262 JUMP JUMPDEST JUMPDEST PUSH3 0x3A1 DUP5 DUP3 DUP6 PUSH3 0x332 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3C1 JUMPI PUSH3 0x3C0 PUSH3 0x25D JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x3D3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x35E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x3F9 JUMPI PUSH3 0x3F8 PUSH3 0x1EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x409 DUP8 DUP3 DUP9 ADD PUSH3 0x246 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x42D JUMPI PUSH3 0x42C PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x43B DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x45F JUMPI PUSH3 0x45E PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x46D DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x491 JUMPI PUSH3 0x490 PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x49F DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x4FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x514 JUMPI PUSH3 0x513 PUSH3 0x4B6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x57E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x53F JUMP JUMPDEST PUSH3 0x58A DUP7 DUP4 PUSH3 0x53F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5D7 PUSH3 0x5D1 PUSH3 0x5CB DUP5 PUSH3 0x5A2 JUMP JUMPDEST PUSH3 0x5AC JUMP JUMPDEST PUSH3 0x5A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x5F3 DUP4 PUSH3 0x5B6 JUMP JUMPDEST PUSH3 0x60B PUSH3 0x602 DUP3 PUSH3 0x5DE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x54C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x622 PUSH3 0x613 JUMP JUMPDEST PUSH3 0x62F DUP2 DUP5 DUP5 PUSH3 0x5E8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x657 JUMPI PUSH3 0x64B PUSH1 0x0 DUP3 PUSH3 0x618 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x635 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x6A6 JUMPI PUSH3 0x670 DUP2 PUSH3 0x51A JUMP JUMPDEST PUSH3 0x67B DUP5 PUSH3 0x52F JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x68B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x6A3 PUSH3 0x69A DUP6 PUSH3 0x52F JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x634 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6CB PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x6AB JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6E6 DUP4 DUP4 PUSH3 0x6B8 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x701 DUP3 PUSH3 0x4AB JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x71D JUMPI PUSH3 0x71C PUSH3 0x278 JUMP JUMPDEST JUMPDEST PUSH3 0x729 DUP3 SLOAD PUSH3 0x4E5 JUMP JUMPDEST PUSH3 0x736 DUP3 DUP3 DUP6 PUSH3 0x65B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x76E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x759 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x765 DUP6 DUP3 PUSH3 0x6D8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x7D5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x77E DUP7 PUSH3 0x51A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x7A8 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x781 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x7C8 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x7C4 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x6B8 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x7E8 DUP2 PUSH3 0x218 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x805 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x7DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2EF9 DUP1 PUSH3 0x81B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9B4F7B20 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xBF96AE63 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBF96AE63 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x47E JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x9B4F7B20 EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3F8 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x7824407F EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x8AF05318 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3B4 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x30BEE0F1 GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x30BEE0F1 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x54A18D57 EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x5FE8E7CC EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2F0 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x2A11CED0 EQ PUSH2 0x22E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x22AC JUMP JUMPDEST PUSH2 0x49A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x24AC JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x227 SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x248 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0x83F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BC PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DA PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x262A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xB53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xB65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x358 PUSH2 0xC1F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x362 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x380 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39E PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3BC PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DA PUSH2 0xCFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F1 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST PUSH2 0xD2F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x412 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40D SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST PUSH2 0xD45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH2 0xD62 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x438 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xEB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x445 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x468 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x289A JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x475 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x498 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xFAD JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x565 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x575 JUMPI POP PUSH2 0x574 DUP3 PUSH2 0x1033 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x58B SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5B7 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x604 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x604 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH2 0x623 DUP3 PUSH2 0x1125 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x63C DUP3 DUP3 PUSH2 0x637 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A6 SWAP1 PUSH2 0x29AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6BA DUP4 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x6FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F1 SWAP1 PUSH2 0x2A18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x705 DUP5 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x714 JUMPI PUSH2 0x713 DUP4 PUSH2 0x117C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x71F DUP4 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x7DD JUMPI PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x799 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0x1344 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x7FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x847 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8CA SWAP1 PUSH2 0x2AE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x915 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x933 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x943 DUP3 DUP3 PUSH2 0x14CD JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x956 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x9D0 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xA32 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD45 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0xA44 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA70 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xABD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xABD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAA0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB49 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xAFF JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC27 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0xC31 PUSH1 0x0 PUSH2 0x14EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xC78 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCA4 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCC6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD03 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0xC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD41 PUSH2 0xD3A PUSH2 0x1162 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x15B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD50 DUP5 DUP5 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0xD5C DUP5 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA8 SWAP1 PUSH2 0x2C07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE35 SWAP1 PUSH2 0x2C73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xEA9 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEBB DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xEC6 PUSH2 0x18D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xEE6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF11 JUMP JUMPDEST DUP1 PUSH2 0xEF0 DUP5 PUSH2 0x1969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF01 SWAP3 SWAP2 SWAP1 PUSH2 0x2CCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFB5 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1027 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x101E SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1030 DUP2 PUSH2 0x14EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A9 DUP4 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x111C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1113 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1177 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1A74 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0xB PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x11D6 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x11E7 JUMPI PUSH2 0x11E6 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0xB DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1229 JUMPI PUSH2 0x1228 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xB DUP1 SLOAD DUP1 PUSH2 0x12C7 JUMPI PUSH2 0x12C6 PUSH2 0x2D22 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13B6 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AD SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13CA DUP4 DUP4 PUSH2 0x13C5 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1440 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1437 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x144E PUSH2 0x1162 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x146C PUSH2 0xC3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14CB JUMPI PUSH2 0x148F PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x14E7 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E53 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1622 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1619 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1713 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x18D1 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1764 PUSH2 0x1162 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1786 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x17C2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BF SWAP2 SWAP1 PUSH2 0x2E3E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1846 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x183E JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1835 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x18CF JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18C6 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x8 DUP1 SLOAD PUSH2 0x18E6 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1912 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x195F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1934 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x195F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1942 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1978 DUP5 PUSH2 0x1E6F JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1997 JUMPI PUSH2 0x1996 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19C9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1A2C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1A20 JUMPI PUSH2 0x1A1F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x19D7 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1AAD JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1BE1 JUMPI PUSH1 0x0 PUSH2 0x1ABD DUP5 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B28 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1B3B JUMPI POP PUSH2 0x1B39 DUP2 DUP5 PUSH2 0xF19 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B7D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B74 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1BDF JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C45 DUP5 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C87 JUMPI PUSH2 0x1C86 DUP2 DUP5 DUP7 PUSH2 0x1FC2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D18 JUMPI PUSH2 0x1CC9 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1A74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D9B JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E5D DUP4 DUP4 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x1E6A PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1ECD JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1EC3 JUMPI PUSH2 0x1EC2 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1F0A JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1F00 JUMPI PUSH2 0x1EFF PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1F39 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1F2F JUMPI PUSH2 0x1F2E PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1F62 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1F58 JUMPI PUSH2 0x1F57 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1F87 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1F7D JUMPI PUSH2 0x1F7C PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1FAA JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1FA0 JUMPI PUSH2 0x1F9F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1FB9 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FCD DUP4 DUP4 DUP4 PUSH2 0x217F JUMP JUMPDEST PUSH2 0x2081 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2042 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2039 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2078 SWAP3 SWAP2 SWAP1 PUSH2 0x2E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20F8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20EF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2106 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x217A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2171 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2237 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x21F8 JUMPI POP PUSH2 0x21F7 DUP5 DUP5 PUSH2 0xF19 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2236 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x221E DUP4 PUSH2 0x1125 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2289 DUP2 PUSH2 0x2254 JUMP JUMPDEST DUP2 EQ PUSH2 0x2294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22A6 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22C2 JUMPI PUSH2 0x22C1 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22D0 DUP5 DUP3 DUP6 ADD PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22EE DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2309 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2349 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x232E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2371 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x237B DUP2 DUP6 PUSH2 0x231A JUMP JUMPDEST SWAP4 POP PUSH2 0x238B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2394 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23B9 DUP2 DUP5 PUSH2 0x2366 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23D4 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP2 EQ PUSH2 0x23DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23F1 DUP2 PUSH2 0x23CB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x240D JUMPI PUSH2 0x240C PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x241B DUP5 DUP3 DUP6 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x244F DUP3 PUSH2 0x2424 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x245F DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x247A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2489 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP2 EQ PUSH2 0x2494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24A6 DUP2 PUSH2 0x2480 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C3 JUMPI PUSH2 0x24C2 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24E2 DUP6 DUP3 DUP7 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2505 JUMPI PUSH2 0x2504 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2513 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2524 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2535 DUP7 DUP3 DUP8 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2555 JUMPI PUSH2 0x2554 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2563 DUP5 DUP3 DUP6 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25A1 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B3 DUP4 DUP4 PUSH2 0x2598 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25D7 DUP3 PUSH2 0x256C JUMP JUMPDEST PUSH2 0x25E1 DUP2 DUP6 PUSH2 0x2577 JUMP JUMPDEST SWAP4 POP PUSH2 0x25EC DUP4 PUSH2 0x2588 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x261D JUMPI DUP2 MLOAD PUSH2 0x2604 DUP9 DUP3 PUSH2 0x25A7 JUMP JUMPDEST SWAP8 POP PUSH2 0x260F DUP4 PUSH2 0x25BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25F0 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2644 DUP2 DUP5 PUSH2 0x25CC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2655 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2670 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x267F DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x268A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x269C DUP2 PUSH2 0x2676 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26B9 JUMPI PUSH2 0x26B8 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26C7 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26D8 DUP6 DUP3 DUP7 ADD PUSH2 0x268D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2724 DUP3 PUSH2 0x2355 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2743 JUMPI PUSH2 0x2742 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2756 PUSH2 0x2240 JUMP JUMPDEST SWAP1 POP PUSH2 0x2762 DUP3 DUP3 PUSH2 0x271B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2782 JUMPI PUSH2 0x2781 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH2 0x278B DUP3 PUSH2 0x2355 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27BA PUSH2 0x27B5 DUP5 PUSH2 0x2767 JUMP JUMPDEST PUSH2 0x274C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x27D6 JUMPI PUSH2 0x27D5 PUSH2 0x26E7 JUMP JUMPDEST JUMPDEST PUSH2 0x27E1 DUP5 DUP3 DUP6 PUSH2 0x2798 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27FE JUMPI PUSH2 0x27FD PUSH2 0x26E2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x280E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27A7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2831 JUMPI PUSH2 0x2830 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x283F DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2850 DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2861 DUP8 DUP3 DUP9 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2882 JUMPI PUSH2 0x2881 PUSH2 0x224F JUMP JUMPDEST JUMPDEST PUSH2 0x288E DUP8 DUP3 DUP9 ADD PUSH2 0x27E9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28B1 JUMPI PUSH2 0x28B0 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28BF DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28D0 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2921 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2934 JUMPI PUSH2 0x2933 PUSH2 0x28DA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2061207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2996 PUSH1 0x21 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x29A1 DUP3 PUSH2 0x293A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29C5 DUP2 PUSH2 0x2989 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526563697069656E7420616C7265616479206F776E73206120504F4150000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A02 PUSH1 0x1D DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2A0D DUP3 PUSH2 0x29CC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A31 DUP2 PUSH2 0x29F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A72 DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A7D DUP4 PUSH2 0x23C1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2A95 JUMPI PUSH2 0x2A94 PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4164647265737320686173206E6F74207369676E65642075702E000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD1 PUSH1 0x1A DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2ADC DUP3 PUSH2 0x2A9B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B00 DUP2 PUSH2 0x2AC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4164647265737320616C7265616479206F776E73206120504F41500000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2B48 DUP3 PUSH2 0x2B07 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B6C DUP2 PUSH2 0x2B30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7E DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2BB0 JUMPI PUSH2 0x2BAF PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5369676E2D757073206172652063757272656E746C792064697361626C65642E PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF1 PUSH1 0x20 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2BFC DUP3 PUSH2 0x2BBB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C20 DUP2 PUSH2 0x2BE4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x596F75206861766520616C7265616479207369676E65642075702E0000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2C68 DUP3 PUSH2 0x2C27 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C8C DUP2 PUSH2 0x2C50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA9 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x2CB3 DUP2 DUP6 PUSH2 0x2C93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2CC3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CDB DUP3 DUP6 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CE7 DUP3 DUP5 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2D66 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2D73 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST PUSH2 0x2D80 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DAF DUP3 PUSH2 0x2D88 JUMP JUMPDEST PUSH2 0x2DB9 DUP2 DUP6 PUSH2 0x2D93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2DC9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2DD2 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DF2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2DFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2E0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2E1E DUP2 DUP5 PUSH2 0x2DA4 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E38 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E54 JUMPI PUSH2 0x2E53 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E62 DUP5 DUP3 DUP6 ADD PUSH2 0x2E29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EAF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2EBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xD576B79BB2CE0B45BC0BE17068C0 SWAP6 0xCC SWAP3 PUSH2 0x2D30 0xC3 MUL 0xFB PUSH8 0xE1B387076E2D8E64 PUSH20 0x6F6C63430008180033A2646970667358221220FE TLOAD PUSH0 DUP1 PUSH8 0xCE9CC16A08EF78C1 0x23 AND LOG1 PUSH14 0x6DC58AEA06C79DBAF00DFD29BD75 0xDE PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ","sourceMap":"79:668:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;207:424;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;102:30;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;637:108;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;207:424;384:16;425:13;452:9;475:14;503:8;403:118;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;384:137;;531:13;558:11;531:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;611:11;586:38;;;;;;;;;;;;374:257;207:424;;;;:::o;102:30::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;637:108::-;690:16;725:13;718:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;637:108;:::o;-1:-1:-1:-;;;;;;;;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:117::-;950:1;947;940:12;964:117;1073:1;1070;1063:12;1087:102;1128:6;1179:2;1175:7;1170:2;1163:5;1159:14;1155:28;1145:38;;1087:102;;;:::o;1195:180::-;1243:77;1240:1;1233:88;1340:4;1337:1;1330:15;1364:4;1361:1;1354:15;1381:281;1464:27;1486:4;1464:27;:::i;:::-;1456:6;1452:40;1594:6;1582:10;1579:22;1558:18;1546:10;1543:34;1540:62;1537:88;;;1605:18;;:::i;:::-;1537:88;1645:10;1641:2;1634:22;1424:238;1381:281;;:::o;1668:129::-;1702:6;1729:20;;:::i;:::-;1719:30;;1758:33;1786:4;1778:6;1758:33;:::i;:::-;1668:129;;;:::o;1803:308::-;1865:4;1955:18;1947:6;1944:30;1941:56;;;1977:18;;:::i;:::-;1941:56;2015:29;2037:6;2015:29;:::i;:::-;2007:37;;2099:4;2093;2089:15;2081:23;;1803:308;;;:::o;2117:146::-;2214:6;2209:3;2204;2191:30;2255:1;2246:6;2241:3;2237:16;2230:27;2117:146;;;:::o;2269:425::-;2347:5;2372:66;2388:49;2430:6;2388:49;:::i;:::-;2372:66;:::i;:::-;2363:75;;2461:6;2454:5;2447:21;2499:4;2492:5;2488:16;2537:3;2528:6;2523:3;2519:16;2516:25;2513:112;;;2544:79;;:::i;:::-;2513:112;2634:54;2681:6;2676:3;2671;2634:54;:::i;:::-;2353:341;2269:425;;;;;:::o;2714:340::-;2770:5;2819:3;2812:4;2804:6;2800:17;2796:27;2786:122;;2827:79;;:::i;:::-;2786:122;2944:6;2931:20;2969:79;3044:3;3036:6;3029:4;3021:6;3017:17;2969:79;:::i;:::-;2960:88;;2776:278;2714:340;;;;:::o;3060:1305::-;3176:6;3184;3192;3200;3249:3;3237:9;3228:7;3224:23;3220:33;3217:120;;;3256:79;;:::i;:::-;3217:120;3376:1;3401:53;3446:7;3437:6;3426:9;3422:22;3401:53;:::i;:::-;3391:63;;3347:117;3531:2;3520:9;3516:18;3503:32;3562:18;3554:6;3551:30;3548:117;;;3584:79;;:::i;:::-;3548:117;3689:63;3744:7;3735:6;3724:9;3720:22;3689:63;:::i;:::-;3679:73;;3474:288;3829:2;3818:9;3814:18;3801:32;3860:18;3852:6;3849:30;3846:117;;;3882:79;;:::i;:::-;3846:117;3987:63;4042:7;4033:6;4022:9;4018:22;3987:63;:::i;:::-;3977:73;;3772:288;4127:2;4116:9;4112:18;4099:32;4158:18;4150:6;4147:30;4144:117;;;4180:79;;:::i;:::-;4144:117;4285:63;4340:7;4331:6;4320:9;4316:22;4285:63;:::i;:::-;4275:73;;4070:288;3060:1305;;;;;;;:::o;4371:77::-;4408:7;4437:5;4426:16;;4371:77;;;:::o;4454:122::-;4527:24;4545:5;4527:24;:::i;:::-;4520:5;4517:35;4507:63;;4566:1;4563;4556:12;4507:63;4454:122;:::o;4582:139::-;4628:5;4666:6;4653:20;4644:29;;4682:33;4709:5;4682:33;:::i;:::-;4582:139;;;;:::o;4727:329::-;4786:6;4835:2;4823:9;4814:7;4810:23;4806:32;4803:119;;;4841:79;;:::i;:::-;4803:119;4961:1;4986:53;5031:7;5022:6;5011:9;5007:22;4986:53;:::i;:::-;4976:63;;4932:117;4727:329;;;;:::o;5062:118::-;5149:24;5167:5;5149:24;:::i;:::-;5144:3;5137:37;5062:118;;:::o;5186:222::-;5279:4;5317:2;5306:9;5302:18;5294:26;;5330:71;5398:1;5387:9;5383:17;5374:6;5330:71;:::i;:::-;5186:222;;;;:::o;5414:114::-;5481:6;5515:5;5509:12;5499:22;;5414:114;;;:::o;5534:184::-;5633:11;5667:6;5662:3;5655:19;5707:4;5702:3;5698:14;5683:29;;5534:184;;;;:::o;5724:132::-;5791:4;5814:3;5806:11;;5844:4;5839:3;5835:14;5827:22;;5724:132;;;:::o;5862:108::-;5939:24;5957:5;5939:24;:::i;:::-;5934:3;5927:37;5862:108;;:::o;5976:179::-;6045:10;6066:46;6108:3;6100:6;6066:46;:::i;:::-;6144:4;6139:3;6135:14;6121:28;;5976:179;;;;:::o;6161:113::-;6231:4;6263;6258:3;6254:14;6246:22;;6161:113;;;:::o;6310:732::-;6429:3;6458:54;6506:5;6458:54;:::i;:::-;6528:86;6607:6;6602:3;6528:86;:::i;:::-;6521:93;;6638:56;6688:5;6638:56;:::i;:::-;6717:7;6748:1;6733:284;6758:6;6755:1;6752:13;6733:284;;;6834:6;6828:13;6861:63;6920:3;6905:13;6861:63;:::i;:::-;6854:70;;6947:60;7000:6;6947:60;:::i;:::-;6937:70;;6793:224;6780:1;6777;6773:9;6768:14;;6733:284;;;6737:14;7033:3;7026:10;;6434:608;;;6310:732;;;;:::o;7048:373::-;7191:4;7229:2;7218:9;7214:18;7206:26;;7278:9;7272:4;7268:20;7264:1;7253:9;7249:17;7242:47;7306:108;7409:4;7400:6;7306:108;:::i;:::-;7298:116;;7048:373;;;;:::o;7427:99::-;7479:6;7513:5;7507:12;7497:22;;7427:99;;;:::o;7532:169::-;7616:11;7650:6;7645:3;7638:19;7690:4;7685:3;7681:14;7666:29;;7532:169;;;;:::o;7707:246::-;7788:1;7798:113;7812:6;7809:1;7806:13;7798:113;;;7897:1;7892:3;7888:11;7882:18;7878:1;7873:3;7869:11;7862:39;7834:2;7831:1;7827:10;7822:15;;7798:113;;;7945:1;7936:6;7931:3;7927:16;7920:27;7769:184;7707:246;;;:::o;7959:377::-;8047:3;8075:39;8108:5;8075:39;:::i;:::-;8130:71;8194:6;8189:3;8130:71;:::i;:::-;8123:78;;8210:65;8268:6;8263:3;8256:4;8249:5;8245:16;8210:65;:::i;:::-;8300:29;8322:6;8300:29;:::i;:::-;8295:3;8291:39;8284:46;;8051:285;7959:377;;;;:::o;8342:826::-;8579:4;8617:3;8606:9;8602:19;8594:27;;8631:71;8699:1;8688:9;8684:17;8675:6;8631:71;:::i;:::-;8749:9;8743:4;8739:20;8734:2;8723:9;8719:18;8712:48;8777:78;8850:4;8841:6;8777:78;:::i;:::-;8769:86;;8902:9;8896:4;8892:20;8887:2;8876:9;8872:18;8865:48;8930:78;9003:4;8994:6;8930:78;:::i;:::-;8922:86;;9055:9;9049:4;9045:20;9040:2;9029:9;9025:18;9018:48;9083:78;9156:4;9147:6;9083:78;:::i;:::-;9075:86;;8342:826;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3224800","executionCost":"3571","totalCost":"3228371"},"external":{"deployPOAP(address,string,string,string)":"infinite","deployedPOAPs(uint256)":"4956","getDeployedContracts()":"infinite"}},"methodIdentifiers":{"deployPOAP(address,string,string,string)":"00a48f58","deployedPOAPs(uint256)":"8a9d179e","getDeployedContracts()":"aa9a068f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_poapName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poapShortName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poapURL\",\"type\":\"string\"}],\"name\":\"deployPOAP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedPOAPs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Poap.sol\\\";\\n\\ncontract Factory {\\n    address[] public deployedPOAPs;\\n    \\n\\n\\n    event ContractDeployed(address indexed contractAddress);\\n\\n    function deployPOAP(\\n        address _initialOwner,\\n        string memory _poapName,\\n        string memory _poapShortName,\\n        string memory _poapURL\\n    ) public {\\n        Poap newContract = new Poap(\\n            _initialOwner,\\n            _poapName,\\n            _poapShortName,\\n            _poapURL\\n        );\\n        deployedPOAPs.push(address(newContract));\\n        emit ContractDeployed(address(newContract));\\n    }\\n\\n    function getDeployedContracts() public view returns (address[] memory) {\\n        return deployedPOAPs;\\n    }\\n}\\n\",\"keccak256\":\"0x5941c26b2f0c85df9ab1a56b7ae2486eb688045e4d9d0f7061090a1d3827ca41\",\"license\":\"MIT\"},\"contracts/Poap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Poap is ERC721, Ownable {\\n    uint256 private _nextTokenId;\\n    string public poapURL;\\n    uint256 public tokenSupply;\\n    uint256 public volunteerSignUp;\\n    address[] public holders;\\n    bool public signUpEnabled;\\n    mapping(address => bool) private signUpWallet;\\n    mapping(address => uint256) private holderIndex; \\n\\n    constructor(\\n        address initialOwner,\\n        string memory _poapName,\\n        string memory _poapShortName,\\n        string memory _poapURL\\n    ) ERC721(_poapName, _poapShortName) Ownable(initialOwner) {\\n        poapURL = _poapURL;\\n        signUpEnabled = true;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return poapURL;\\n    }\\n\\n    // Function for the owner to enable or disable sign-ups\\n    function toggleSignUp() public onlyOwner {\\n        signUpEnabled = !signUpEnabled;\\n    }\\n\\n    // Function to sign up a volunteer\\n    function signUp() public {\\n        require(signUpEnabled, \\\"Sign-ups are currently disabled.\\\");\\n        require(!signUpWallet[msg.sender], \\\"You have already signed up.\\\");\\n        signUpWallet[msg.sender] = true;\\n        volunteerSignUp++;\\n    }\\n\\n    function safeMint(address to) public onlyOwner {\\n        require(signUpWallet[to], \\\"Address has not signed up.\\\");\\n        require(balanceOf(to) == 0, \\\"Address already owns a POAP\\\");\\n        uint256 tokenId = _nextTokenId++;\\n        _safeMint(to, tokenId);\\n        tokenSupply++;\\n        holders.push(to);\\n        holderIndex[to] = holders.length - 1;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\n        require(to != address(0), \\\"Cannot transfer to a zero address\\\");\\n        require(balanceOf(to) == 0, \\\"Recipient already owns a POAP\\\");\\n\\n        // Update the holders list\\n        if (balanceOf(from) == 1) {\\n            _removeHolder(from);\\n        }\\n\\n        if (balanceOf(to) == 0) {\\n            holders.push(to);\\n            holderIndex[to] = holders.length - 1;\\n        }\\n\\n        // Call the original transferFrom function\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function _removeHolder(address holder) private {\\n        uint256 index = holderIndex[holder];\\n        address lastHolder = holders[holders.length - 1];\\n        \\n        holders[index] = lastHolder; // Move the last holder to the index being removed\\n        holderIndex[lastHolder] = index; // Update the moved holder's index\\n\\n        holders.pop(); // Remove the last holder\\n        delete holderIndex[holder]; // Delete the index of the removed holder\\n        \\n    }\\n    function getHolders() public view returns (address[] memory) {\\n        return holders;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xc55ed542c7b02eedb9df536ed27f9df1e40fcd05da4af35aac4128292dab7b6f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2942,"contract":"contracts/Factory.sol:Factory","label":"deployedPOAPs","offset":0,"slot":"0","type":"t_array(t_address)dyn_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Poap.sol":{"Poap":{"abi":[{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"string","name":"_poapName","type":"string"},{"internalType":"string","name":"_poapShortName","type":"string"},{"internalType":"string","name":"_poapURL","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getHolders","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"holders","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poapURL","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"signUp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"signUpEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"toggleSignUp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"volunteerSignUp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3052":{"entryPoint":null,"id":3052,"parameterSlots":4,"returnSlots":0},"@_354":{"entryPoint":null,"id":354,"parameterSlots":2,"returnSlots":0},"@_50":{"entryPoint":null,"id":50,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":286,"id":146,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":862,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":582,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":937,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":988,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2013,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2030,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":733,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":484,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":764,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1306,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1195,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1627,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":536,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":504,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1442,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1588,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":1462,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1782,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":818,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1327,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1253,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1752,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":679,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":1452,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1720,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":1206,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":632,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":1502,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":605,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":610,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":499,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":494,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":615,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":1343,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1707,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1560,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1356,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":1512,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":556,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":1555,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:9923:14","nodeType":"YulBlock","src":"0:9923:14","statements":[{"body":{"nativeSrc":"47:35:14","nodeType":"YulBlock","src":"47:35:14","statements":[{"nativeSrc":"57:19:14","nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:14","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:14","nodeType":"YulIdentifier","src":"67:5:14"},"nativeSrc":"67:9:14","nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:14","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:14","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nativeSrc":"177:28:14","nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:14","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:14","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:14","nodeType":"YulIdentifier","src":"187:6:14"},"nativeSrc":"187:12:14","nodeType":"YulFunctionCall","src":"187:12:14"},"nativeSrc":"187:12:14","nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:14","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nativeSrc":"300:28:14","nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:14","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:14","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:14","nodeType":"YulIdentifier","src":"310:6:14"},"nativeSrc":"310:12:14","nodeType":"YulFunctionCall","src":"310:12:14"},"nativeSrc":"310:12:14","nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:14","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nativeSrc":"379:81:14","nodeType":"YulBlock","src":"379:81:14","statements":[{"nativeSrc":"389:65:14","nodeType":"YulAssignment","src":"389:65:14","value":{"arguments":[{"name":"value","nativeSrc":"404:5:14","nodeType":"YulIdentifier","src":"404:5:14"},{"kind":"number","nativeSrc":"411:42:14","nodeType":"YulLiteral","src":"411:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"400:3:14","nodeType":"YulIdentifier","src":"400:3:14"},"nativeSrc":"400:54:14","nodeType":"YulFunctionCall","src":"400:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"389:7:14","nodeType":"YulIdentifier","src":"389:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"334:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"361:5:14","nodeType":"YulTypedName","src":"361:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"371:7:14","nodeType":"YulTypedName","src":"371:7:14","type":""}],"src":"334:126:14"},{"body":{"nativeSrc":"511:51:14","nodeType":"YulBlock","src":"511:51:14","statements":[{"nativeSrc":"521:35:14","nodeType":"YulAssignment","src":"521:35:14","value":{"arguments":[{"name":"value","nativeSrc":"550:5:14","nodeType":"YulIdentifier","src":"550:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"532:17:14","nodeType":"YulIdentifier","src":"532:17:14"},"nativeSrc":"532:24:14","nodeType":"YulFunctionCall","src":"532:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"521:7:14","nodeType":"YulIdentifier","src":"521:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"466:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"493:5:14","nodeType":"YulTypedName","src":"493:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"503:7:14","nodeType":"YulTypedName","src":"503:7:14","type":""}],"src":"466:96:14"},{"body":{"nativeSrc":"611:79:14","nodeType":"YulBlock","src":"611:79:14","statements":[{"body":{"nativeSrc":"668:16:14","nodeType":"YulBlock","src":"668:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"677:1:14","nodeType":"YulLiteral","src":"677:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"680:1:14","nodeType":"YulLiteral","src":"680:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"670:6:14","nodeType":"YulIdentifier","src":"670:6:14"},"nativeSrc":"670:12:14","nodeType":"YulFunctionCall","src":"670:12:14"},"nativeSrc":"670:12:14","nodeType":"YulExpressionStatement","src":"670:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"634:5:14","nodeType":"YulIdentifier","src":"634:5:14"},{"arguments":[{"name":"value","nativeSrc":"659:5:14","nodeType":"YulIdentifier","src":"659:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"641:17:14","nodeType":"YulIdentifier","src":"641:17:14"},"nativeSrc":"641:24:14","nodeType":"YulFunctionCall","src":"641:24:14"}],"functionName":{"name":"eq","nativeSrc":"631:2:14","nodeType":"YulIdentifier","src":"631:2:14"},"nativeSrc":"631:35:14","nodeType":"YulFunctionCall","src":"631:35:14"}],"functionName":{"name":"iszero","nativeSrc":"624:6:14","nodeType":"YulIdentifier","src":"624:6:14"},"nativeSrc":"624:43:14","nodeType":"YulFunctionCall","src":"624:43:14"},"nativeSrc":"621:63:14","nodeType":"YulIf","src":"621:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"568:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"604:5:14","nodeType":"YulTypedName","src":"604:5:14","type":""}],"src":"568:122:14"},{"body":{"nativeSrc":"759:80:14","nodeType":"YulBlock","src":"759:80:14","statements":[{"nativeSrc":"769:22:14","nodeType":"YulAssignment","src":"769:22:14","value":{"arguments":[{"name":"offset","nativeSrc":"784:6:14","nodeType":"YulIdentifier","src":"784:6:14"}],"functionName":{"name":"mload","nativeSrc":"778:5:14","nodeType":"YulIdentifier","src":"778:5:14"},"nativeSrc":"778:13:14","nodeType":"YulFunctionCall","src":"778:13:14"},"variableNames":[{"name":"value","nativeSrc":"769:5:14","nodeType":"YulIdentifier","src":"769:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"827:5:14","nodeType":"YulIdentifier","src":"827:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"800:26:14","nodeType":"YulIdentifier","src":"800:26:14"},"nativeSrc":"800:33:14","nodeType":"YulFunctionCall","src":"800:33:14"},"nativeSrc":"800:33:14","nodeType":"YulExpressionStatement","src":"800:33:14"}]},"name":"abi_decode_t_address_fromMemory","nativeSrc":"696:143:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"737:6:14","nodeType":"YulTypedName","src":"737:6:14","type":""},{"name":"end","nativeSrc":"745:3:14","nodeType":"YulTypedName","src":"745:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"753:5:14","nodeType":"YulTypedName","src":"753:5:14","type":""}],"src":"696:143:14"},{"body":{"nativeSrc":"934:28:14","nodeType":"YulBlock","src":"934:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"951:1:14","nodeType":"YulLiteral","src":"951:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"954:1:14","nodeType":"YulLiteral","src":"954:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"944:6:14","nodeType":"YulIdentifier","src":"944:6:14"},"nativeSrc":"944:12:14","nodeType":"YulFunctionCall","src":"944:12:14"},"nativeSrc":"944:12:14","nodeType":"YulExpressionStatement","src":"944:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"845:117:14","nodeType":"YulFunctionDefinition","src":"845:117:14"},{"body":{"nativeSrc":"1057:28:14","nodeType":"YulBlock","src":"1057:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1074:1:14","nodeType":"YulLiteral","src":"1074:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1077:1:14","nodeType":"YulLiteral","src":"1077:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1067:6:14","nodeType":"YulIdentifier","src":"1067:6:14"},"nativeSrc":"1067:12:14","nodeType":"YulFunctionCall","src":"1067:12:14"},"nativeSrc":"1067:12:14","nodeType":"YulExpressionStatement","src":"1067:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"968:117:14","nodeType":"YulFunctionDefinition","src":"968:117:14"},{"body":{"nativeSrc":"1139:54:14","nodeType":"YulBlock","src":"1139:54:14","statements":[{"nativeSrc":"1149:38:14","nodeType":"YulAssignment","src":"1149:38:14","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1167:5:14","nodeType":"YulIdentifier","src":"1167:5:14"},{"kind":"number","nativeSrc":"1174:2:14","nodeType":"YulLiteral","src":"1174:2:14","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1163:3:14","nodeType":"YulIdentifier","src":"1163:3:14"},"nativeSrc":"1163:14:14","nodeType":"YulFunctionCall","src":"1163:14:14"},{"arguments":[{"kind":"number","nativeSrc":"1183:2:14","nodeType":"YulLiteral","src":"1183:2:14","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"1179:3:14","nodeType":"YulIdentifier","src":"1179:3:14"},"nativeSrc":"1179:7:14","nodeType":"YulFunctionCall","src":"1179:7:14"}],"functionName":{"name":"and","nativeSrc":"1159:3:14","nodeType":"YulIdentifier","src":"1159:3:14"},"nativeSrc":"1159:28:14","nodeType":"YulFunctionCall","src":"1159:28:14"},"variableNames":[{"name":"result","nativeSrc":"1149:6:14","nodeType":"YulIdentifier","src":"1149:6:14"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"1091:102:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1122:5:14","nodeType":"YulTypedName","src":"1122:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"1132:6:14","nodeType":"YulTypedName","src":"1132:6:14","type":""}],"src":"1091:102:14"},{"body":{"nativeSrc":"1227:152:14","nodeType":"YulBlock","src":"1227:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1244:1:14","nodeType":"YulLiteral","src":"1244:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1247:77:14","nodeType":"YulLiteral","src":"1247:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"1237:6:14","nodeType":"YulIdentifier","src":"1237:6:14"},"nativeSrc":"1237:88:14","nodeType":"YulFunctionCall","src":"1237:88:14"},"nativeSrc":"1237:88:14","nodeType":"YulExpressionStatement","src":"1237:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1341:1:14","nodeType":"YulLiteral","src":"1341:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"1344:4:14","nodeType":"YulLiteral","src":"1344:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"1334:6:14","nodeType":"YulIdentifier","src":"1334:6:14"},"nativeSrc":"1334:15:14","nodeType":"YulFunctionCall","src":"1334:15:14"},"nativeSrc":"1334:15:14","nodeType":"YulExpressionStatement","src":"1334:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1365:1:14","nodeType":"YulLiteral","src":"1365:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"1368:4:14","nodeType":"YulLiteral","src":"1368:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1358:6:14","nodeType":"YulIdentifier","src":"1358:6:14"},"nativeSrc":"1358:15:14","nodeType":"YulFunctionCall","src":"1358:15:14"},"nativeSrc":"1358:15:14","nodeType":"YulExpressionStatement","src":"1358:15:14"}]},"name":"panic_error_0x41","nativeSrc":"1199:180:14","nodeType":"YulFunctionDefinition","src":"1199:180:14"},{"body":{"nativeSrc":"1428:238:14","nodeType":"YulBlock","src":"1428:238:14","statements":[{"nativeSrc":"1438:58:14","nodeType":"YulVariableDeclaration","src":"1438:58:14","value":{"arguments":[{"name":"memPtr","nativeSrc":"1460:6:14","nodeType":"YulIdentifier","src":"1460:6:14"},{"arguments":[{"name":"size","nativeSrc":"1490:4:14","nodeType":"YulIdentifier","src":"1490:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"1468:21:14","nodeType":"YulIdentifier","src":"1468:21:14"},"nativeSrc":"1468:27:14","nodeType":"YulFunctionCall","src":"1468:27:14"}],"functionName":{"name":"add","nativeSrc":"1456:3:14","nodeType":"YulIdentifier","src":"1456:3:14"},"nativeSrc":"1456:40:14","nodeType":"YulFunctionCall","src":"1456:40:14"},"variables":[{"name":"newFreePtr","nativeSrc":"1442:10:14","nodeType":"YulTypedName","src":"1442:10:14","type":""}]},{"body":{"nativeSrc":"1607:22:14","nodeType":"YulBlock","src":"1607:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1609:16:14","nodeType":"YulIdentifier","src":"1609:16:14"},"nativeSrc":"1609:18:14","nodeType":"YulFunctionCall","src":"1609:18:14"},"nativeSrc":"1609:18:14","nodeType":"YulExpressionStatement","src":"1609:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"1550:10:14","nodeType":"YulIdentifier","src":"1550:10:14"},{"kind":"number","nativeSrc":"1562:18:14","nodeType":"YulLiteral","src":"1562:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1547:2:14","nodeType":"YulIdentifier","src":"1547:2:14"},"nativeSrc":"1547:34:14","nodeType":"YulFunctionCall","src":"1547:34:14"},{"arguments":[{"name":"newFreePtr","nativeSrc":"1586:10:14","nodeType":"YulIdentifier","src":"1586:10:14"},{"name":"memPtr","nativeSrc":"1598:6:14","nodeType":"YulIdentifier","src":"1598:6:14"}],"functionName":{"name":"lt","nativeSrc":"1583:2:14","nodeType":"YulIdentifier","src":"1583:2:14"},"nativeSrc":"1583:22:14","nodeType":"YulFunctionCall","src":"1583:22:14"}],"functionName":{"name":"or","nativeSrc":"1544:2:14","nodeType":"YulIdentifier","src":"1544:2:14"},"nativeSrc":"1544:62:14","nodeType":"YulFunctionCall","src":"1544:62:14"},"nativeSrc":"1541:88:14","nodeType":"YulIf","src":"1541:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1645:2:14","nodeType":"YulLiteral","src":"1645:2:14","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"1649:10:14","nodeType":"YulIdentifier","src":"1649:10:14"}],"functionName":{"name":"mstore","nativeSrc":"1638:6:14","nodeType":"YulIdentifier","src":"1638:6:14"},"nativeSrc":"1638:22:14","nodeType":"YulFunctionCall","src":"1638:22:14"},"nativeSrc":"1638:22:14","nodeType":"YulExpressionStatement","src":"1638:22:14"}]},"name":"finalize_allocation","nativeSrc":"1385:281:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"1414:6:14","nodeType":"YulTypedName","src":"1414:6:14","type":""},{"name":"size","nativeSrc":"1422:4:14","nodeType":"YulTypedName","src":"1422:4:14","type":""}],"src":"1385:281:14"},{"body":{"nativeSrc":"1713:88:14","nodeType":"YulBlock","src":"1713:88:14","statements":[{"nativeSrc":"1723:30:14","nodeType":"YulAssignment","src":"1723:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"1733:18:14","nodeType":"YulIdentifier","src":"1733:18:14"},"nativeSrc":"1733:20:14","nodeType":"YulFunctionCall","src":"1733:20:14"},"variableNames":[{"name":"memPtr","nativeSrc":"1723:6:14","nodeType":"YulIdentifier","src":"1723:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"1782:6:14","nodeType":"YulIdentifier","src":"1782:6:14"},{"name":"size","nativeSrc":"1790:4:14","nodeType":"YulIdentifier","src":"1790:4:14"}],"functionName":{"name":"finalize_allocation","nativeSrc":"1762:19:14","nodeType":"YulIdentifier","src":"1762:19:14"},"nativeSrc":"1762:33:14","nodeType":"YulFunctionCall","src":"1762:33:14"},"nativeSrc":"1762:33:14","nodeType":"YulExpressionStatement","src":"1762:33:14"}]},"name":"allocate_memory","nativeSrc":"1672:129:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"1697:4:14","nodeType":"YulTypedName","src":"1697:4:14","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"1706:6:14","nodeType":"YulTypedName","src":"1706:6:14","type":""}],"src":"1672:129:14"},{"body":{"nativeSrc":"1874:241:14","nodeType":"YulBlock","src":"1874:241:14","statements":[{"body":{"nativeSrc":"1979:22:14","nodeType":"YulBlock","src":"1979:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"1981:16:14","nodeType":"YulIdentifier","src":"1981:16:14"},"nativeSrc":"1981:18:14","nodeType":"YulFunctionCall","src":"1981:18:14"},"nativeSrc":"1981:18:14","nodeType":"YulExpressionStatement","src":"1981:18:14"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1951:6:14","nodeType":"YulIdentifier","src":"1951:6:14"},{"kind":"number","nativeSrc":"1959:18:14","nodeType":"YulLiteral","src":"1959:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1948:2:14","nodeType":"YulIdentifier","src":"1948:2:14"},"nativeSrc":"1948:30:14","nodeType":"YulFunctionCall","src":"1948:30:14"},"nativeSrc":"1945:56:14","nodeType":"YulIf","src":"1945:56:14"},{"nativeSrc":"2011:37:14","nodeType":"YulAssignment","src":"2011:37:14","value":{"arguments":[{"name":"length","nativeSrc":"2041:6:14","nodeType":"YulIdentifier","src":"2041:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2019:21:14","nodeType":"YulIdentifier","src":"2019:21:14"},"nativeSrc":"2019:29:14","nodeType":"YulFunctionCall","src":"2019:29:14"},"variableNames":[{"name":"size","nativeSrc":"2011:4:14","nodeType":"YulIdentifier","src":"2011:4:14"}]},{"nativeSrc":"2085:23:14","nodeType":"YulAssignment","src":"2085:23:14","value":{"arguments":[{"name":"size","nativeSrc":"2097:4:14","nodeType":"YulIdentifier","src":"2097:4:14"},{"kind":"number","nativeSrc":"2103:4:14","nodeType":"YulLiteral","src":"2103:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2093:3:14","nodeType":"YulIdentifier","src":"2093:3:14"},"nativeSrc":"2093:15:14","nodeType":"YulFunctionCall","src":"2093:15:14"},"variableNames":[{"name":"size","nativeSrc":"2085:4:14","nodeType":"YulIdentifier","src":"2085:4:14"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"1807:308:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"1858:6:14","nodeType":"YulTypedName","src":"1858:6:14","type":""}],"returnVariables":[{"name":"size","nativeSrc":"1869:4:14","nodeType":"YulTypedName","src":"1869:4:14","type":""}],"src":"1807:308:14"},{"body":{"nativeSrc":"2183:184:14","nodeType":"YulBlock","src":"2183:184:14","statements":[{"nativeSrc":"2193:10:14","nodeType":"YulVariableDeclaration","src":"2193:10:14","value":{"kind":"number","nativeSrc":"2202:1:14","nodeType":"YulLiteral","src":"2202:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"2197:1:14","nodeType":"YulTypedName","src":"2197:1:14","type":""}]},{"body":{"nativeSrc":"2262:63:14","nodeType":"YulBlock","src":"2262:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2287:3:14","nodeType":"YulIdentifier","src":"2287:3:14"},{"name":"i","nativeSrc":"2292:1:14","nodeType":"YulIdentifier","src":"2292:1:14"}],"functionName":{"name":"add","nativeSrc":"2283:3:14","nodeType":"YulIdentifier","src":"2283:3:14"},"nativeSrc":"2283:11:14","nodeType":"YulFunctionCall","src":"2283:11:14"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2306:3:14","nodeType":"YulIdentifier","src":"2306:3:14"},{"name":"i","nativeSrc":"2311:1:14","nodeType":"YulIdentifier","src":"2311:1:14"}],"functionName":{"name":"add","nativeSrc":"2302:3:14","nodeType":"YulIdentifier","src":"2302:3:14"},"nativeSrc":"2302:11:14","nodeType":"YulFunctionCall","src":"2302:11:14"}],"functionName":{"name":"mload","nativeSrc":"2296:5:14","nodeType":"YulIdentifier","src":"2296:5:14"},"nativeSrc":"2296:18:14","nodeType":"YulFunctionCall","src":"2296:18:14"}],"functionName":{"name":"mstore","nativeSrc":"2276:6:14","nodeType":"YulIdentifier","src":"2276:6:14"},"nativeSrc":"2276:39:14","nodeType":"YulFunctionCall","src":"2276:39:14"},"nativeSrc":"2276:39:14","nodeType":"YulExpressionStatement","src":"2276:39:14"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"2223:1:14","nodeType":"YulIdentifier","src":"2223:1:14"},{"name":"length","nativeSrc":"2226:6:14","nodeType":"YulIdentifier","src":"2226:6:14"}],"functionName":{"name":"lt","nativeSrc":"2220:2:14","nodeType":"YulIdentifier","src":"2220:2:14"},"nativeSrc":"2220:13:14","nodeType":"YulFunctionCall","src":"2220:13:14"},"nativeSrc":"2212:113:14","nodeType":"YulForLoop","post":{"nativeSrc":"2234:19:14","nodeType":"YulBlock","src":"2234:19:14","statements":[{"nativeSrc":"2236:15:14","nodeType":"YulAssignment","src":"2236:15:14","value":{"arguments":[{"name":"i","nativeSrc":"2245:1:14","nodeType":"YulIdentifier","src":"2245:1:14"},{"kind":"number","nativeSrc":"2248:2:14","nodeType":"YulLiteral","src":"2248:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2241:3:14","nodeType":"YulIdentifier","src":"2241:3:14"},"nativeSrc":"2241:10:14","nodeType":"YulFunctionCall","src":"2241:10:14"},"variableNames":[{"name":"i","nativeSrc":"2236:1:14","nodeType":"YulIdentifier","src":"2236:1:14"}]}]},"pre":{"nativeSrc":"2216:3:14","nodeType":"YulBlock","src":"2216:3:14","statements":[]},"src":"2212:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2345:3:14","nodeType":"YulIdentifier","src":"2345:3:14"},{"name":"length","nativeSrc":"2350:6:14","nodeType":"YulIdentifier","src":"2350:6:14"}],"functionName":{"name":"add","nativeSrc":"2341:3:14","nodeType":"YulIdentifier","src":"2341:3:14"},"nativeSrc":"2341:16:14","nodeType":"YulFunctionCall","src":"2341:16:14"},{"kind":"number","nativeSrc":"2359:1:14","nodeType":"YulLiteral","src":"2359:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2334:6:14","nodeType":"YulIdentifier","src":"2334:6:14"},"nativeSrc":"2334:27:14","nodeType":"YulFunctionCall","src":"2334:27:14"},"nativeSrc":"2334:27:14","nodeType":"YulExpressionStatement","src":"2334:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2121:246:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"2165:3:14","nodeType":"YulTypedName","src":"2165:3:14","type":""},{"name":"dst","nativeSrc":"2170:3:14","nodeType":"YulTypedName","src":"2170:3:14","type":""},{"name":"length","nativeSrc":"2175:6:14","nodeType":"YulTypedName","src":"2175:6:14","type":""}],"src":"2121:246:14"},{"body":{"nativeSrc":"2468:339:14","nodeType":"YulBlock","src":"2468:339:14","statements":[{"nativeSrc":"2478:75:14","nodeType":"YulAssignment","src":"2478:75:14","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"2545:6:14","nodeType":"YulIdentifier","src":"2545:6:14"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nativeSrc":"2503:41:14","nodeType":"YulIdentifier","src":"2503:41:14"},"nativeSrc":"2503:49:14","nodeType":"YulFunctionCall","src":"2503:49:14"}],"functionName":{"name":"allocate_memory","nativeSrc":"2487:15:14","nodeType":"YulIdentifier","src":"2487:15:14"},"nativeSrc":"2487:66:14","nodeType":"YulFunctionCall","src":"2487:66:14"},"variableNames":[{"name":"array","nativeSrc":"2478:5:14","nodeType":"YulIdentifier","src":"2478:5:14"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"2569:5:14","nodeType":"YulIdentifier","src":"2569:5:14"},{"name":"length","nativeSrc":"2576:6:14","nodeType":"YulIdentifier","src":"2576:6:14"}],"functionName":{"name":"mstore","nativeSrc":"2562:6:14","nodeType":"YulIdentifier","src":"2562:6:14"},"nativeSrc":"2562:21:14","nodeType":"YulFunctionCall","src":"2562:21:14"},"nativeSrc":"2562:21:14","nodeType":"YulExpressionStatement","src":"2562:21:14"},{"nativeSrc":"2592:27:14","nodeType":"YulVariableDeclaration","src":"2592:27:14","value":{"arguments":[{"name":"array","nativeSrc":"2607:5:14","nodeType":"YulIdentifier","src":"2607:5:14"},{"kind":"number","nativeSrc":"2614:4:14","nodeType":"YulLiteral","src":"2614:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2603:3:14","nodeType":"YulIdentifier","src":"2603:3:14"},"nativeSrc":"2603:16:14","nodeType":"YulFunctionCall","src":"2603:16:14"},"variables":[{"name":"dst","nativeSrc":"2596:3:14","nodeType":"YulTypedName","src":"2596:3:14","type":""}]},{"body":{"nativeSrc":"2657:83:14","nodeType":"YulBlock","src":"2657:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"2659:77:14","nodeType":"YulIdentifier","src":"2659:77:14"},"nativeSrc":"2659:79:14","nodeType":"YulFunctionCall","src":"2659:79:14"},"nativeSrc":"2659:79:14","nodeType":"YulExpressionStatement","src":"2659:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"2638:3:14","nodeType":"YulIdentifier","src":"2638:3:14"},{"name":"length","nativeSrc":"2643:6:14","nodeType":"YulIdentifier","src":"2643:6:14"}],"functionName":{"name":"add","nativeSrc":"2634:3:14","nodeType":"YulIdentifier","src":"2634:3:14"},"nativeSrc":"2634:16:14","nodeType":"YulFunctionCall","src":"2634:16:14"},{"name":"end","nativeSrc":"2652:3:14","nodeType":"YulIdentifier","src":"2652:3:14"}],"functionName":{"name":"gt","nativeSrc":"2631:2:14","nodeType":"YulIdentifier","src":"2631:2:14"},"nativeSrc":"2631:25:14","nodeType":"YulFunctionCall","src":"2631:25:14"},"nativeSrc":"2628:112:14","nodeType":"YulIf","src":"2628:112:14"},{"expression":{"arguments":[{"name":"src","nativeSrc":"2784:3:14","nodeType":"YulIdentifier","src":"2784:3:14"},{"name":"dst","nativeSrc":"2789:3:14","nodeType":"YulIdentifier","src":"2789:3:14"},{"name":"length","nativeSrc":"2794:6:14","nodeType":"YulIdentifier","src":"2794:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2749:34:14","nodeType":"YulIdentifier","src":"2749:34:14"},"nativeSrc":"2749:52:14","nodeType":"YulFunctionCall","src":"2749:52:14"},"nativeSrc":"2749:52:14","nodeType":"YulExpressionStatement","src":"2749:52:14"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"2373:434:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"2441:3:14","nodeType":"YulTypedName","src":"2441:3:14","type":""},{"name":"length","nativeSrc":"2446:6:14","nodeType":"YulTypedName","src":"2446:6:14","type":""},{"name":"end","nativeSrc":"2454:3:14","nodeType":"YulTypedName","src":"2454:3:14","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2462:5:14","nodeType":"YulTypedName","src":"2462:5:14","type":""}],"src":"2373:434:14"},{"body":{"nativeSrc":"2900:282:14","nodeType":"YulBlock","src":"2900:282:14","statements":[{"body":{"nativeSrc":"2949:83:14","nodeType":"YulBlock","src":"2949:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"2951:77:14","nodeType":"YulIdentifier","src":"2951:77:14"},"nativeSrc":"2951:79:14","nodeType":"YulFunctionCall","src":"2951:79:14"},"nativeSrc":"2951:79:14","nodeType":"YulExpressionStatement","src":"2951:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2928:6:14","nodeType":"YulIdentifier","src":"2928:6:14"},{"kind":"number","nativeSrc":"2936:4:14","nodeType":"YulLiteral","src":"2936:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2924:3:14","nodeType":"YulIdentifier","src":"2924:3:14"},"nativeSrc":"2924:17:14","nodeType":"YulFunctionCall","src":"2924:17:14"},{"name":"end","nativeSrc":"2943:3:14","nodeType":"YulIdentifier","src":"2943:3:14"}],"functionName":{"name":"slt","nativeSrc":"2920:3:14","nodeType":"YulIdentifier","src":"2920:3:14"},"nativeSrc":"2920:27:14","nodeType":"YulFunctionCall","src":"2920:27:14"}],"functionName":{"name":"iszero","nativeSrc":"2913:6:14","nodeType":"YulIdentifier","src":"2913:6:14"},"nativeSrc":"2913:35:14","nodeType":"YulFunctionCall","src":"2913:35:14"},"nativeSrc":"2910:122:14","nodeType":"YulIf","src":"2910:122:14"},{"nativeSrc":"3041:27:14","nodeType":"YulVariableDeclaration","src":"3041:27:14","value":{"arguments":[{"name":"offset","nativeSrc":"3061:6:14","nodeType":"YulIdentifier","src":"3061:6:14"}],"functionName":{"name":"mload","nativeSrc":"3055:5:14","nodeType":"YulIdentifier","src":"3055:5:14"},"nativeSrc":"3055:13:14","nodeType":"YulFunctionCall","src":"3055:13:14"},"variables":[{"name":"length","nativeSrc":"3045:6:14","nodeType":"YulTypedName","src":"3045:6:14","type":""}]},{"nativeSrc":"3077:99:14","nodeType":"YulAssignment","src":"3077:99:14","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3149:6:14","nodeType":"YulIdentifier","src":"3149:6:14"},{"kind":"number","nativeSrc":"3157:4:14","nodeType":"YulLiteral","src":"3157:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3145:3:14","nodeType":"YulIdentifier","src":"3145:3:14"},"nativeSrc":"3145:17:14","nodeType":"YulFunctionCall","src":"3145:17:14"},{"name":"length","nativeSrc":"3164:6:14","nodeType":"YulIdentifier","src":"3164:6:14"},{"name":"end","nativeSrc":"3172:3:14","nodeType":"YulIdentifier","src":"3172:3:14"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nativeSrc":"3086:58:14","nodeType":"YulIdentifier","src":"3086:58:14"},"nativeSrc":"3086:90:14","nodeType":"YulFunctionCall","src":"3086:90:14"},"variableNames":[{"name":"array","nativeSrc":"3077:5:14","nodeType":"YulIdentifier","src":"3077:5:14"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"2827:355:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2878:6:14","nodeType":"YulTypedName","src":"2878:6:14","type":""},{"name":"end","nativeSrc":"2886:3:14","nodeType":"YulTypedName","src":"2886:3:14","type":""}],"returnVariables":[{"name":"array","nativeSrc":"2894:5:14","nodeType":"YulTypedName","src":"2894:5:14","type":""}],"src":"2827:355:14"},{"body":{"nativeSrc":"3346:1181:14","nodeType":"YulBlock","src":"3346:1181:14","statements":[{"body":{"nativeSrc":"3393:83:14","nodeType":"YulBlock","src":"3393:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3395:77:14","nodeType":"YulIdentifier","src":"3395:77:14"},"nativeSrc":"3395:79:14","nodeType":"YulFunctionCall","src":"3395:79:14"},"nativeSrc":"3395:79:14","nodeType":"YulExpressionStatement","src":"3395:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3367:7:14","nodeType":"YulIdentifier","src":"3367:7:14"},{"name":"headStart","nativeSrc":"3376:9:14","nodeType":"YulIdentifier","src":"3376:9:14"}],"functionName":{"name":"sub","nativeSrc":"3363:3:14","nodeType":"YulIdentifier","src":"3363:3:14"},"nativeSrc":"3363:23:14","nodeType":"YulFunctionCall","src":"3363:23:14"},{"kind":"number","nativeSrc":"3388:3:14","nodeType":"YulLiteral","src":"3388:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3359:3:14","nodeType":"YulIdentifier","src":"3359:3:14"},"nativeSrc":"3359:33:14","nodeType":"YulFunctionCall","src":"3359:33:14"},"nativeSrc":"3356:120:14","nodeType":"YulIf","src":"3356:120:14"},{"nativeSrc":"3486:128:14","nodeType":"YulBlock","src":"3486:128:14","statements":[{"nativeSrc":"3501:15:14","nodeType":"YulVariableDeclaration","src":"3501:15:14","value":{"kind":"number","nativeSrc":"3515:1:14","nodeType":"YulLiteral","src":"3515:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3505:6:14","nodeType":"YulTypedName","src":"3505:6:14","type":""}]},{"nativeSrc":"3530:74:14","nodeType":"YulAssignment","src":"3530:74:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3576:9:14","nodeType":"YulIdentifier","src":"3576:9:14"},{"name":"offset","nativeSrc":"3587:6:14","nodeType":"YulIdentifier","src":"3587:6:14"}],"functionName":{"name":"add","nativeSrc":"3572:3:14","nodeType":"YulIdentifier","src":"3572:3:14"},"nativeSrc":"3572:22:14","nodeType":"YulFunctionCall","src":"3572:22:14"},{"name":"dataEnd","nativeSrc":"3596:7:14","nodeType":"YulIdentifier","src":"3596:7:14"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nativeSrc":"3540:31:14","nodeType":"YulIdentifier","src":"3540:31:14"},"nativeSrc":"3540:64:14","nodeType":"YulFunctionCall","src":"3540:64:14"},"variableNames":[{"name":"value0","nativeSrc":"3530:6:14","nodeType":"YulIdentifier","src":"3530:6:14"}]}]},{"nativeSrc":"3624:292:14","nodeType":"YulBlock","src":"3624:292:14","statements":[{"nativeSrc":"3639:39:14","nodeType":"YulVariableDeclaration","src":"3639:39:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3663:9:14","nodeType":"YulIdentifier","src":"3663:9:14"},{"kind":"number","nativeSrc":"3674:2:14","nodeType":"YulLiteral","src":"3674:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3659:3:14","nodeType":"YulIdentifier","src":"3659:3:14"},"nativeSrc":"3659:18:14","nodeType":"YulFunctionCall","src":"3659:18:14"}],"functionName":{"name":"mload","nativeSrc":"3653:5:14","nodeType":"YulIdentifier","src":"3653:5:14"},"nativeSrc":"3653:25:14","nodeType":"YulFunctionCall","src":"3653:25:14"},"variables":[{"name":"offset","nativeSrc":"3643:6:14","nodeType":"YulTypedName","src":"3643:6:14","type":""}]},{"body":{"nativeSrc":"3725:83:14","nodeType":"YulBlock","src":"3725:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"3727:77:14","nodeType":"YulIdentifier","src":"3727:77:14"},"nativeSrc":"3727:79:14","nodeType":"YulFunctionCall","src":"3727:79:14"},"nativeSrc":"3727:79:14","nodeType":"YulExpressionStatement","src":"3727:79:14"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3697:6:14","nodeType":"YulIdentifier","src":"3697:6:14"},{"kind":"number","nativeSrc":"3705:18:14","nodeType":"YulLiteral","src":"3705:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3694:2:14","nodeType":"YulIdentifier","src":"3694:2:14"},"nativeSrc":"3694:30:14","nodeType":"YulFunctionCall","src":"3694:30:14"},"nativeSrc":"3691:117:14","nodeType":"YulIf","src":"3691:117:14"},{"nativeSrc":"3822:84:14","nodeType":"YulAssignment","src":"3822:84:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3878:9:14","nodeType":"YulIdentifier","src":"3878:9:14"},{"name":"offset","nativeSrc":"3889:6:14","nodeType":"YulIdentifier","src":"3889:6:14"}],"functionName":{"name":"add","nativeSrc":"3874:3:14","nodeType":"YulIdentifier","src":"3874:3:14"},"nativeSrc":"3874:22:14","nodeType":"YulFunctionCall","src":"3874:22:14"},{"name":"dataEnd","nativeSrc":"3898:7:14","nodeType":"YulIdentifier","src":"3898:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"3832:41:14","nodeType":"YulIdentifier","src":"3832:41:14"},"nativeSrc":"3832:74:14","nodeType":"YulFunctionCall","src":"3832:74:14"},"variableNames":[{"name":"value1","nativeSrc":"3822:6:14","nodeType":"YulIdentifier","src":"3822:6:14"}]}]},{"nativeSrc":"3926:292:14","nodeType":"YulBlock","src":"3926:292:14","statements":[{"nativeSrc":"3941:39:14","nodeType":"YulVariableDeclaration","src":"3941:39:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3965:9:14","nodeType":"YulIdentifier","src":"3965:9:14"},{"kind":"number","nativeSrc":"3976:2:14","nodeType":"YulLiteral","src":"3976:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3961:3:14","nodeType":"YulIdentifier","src":"3961:3:14"},"nativeSrc":"3961:18:14","nodeType":"YulFunctionCall","src":"3961:18:14"}],"functionName":{"name":"mload","nativeSrc":"3955:5:14","nodeType":"YulIdentifier","src":"3955:5:14"},"nativeSrc":"3955:25:14","nodeType":"YulFunctionCall","src":"3955:25:14"},"variables":[{"name":"offset","nativeSrc":"3945:6:14","nodeType":"YulTypedName","src":"3945:6:14","type":""}]},{"body":{"nativeSrc":"4027:83:14","nodeType":"YulBlock","src":"4027:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"4029:77:14","nodeType":"YulIdentifier","src":"4029:77:14"},"nativeSrc":"4029:79:14","nodeType":"YulFunctionCall","src":"4029:79:14"},"nativeSrc":"4029:79:14","nodeType":"YulExpressionStatement","src":"4029:79:14"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3999:6:14","nodeType":"YulIdentifier","src":"3999:6:14"},{"kind":"number","nativeSrc":"4007:18:14","nodeType":"YulLiteral","src":"4007:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3996:2:14","nodeType":"YulIdentifier","src":"3996:2:14"},"nativeSrc":"3996:30:14","nodeType":"YulFunctionCall","src":"3996:30:14"},"nativeSrc":"3993:117:14","nodeType":"YulIf","src":"3993:117:14"},{"nativeSrc":"4124:84:14","nodeType":"YulAssignment","src":"4124:84:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4180:9:14","nodeType":"YulIdentifier","src":"4180:9:14"},{"name":"offset","nativeSrc":"4191:6:14","nodeType":"YulIdentifier","src":"4191:6:14"}],"functionName":{"name":"add","nativeSrc":"4176:3:14","nodeType":"YulIdentifier","src":"4176:3:14"},"nativeSrc":"4176:22:14","nodeType":"YulFunctionCall","src":"4176:22:14"},{"name":"dataEnd","nativeSrc":"4200:7:14","nodeType":"YulIdentifier","src":"4200:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"4134:41:14","nodeType":"YulIdentifier","src":"4134:41:14"},"nativeSrc":"4134:74:14","nodeType":"YulFunctionCall","src":"4134:74:14"},"variableNames":[{"name":"value2","nativeSrc":"4124:6:14","nodeType":"YulIdentifier","src":"4124:6:14"}]}]},{"nativeSrc":"4228:292:14","nodeType":"YulBlock","src":"4228:292:14","statements":[{"nativeSrc":"4243:39:14","nodeType":"YulVariableDeclaration","src":"4243:39:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4267:9:14","nodeType":"YulIdentifier","src":"4267:9:14"},{"kind":"number","nativeSrc":"4278:2:14","nodeType":"YulLiteral","src":"4278:2:14","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4263:3:14","nodeType":"YulIdentifier","src":"4263:3:14"},"nativeSrc":"4263:18:14","nodeType":"YulFunctionCall","src":"4263:18:14"}],"functionName":{"name":"mload","nativeSrc":"4257:5:14","nodeType":"YulIdentifier","src":"4257:5:14"},"nativeSrc":"4257:25:14","nodeType":"YulFunctionCall","src":"4257:25:14"},"variables":[{"name":"offset","nativeSrc":"4247:6:14","nodeType":"YulTypedName","src":"4247:6:14","type":""}]},{"body":{"nativeSrc":"4329:83:14","nodeType":"YulBlock","src":"4329:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"4331:77:14","nodeType":"YulIdentifier","src":"4331:77:14"},"nativeSrc":"4331:79:14","nodeType":"YulFunctionCall","src":"4331:79:14"},"nativeSrc":"4331:79:14","nodeType":"YulExpressionStatement","src":"4331:79:14"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4301:6:14","nodeType":"YulIdentifier","src":"4301:6:14"},{"kind":"number","nativeSrc":"4309:18:14","nodeType":"YulLiteral","src":"4309:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4298:2:14","nodeType":"YulIdentifier","src":"4298:2:14"},"nativeSrc":"4298:30:14","nodeType":"YulFunctionCall","src":"4298:30:14"},"nativeSrc":"4295:117:14","nodeType":"YulIf","src":"4295:117:14"},{"nativeSrc":"4426:84:14","nodeType":"YulAssignment","src":"4426:84:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4482:9:14","nodeType":"YulIdentifier","src":"4482:9:14"},{"name":"offset","nativeSrc":"4493:6:14","nodeType":"YulIdentifier","src":"4493:6:14"}],"functionName":{"name":"add","nativeSrc":"4478:3:14","nodeType":"YulIdentifier","src":"4478:3:14"},"nativeSrc":"4478:22:14","nodeType":"YulFunctionCall","src":"4478:22:14"},{"name":"dataEnd","nativeSrc":"4502:7:14","nodeType":"YulIdentifier","src":"4502:7:14"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nativeSrc":"4436:41:14","nodeType":"YulIdentifier","src":"4436:41:14"},"nativeSrc":"4436:74:14","nodeType":"YulFunctionCall","src":"4436:74:14"},"variableNames":[{"name":"value3","nativeSrc":"4426:6:14","nodeType":"YulIdentifier","src":"4426:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory","nativeSrc":"3188:1339:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3292:9:14","nodeType":"YulTypedName","src":"3292:9:14","type":""},{"name":"dataEnd","nativeSrc":"3303:7:14","nodeType":"YulTypedName","src":"3303:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3315:6:14","nodeType":"YulTypedName","src":"3315:6:14","type":""},{"name":"value1","nativeSrc":"3323:6:14","nodeType":"YulTypedName","src":"3323:6:14","type":""},{"name":"value2","nativeSrc":"3331:6:14","nodeType":"YulTypedName","src":"3331:6:14","type":""},{"name":"value3","nativeSrc":"3339:6:14","nodeType":"YulTypedName","src":"3339:6:14","type":""}],"src":"3188:1339:14"},{"body":{"nativeSrc":"4592:40:14","nodeType":"YulBlock","src":"4592:40:14","statements":[{"nativeSrc":"4603:22:14","nodeType":"YulAssignment","src":"4603:22:14","value":{"arguments":[{"name":"value","nativeSrc":"4619:5:14","nodeType":"YulIdentifier","src":"4619:5:14"}],"functionName":{"name":"mload","nativeSrc":"4613:5:14","nodeType":"YulIdentifier","src":"4613:5:14"},"nativeSrc":"4613:12:14","nodeType":"YulFunctionCall","src":"4613:12:14"},"variableNames":[{"name":"length","nativeSrc":"4603:6:14","nodeType":"YulIdentifier","src":"4603:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"4533:99:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4575:5:14","nodeType":"YulTypedName","src":"4575:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"4585:6:14","nodeType":"YulTypedName","src":"4585:6:14","type":""}],"src":"4533:99:14"},{"body":{"nativeSrc":"4666:152:14","nodeType":"YulBlock","src":"4666:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4683:1:14","nodeType":"YulLiteral","src":"4683:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"4686:77:14","nodeType":"YulLiteral","src":"4686:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4676:6:14","nodeType":"YulIdentifier","src":"4676:6:14"},"nativeSrc":"4676:88:14","nodeType":"YulFunctionCall","src":"4676:88:14"},"nativeSrc":"4676:88:14","nodeType":"YulExpressionStatement","src":"4676:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4780:1:14","nodeType":"YulLiteral","src":"4780:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"4783:4:14","nodeType":"YulLiteral","src":"4783:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"4773:6:14","nodeType":"YulIdentifier","src":"4773:6:14"},"nativeSrc":"4773:15:14","nodeType":"YulFunctionCall","src":"4773:15:14"},"nativeSrc":"4773:15:14","nodeType":"YulExpressionStatement","src":"4773:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4804:1:14","nodeType":"YulLiteral","src":"4804:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"4807:4:14","nodeType":"YulLiteral","src":"4807:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4797:6:14","nodeType":"YulIdentifier","src":"4797:6:14"},"nativeSrc":"4797:15:14","nodeType":"YulFunctionCall","src":"4797:15:14"},"nativeSrc":"4797:15:14","nodeType":"YulExpressionStatement","src":"4797:15:14"}]},"name":"panic_error_0x22","nativeSrc":"4638:180:14","nodeType":"YulFunctionDefinition","src":"4638:180:14"},{"body":{"nativeSrc":"4875:269:14","nodeType":"YulBlock","src":"4875:269:14","statements":[{"nativeSrc":"4885:22:14","nodeType":"YulAssignment","src":"4885:22:14","value":{"arguments":[{"name":"data","nativeSrc":"4899:4:14","nodeType":"YulIdentifier","src":"4899:4:14"},{"kind":"number","nativeSrc":"4905:1:14","nodeType":"YulLiteral","src":"4905:1:14","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"4895:3:14","nodeType":"YulIdentifier","src":"4895:3:14"},"nativeSrc":"4895:12:14","nodeType":"YulFunctionCall","src":"4895:12:14"},"variableNames":[{"name":"length","nativeSrc":"4885:6:14","nodeType":"YulIdentifier","src":"4885:6:14"}]},{"nativeSrc":"4916:38:14","nodeType":"YulVariableDeclaration","src":"4916:38:14","value":{"arguments":[{"name":"data","nativeSrc":"4946:4:14","nodeType":"YulIdentifier","src":"4946:4:14"},{"kind":"number","nativeSrc":"4952:1:14","nodeType":"YulLiteral","src":"4952:1:14","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"4942:3:14","nodeType":"YulIdentifier","src":"4942:3:14"},"nativeSrc":"4942:12:14","nodeType":"YulFunctionCall","src":"4942:12:14"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"4920:18:14","nodeType":"YulTypedName","src":"4920:18:14","type":""}]},{"body":{"nativeSrc":"4993:51:14","nodeType":"YulBlock","src":"4993:51:14","statements":[{"nativeSrc":"5007:27:14","nodeType":"YulAssignment","src":"5007:27:14","value":{"arguments":[{"name":"length","nativeSrc":"5021:6:14","nodeType":"YulIdentifier","src":"5021:6:14"},{"kind":"number","nativeSrc":"5029:4:14","nodeType":"YulLiteral","src":"5029:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"5017:3:14","nodeType":"YulIdentifier","src":"5017:3:14"},"nativeSrc":"5017:17:14","nodeType":"YulFunctionCall","src":"5017:17:14"},"variableNames":[{"name":"length","nativeSrc":"5007:6:14","nodeType":"YulIdentifier","src":"5007:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"4973:18:14","nodeType":"YulIdentifier","src":"4973:18:14"}],"functionName":{"name":"iszero","nativeSrc":"4966:6:14","nodeType":"YulIdentifier","src":"4966:6:14"},"nativeSrc":"4966:26:14","nodeType":"YulFunctionCall","src":"4966:26:14"},"nativeSrc":"4963:81:14","nodeType":"YulIf","src":"4963:81:14"},{"body":{"nativeSrc":"5096:42:14","nodeType":"YulBlock","src":"5096:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"5110:16:14","nodeType":"YulIdentifier","src":"5110:16:14"},"nativeSrc":"5110:18:14","nodeType":"YulFunctionCall","src":"5110:18:14"},"nativeSrc":"5110:18:14","nodeType":"YulExpressionStatement","src":"5110:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"5060:18:14","nodeType":"YulIdentifier","src":"5060:18:14"},{"arguments":[{"name":"length","nativeSrc":"5083:6:14","nodeType":"YulIdentifier","src":"5083:6:14"},{"kind":"number","nativeSrc":"5091:2:14","nodeType":"YulLiteral","src":"5091:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"5080:2:14","nodeType":"YulIdentifier","src":"5080:2:14"},"nativeSrc":"5080:14:14","nodeType":"YulFunctionCall","src":"5080:14:14"}],"functionName":{"name":"eq","nativeSrc":"5057:2:14","nodeType":"YulIdentifier","src":"5057:2:14"},"nativeSrc":"5057:38:14","nodeType":"YulFunctionCall","src":"5057:38:14"},"nativeSrc":"5054:84:14","nodeType":"YulIf","src":"5054:84:14"}]},"name":"extract_byte_array_length","nativeSrc":"4824:320:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"4859:4:14","nodeType":"YulTypedName","src":"4859:4:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"4868:6:14","nodeType":"YulTypedName","src":"4868:6:14","type":""}],"src":"4824:320:14"},{"body":{"nativeSrc":"5204:87:14","nodeType":"YulBlock","src":"5204:87:14","statements":[{"nativeSrc":"5214:11:14","nodeType":"YulAssignment","src":"5214:11:14","value":{"name":"ptr","nativeSrc":"5222:3:14","nodeType":"YulIdentifier","src":"5222:3:14"},"variableNames":[{"name":"data","nativeSrc":"5214:4:14","nodeType":"YulIdentifier","src":"5214:4:14"}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5242:1:14","nodeType":"YulLiteral","src":"5242:1:14","type":"","value":"0"},{"name":"ptr","nativeSrc":"5245:3:14","nodeType":"YulIdentifier","src":"5245:3:14"}],"functionName":{"name":"mstore","nativeSrc":"5235:6:14","nodeType":"YulIdentifier","src":"5235:6:14"},"nativeSrc":"5235:14:14","nodeType":"YulFunctionCall","src":"5235:14:14"},"nativeSrc":"5235:14:14","nodeType":"YulExpressionStatement","src":"5235:14:14"},{"nativeSrc":"5258:26:14","nodeType":"YulAssignment","src":"5258:26:14","value":{"arguments":[{"kind":"number","nativeSrc":"5276:1:14","nodeType":"YulLiteral","src":"5276:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"5279:4:14","nodeType":"YulLiteral","src":"5279:4:14","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"5266:9:14","nodeType":"YulIdentifier","src":"5266:9:14"},"nativeSrc":"5266:18:14","nodeType":"YulFunctionCall","src":"5266:18:14"},"variableNames":[{"name":"data","nativeSrc":"5258:4:14","nodeType":"YulIdentifier","src":"5258:4:14"}]}]},"name":"array_dataslot_t_string_storage","nativeSrc":"5150:141:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"5191:3:14","nodeType":"YulTypedName","src":"5191:3:14","type":""}],"returnVariables":[{"name":"data","nativeSrc":"5199:4:14","nodeType":"YulTypedName","src":"5199:4:14","type":""}],"src":"5150:141:14"},{"body":{"nativeSrc":"5341:49:14","nodeType":"YulBlock","src":"5341:49:14","statements":[{"nativeSrc":"5351:33:14","nodeType":"YulAssignment","src":"5351:33:14","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5369:5:14","nodeType":"YulIdentifier","src":"5369:5:14"},{"kind":"number","nativeSrc":"5376:2:14","nodeType":"YulLiteral","src":"5376:2:14","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"5365:3:14","nodeType":"YulIdentifier","src":"5365:3:14"},"nativeSrc":"5365:14:14","nodeType":"YulFunctionCall","src":"5365:14:14"},{"kind":"number","nativeSrc":"5381:2:14","nodeType":"YulLiteral","src":"5381:2:14","type":"","value":"32"}],"functionName":{"name":"div","nativeSrc":"5361:3:14","nodeType":"YulIdentifier","src":"5361:3:14"},"nativeSrc":"5361:23:14","nodeType":"YulFunctionCall","src":"5361:23:14"},"variableNames":[{"name":"result","nativeSrc":"5351:6:14","nodeType":"YulIdentifier","src":"5351:6:14"}]}]},"name":"divide_by_32_ceil","nativeSrc":"5297:93:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5324:5:14","nodeType":"YulTypedName","src":"5324:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"5334:6:14","nodeType":"YulTypedName","src":"5334:6:14","type":""}],"src":"5297:93:14"},{"body":{"nativeSrc":"5449:54:14","nodeType":"YulBlock","src":"5449:54:14","statements":[{"nativeSrc":"5459:37:14","nodeType":"YulAssignment","src":"5459:37:14","value":{"arguments":[{"name":"bits","nativeSrc":"5484:4:14","nodeType":"YulIdentifier","src":"5484:4:14"},{"name":"value","nativeSrc":"5490:5:14","nodeType":"YulIdentifier","src":"5490:5:14"}],"functionName":{"name":"shl","nativeSrc":"5480:3:14","nodeType":"YulIdentifier","src":"5480:3:14"},"nativeSrc":"5480:16:14","nodeType":"YulFunctionCall","src":"5480:16:14"},"variableNames":[{"name":"newValue","nativeSrc":"5459:8:14","nodeType":"YulIdentifier","src":"5459:8:14"}]}]},"name":"shift_left_dynamic","nativeSrc":"5396:107:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"5424:4:14","nodeType":"YulTypedName","src":"5424:4:14","type":""},{"name":"value","nativeSrc":"5430:5:14","nodeType":"YulTypedName","src":"5430:5:14","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"5440:8:14","nodeType":"YulTypedName","src":"5440:8:14","type":""}],"src":"5396:107:14"},{"body":{"nativeSrc":"5585:317:14","nodeType":"YulBlock","src":"5585:317:14","statements":[{"nativeSrc":"5595:35:14","nodeType":"YulVariableDeclaration","src":"5595:35:14","value":{"arguments":[{"name":"shiftBytes","nativeSrc":"5616:10:14","nodeType":"YulIdentifier","src":"5616:10:14"},{"kind":"number","nativeSrc":"5628:1:14","nodeType":"YulLiteral","src":"5628:1:14","type":"","value":"8"}],"functionName":{"name":"mul","nativeSrc":"5612:3:14","nodeType":"YulIdentifier","src":"5612:3:14"},"nativeSrc":"5612:18:14","nodeType":"YulFunctionCall","src":"5612:18:14"},"variables":[{"name":"shiftBits","nativeSrc":"5599:9:14","nodeType":"YulTypedName","src":"5599:9:14","type":""}]},{"nativeSrc":"5639:109:14","nodeType":"YulVariableDeclaration","src":"5639:109:14","value":{"arguments":[{"name":"shiftBits","nativeSrc":"5670:9:14","nodeType":"YulIdentifier","src":"5670:9:14"},{"kind":"number","nativeSrc":"5681:66:14","nodeType":"YulLiteral","src":"5681:66:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"5651:18:14","nodeType":"YulIdentifier","src":"5651:18:14"},"nativeSrc":"5651:97:14","nodeType":"YulFunctionCall","src":"5651:97:14"},"variables":[{"name":"mask","nativeSrc":"5643:4:14","nodeType":"YulTypedName","src":"5643:4:14","type":""}]},{"nativeSrc":"5757:51:14","nodeType":"YulAssignment","src":"5757:51:14","value":{"arguments":[{"name":"shiftBits","nativeSrc":"5788:9:14","nodeType":"YulIdentifier","src":"5788:9:14"},{"name":"toInsert","nativeSrc":"5799:8:14","nodeType":"YulIdentifier","src":"5799:8:14"}],"functionName":{"name":"shift_left_dynamic","nativeSrc":"5769:18:14","nodeType":"YulIdentifier","src":"5769:18:14"},"nativeSrc":"5769:39:14","nodeType":"YulFunctionCall","src":"5769:39:14"},"variableNames":[{"name":"toInsert","nativeSrc":"5757:8:14","nodeType":"YulIdentifier","src":"5757:8:14"}]},{"nativeSrc":"5817:30:14","nodeType":"YulAssignment","src":"5817:30:14","value":{"arguments":[{"name":"value","nativeSrc":"5830:5:14","nodeType":"YulIdentifier","src":"5830:5:14"},{"arguments":[{"name":"mask","nativeSrc":"5841:4:14","nodeType":"YulIdentifier","src":"5841:4:14"}],"functionName":{"name":"not","nativeSrc":"5837:3:14","nodeType":"YulIdentifier","src":"5837:3:14"},"nativeSrc":"5837:9:14","nodeType":"YulFunctionCall","src":"5837:9:14"}],"functionName":{"name":"and","nativeSrc":"5826:3:14","nodeType":"YulIdentifier","src":"5826:3:14"},"nativeSrc":"5826:21:14","nodeType":"YulFunctionCall","src":"5826:21:14"},"variableNames":[{"name":"value","nativeSrc":"5817:5:14","nodeType":"YulIdentifier","src":"5817:5:14"}]},{"nativeSrc":"5856:40:14","nodeType":"YulAssignment","src":"5856:40:14","value":{"arguments":[{"name":"value","nativeSrc":"5869:5:14","nodeType":"YulIdentifier","src":"5869:5:14"},{"arguments":[{"name":"toInsert","nativeSrc":"5880:8:14","nodeType":"YulIdentifier","src":"5880:8:14"},{"name":"mask","nativeSrc":"5890:4:14","nodeType":"YulIdentifier","src":"5890:4:14"}],"functionName":{"name":"and","nativeSrc":"5876:3:14","nodeType":"YulIdentifier","src":"5876:3:14"},"nativeSrc":"5876:19:14","nodeType":"YulFunctionCall","src":"5876:19:14"}],"functionName":{"name":"or","nativeSrc":"5866:2:14","nodeType":"YulIdentifier","src":"5866:2:14"},"nativeSrc":"5866:30:14","nodeType":"YulFunctionCall","src":"5866:30:14"},"variableNames":[{"name":"result","nativeSrc":"5856:6:14","nodeType":"YulIdentifier","src":"5856:6:14"}]}]},"name":"update_byte_slice_dynamic32","nativeSrc":"5509:393:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5546:5:14","nodeType":"YulTypedName","src":"5546:5:14","type":""},{"name":"shiftBytes","nativeSrc":"5553:10:14","nodeType":"YulTypedName","src":"5553:10:14","type":""},{"name":"toInsert","nativeSrc":"5565:8:14","nodeType":"YulTypedName","src":"5565:8:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"5578:6:14","nodeType":"YulTypedName","src":"5578:6:14","type":""}],"src":"5509:393:14"},{"body":{"nativeSrc":"5953:32:14","nodeType":"YulBlock","src":"5953:32:14","statements":[{"nativeSrc":"5963:16:14","nodeType":"YulAssignment","src":"5963:16:14","value":{"name":"value","nativeSrc":"5974:5:14","nodeType":"YulIdentifier","src":"5974:5:14"},"variableNames":[{"name":"cleaned","nativeSrc":"5963:7:14","nodeType":"YulIdentifier","src":"5963:7:14"}]}]},"name":"cleanup_t_uint256","nativeSrc":"5908:77:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5935:5:14","nodeType":"YulTypedName","src":"5935:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"5945:7:14","nodeType":"YulTypedName","src":"5945:7:14","type":""}],"src":"5908:77:14"},{"body":{"nativeSrc":"6023:28:14","nodeType":"YulBlock","src":"6023:28:14","statements":[{"nativeSrc":"6033:12:14","nodeType":"YulAssignment","src":"6033:12:14","value":{"name":"value","nativeSrc":"6040:5:14","nodeType":"YulIdentifier","src":"6040:5:14"},"variableNames":[{"name":"ret","nativeSrc":"6033:3:14","nodeType":"YulIdentifier","src":"6033:3:14"}]}]},"name":"identity","nativeSrc":"5991:60:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6009:5:14","nodeType":"YulTypedName","src":"6009:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"6019:3:14","nodeType":"YulTypedName","src":"6019:3:14","type":""}],"src":"5991:60:14"},{"body":{"nativeSrc":"6117:82:14","nodeType":"YulBlock","src":"6117:82:14","statements":[{"nativeSrc":"6127:66:14","nodeType":"YulAssignment","src":"6127:66:14","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6185:5:14","nodeType":"YulIdentifier","src":"6185:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6167:17:14","nodeType":"YulIdentifier","src":"6167:17:14"},"nativeSrc":"6167:24:14","nodeType":"YulFunctionCall","src":"6167:24:14"}],"functionName":{"name":"identity","nativeSrc":"6158:8:14","nodeType":"YulIdentifier","src":"6158:8:14"},"nativeSrc":"6158:34:14","nodeType":"YulFunctionCall","src":"6158:34:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"6140:17:14","nodeType":"YulIdentifier","src":"6140:17:14"},"nativeSrc":"6140:53:14","nodeType":"YulFunctionCall","src":"6140:53:14"},"variableNames":[{"name":"converted","nativeSrc":"6127:9:14","nodeType":"YulIdentifier","src":"6127:9:14"}]}]},"name":"convert_t_uint256_to_t_uint256","nativeSrc":"6057:142:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6097:5:14","nodeType":"YulTypedName","src":"6097:5:14","type":""}],"returnVariables":[{"name":"converted","nativeSrc":"6107:9:14","nodeType":"YulTypedName","src":"6107:9:14","type":""}],"src":"6057:142:14"},{"body":{"nativeSrc":"6252:28:14","nodeType":"YulBlock","src":"6252:28:14","statements":[{"nativeSrc":"6262:12:14","nodeType":"YulAssignment","src":"6262:12:14","value":{"name":"value","nativeSrc":"6269:5:14","nodeType":"YulIdentifier","src":"6269:5:14"},"variableNames":[{"name":"ret","nativeSrc":"6262:3:14","nodeType":"YulIdentifier","src":"6262:3:14"}]}]},"name":"prepare_store_t_uint256","nativeSrc":"6205:75:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6238:5:14","nodeType":"YulTypedName","src":"6238:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"6248:3:14","nodeType":"YulTypedName","src":"6248:3:14","type":""}],"src":"6205:75:14"},{"body":{"nativeSrc":"6362:193:14","nodeType":"YulBlock","src":"6362:193:14","statements":[{"nativeSrc":"6372:63:14","nodeType":"YulVariableDeclaration","src":"6372:63:14","value":{"arguments":[{"name":"value_0","nativeSrc":"6427:7:14","nodeType":"YulIdentifier","src":"6427:7:14"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nativeSrc":"6396:30:14","nodeType":"YulIdentifier","src":"6396:30:14"},"nativeSrc":"6396:39:14","nodeType":"YulFunctionCall","src":"6396:39:14"},"variables":[{"name":"convertedValue_0","nativeSrc":"6376:16:14","nodeType":"YulTypedName","src":"6376:16:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6451:4:14","nodeType":"YulIdentifier","src":"6451:4:14"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"6491:4:14","nodeType":"YulIdentifier","src":"6491:4:14"}],"functionName":{"name":"sload","nativeSrc":"6485:5:14","nodeType":"YulIdentifier","src":"6485:5:14"},"nativeSrc":"6485:11:14","nodeType":"YulFunctionCall","src":"6485:11:14"},{"name":"offset","nativeSrc":"6498:6:14","nodeType":"YulIdentifier","src":"6498:6:14"},{"arguments":[{"name":"convertedValue_0","nativeSrc":"6530:16:14","nodeType":"YulIdentifier","src":"6530:16:14"}],"functionName":{"name":"prepare_store_t_uint256","nativeSrc":"6506:23:14","nodeType":"YulIdentifier","src":"6506:23:14"},"nativeSrc":"6506:41:14","nodeType":"YulFunctionCall","src":"6506:41:14"}],"functionName":{"name":"update_byte_slice_dynamic32","nativeSrc":"6457:27:14","nodeType":"YulIdentifier","src":"6457:27:14"},"nativeSrc":"6457:91:14","nodeType":"YulFunctionCall","src":"6457:91:14"}],"functionName":{"name":"sstore","nativeSrc":"6444:6:14","nodeType":"YulIdentifier","src":"6444:6:14"},"nativeSrc":"6444:105:14","nodeType":"YulFunctionCall","src":"6444:105:14"},"nativeSrc":"6444:105:14","nodeType":"YulExpressionStatement","src":"6444:105:14"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"6286:269:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"6339:4:14","nodeType":"YulTypedName","src":"6339:4:14","type":""},{"name":"offset","nativeSrc":"6345:6:14","nodeType":"YulTypedName","src":"6345:6:14","type":""},{"name":"value_0","nativeSrc":"6353:7:14","nodeType":"YulTypedName","src":"6353:7:14","type":""}],"src":"6286:269:14"},{"body":{"nativeSrc":"6610:24:14","nodeType":"YulBlock","src":"6610:24:14","statements":[{"nativeSrc":"6620:8:14","nodeType":"YulAssignment","src":"6620:8:14","value":{"kind":"number","nativeSrc":"6627:1:14","nodeType":"YulLiteral","src":"6627:1:14","type":"","value":"0"},"variableNames":[{"name":"ret","nativeSrc":"6620:3:14","nodeType":"YulIdentifier","src":"6620:3:14"}]}]},"name":"zero_value_for_split_t_uint256","nativeSrc":"6561:73:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nativeSrc":"6606:3:14","nodeType":"YulTypedName","src":"6606:3:14","type":""}],"src":"6561:73:14"},{"body":{"nativeSrc":"6693:136:14","nodeType":"YulBlock","src":"6693:136:14","statements":[{"nativeSrc":"6703:46:14","nodeType":"YulVariableDeclaration","src":"6703:46:14","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nativeSrc":"6717:30:14","nodeType":"YulIdentifier","src":"6717:30:14"},"nativeSrc":"6717:32:14","nodeType":"YulFunctionCall","src":"6717:32:14"},"variables":[{"name":"zero_0","nativeSrc":"6707:6:14","nodeType":"YulTypedName","src":"6707:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"6802:4:14","nodeType":"YulIdentifier","src":"6802:4:14"},{"name":"offset","nativeSrc":"6808:6:14","nodeType":"YulIdentifier","src":"6808:6:14"},{"name":"zero_0","nativeSrc":"6816:6:14","nodeType":"YulIdentifier","src":"6816:6:14"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nativeSrc":"6758:43:14","nodeType":"YulIdentifier","src":"6758:43:14"},"nativeSrc":"6758:65:14","nodeType":"YulFunctionCall","src":"6758:65:14"},"nativeSrc":"6758:65:14","nodeType":"YulExpressionStatement","src":"6758:65:14"}]},"name":"storage_set_to_zero_t_uint256","nativeSrc":"6640:189:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"6679:4:14","nodeType":"YulTypedName","src":"6679:4:14","type":""},{"name":"offset","nativeSrc":"6685:6:14","nodeType":"YulTypedName","src":"6685:6:14","type":""}],"src":"6640:189:14"},{"body":{"nativeSrc":"6885:136:14","nodeType":"YulBlock","src":"6885:136:14","statements":[{"body":{"nativeSrc":"6952:63:14","nodeType":"YulBlock","src":"6952:63:14","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"6996:5:14","nodeType":"YulIdentifier","src":"6996:5:14"},{"kind":"number","nativeSrc":"7003:1:14","nodeType":"YulLiteral","src":"7003:1:14","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nativeSrc":"6966:29:14","nodeType":"YulIdentifier","src":"6966:29:14"},"nativeSrc":"6966:39:14","nodeType":"YulFunctionCall","src":"6966:39:14"},"nativeSrc":"6966:39:14","nodeType":"YulExpressionStatement","src":"6966:39:14"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"6905:5:14","nodeType":"YulIdentifier","src":"6905:5:14"},{"name":"end","nativeSrc":"6912:3:14","nodeType":"YulIdentifier","src":"6912:3:14"}],"functionName":{"name":"lt","nativeSrc":"6902:2:14","nodeType":"YulIdentifier","src":"6902:2:14"},"nativeSrc":"6902:14:14","nodeType":"YulFunctionCall","src":"6902:14:14"},"nativeSrc":"6895:120:14","nodeType":"YulForLoop","post":{"nativeSrc":"6917:26:14","nodeType":"YulBlock","src":"6917:26:14","statements":[{"nativeSrc":"6919:22:14","nodeType":"YulAssignment","src":"6919:22:14","value":{"arguments":[{"name":"start","nativeSrc":"6932:5:14","nodeType":"YulIdentifier","src":"6932:5:14"},{"kind":"number","nativeSrc":"6939:1:14","nodeType":"YulLiteral","src":"6939:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"6928:3:14","nodeType":"YulIdentifier","src":"6928:3:14"},"nativeSrc":"6928:13:14","nodeType":"YulFunctionCall","src":"6928:13:14"},"variableNames":[{"name":"start","nativeSrc":"6919:5:14","nodeType":"YulIdentifier","src":"6919:5:14"}]}]},"pre":{"nativeSrc":"6899:2:14","nodeType":"YulBlock","src":"6899:2:14","statements":[]},"src":"6895:120:14"}]},"name":"clear_storage_range_t_bytes1","nativeSrc":"6835:186:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6873:5:14","nodeType":"YulTypedName","src":"6873:5:14","type":""},{"name":"end","nativeSrc":"6880:3:14","nodeType":"YulTypedName","src":"6880:3:14","type":""}],"src":"6835:186:14"},{"body":{"nativeSrc":"7106:464:14","nodeType":"YulBlock","src":"7106:464:14","statements":[{"body":{"nativeSrc":"7132:431:14","nodeType":"YulBlock","src":"7132:431:14","statements":[{"nativeSrc":"7146:54:14","nodeType":"YulVariableDeclaration","src":"7146:54:14","value":{"arguments":[{"name":"array","nativeSrc":"7194:5:14","nodeType":"YulIdentifier","src":"7194:5:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"7162:31:14","nodeType":"YulIdentifier","src":"7162:31:14"},"nativeSrc":"7162:38:14","nodeType":"YulFunctionCall","src":"7162:38:14"},"variables":[{"name":"dataArea","nativeSrc":"7150:8:14","nodeType":"YulTypedName","src":"7150:8:14","type":""}]},{"nativeSrc":"7213:63:14","nodeType":"YulVariableDeclaration","src":"7213:63:14","value":{"arguments":[{"name":"dataArea","nativeSrc":"7236:8:14","nodeType":"YulIdentifier","src":"7236:8:14"},{"arguments":[{"name":"startIndex","nativeSrc":"7264:10:14","nodeType":"YulIdentifier","src":"7264:10:14"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"7246:17:14","nodeType":"YulIdentifier","src":"7246:17:14"},"nativeSrc":"7246:29:14","nodeType":"YulFunctionCall","src":"7246:29:14"}],"functionName":{"name":"add","nativeSrc":"7232:3:14","nodeType":"YulIdentifier","src":"7232:3:14"},"nativeSrc":"7232:44:14","nodeType":"YulFunctionCall","src":"7232:44:14"},"variables":[{"name":"deleteStart","nativeSrc":"7217:11:14","nodeType":"YulTypedName","src":"7217:11:14","type":""}]},{"body":{"nativeSrc":"7433:27:14","nodeType":"YulBlock","src":"7433:27:14","statements":[{"nativeSrc":"7435:23:14","nodeType":"YulAssignment","src":"7435:23:14","value":{"name":"dataArea","nativeSrc":"7450:8:14","nodeType":"YulIdentifier","src":"7450:8:14"},"variableNames":[{"name":"deleteStart","nativeSrc":"7435:11:14","nodeType":"YulIdentifier","src":"7435:11:14"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"7417:10:14","nodeType":"YulIdentifier","src":"7417:10:14"},{"kind":"number","nativeSrc":"7429:2:14","nodeType":"YulLiteral","src":"7429:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"7414:2:14","nodeType":"YulIdentifier","src":"7414:2:14"},"nativeSrc":"7414:18:14","nodeType":"YulFunctionCall","src":"7414:18:14"},"nativeSrc":"7411:49:14","nodeType":"YulIf","src":"7411:49:14"},{"expression":{"arguments":[{"name":"deleteStart","nativeSrc":"7502:11:14","nodeType":"YulIdentifier","src":"7502:11:14"},{"arguments":[{"name":"dataArea","nativeSrc":"7519:8:14","nodeType":"YulIdentifier","src":"7519:8:14"},{"arguments":[{"name":"len","nativeSrc":"7547:3:14","nodeType":"YulIdentifier","src":"7547:3:14"}],"functionName":{"name":"divide_by_32_ceil","nativeSrc":"7529:17:14","nodeType":"YulIdentifier","src":"7529:17:14"},"nativeSrc":"7529:22:14","nodeType":"YulFunctionCall","src":"7529:22:14"}],"functionName":{"name":"add","nativeSrc":"7515:3:14","nodeType":"YulIdentifier","src":"7515:3:14"},"nativeSrc":"7515:37:14","nodeType":"YulFunctionCall","src":"7515:37:14"}],"functionName":{"name":"clear_storage_range_t_bytes1","nativeSrc":"7473:28:14","nodeType":"YulIdentifier","src":"7473:28:14"},"nativeSrc":"7473:80:14","nodeType":"YulFunctionCall","src":"7473:80:14"},"nativeSrc":"7473:80:14","nodeType":"YulExpressionStatement","src":"7473:80:14"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"7123:3:14","nodeType":"YulIdentifier","src":"7123:3:14"},{"kind":"number","nativeSrc":"7128:2:14","nodeType":"YulLiteral","src":"7128:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"7120:2:14","nodeType":"YulIdentifier","src":"7120:2:14"},"nativeSrc":"7120:11:14","nodeType":"YulFunctionCall","src":"7120:11:14"},"nativeSrc":"7117:446:14","nodeType":"YulIf","src":"7117:446:14"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"7027:543:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"7082:5:14","nodeType":"YulTypedName","src":"7082:5:14","type":""},{"name":"len","nativeSrc":"7089:3:14","nodeType":"YulTypedName","src":"7089:3:14","type":""},{"name":"startIndex","nativeSrc":"7094:10:14","nodeType":"YulTypedName","src":"7094:10:14","type":""}],"src":"7027:543:14"},{"body":{"nativeSrc":"7639:54:14","nodeType":"YulBlock","src":"7639:54:14","statements":[{"nativeSrc":"7649:37:14","nodeType":"YulAssignment","src":"7649:37:14","value":{"arguments":[{"name":"bits","nativeSrc":"7674:4:14","nodeType":"YulIdentifier","src":"7674:4:14"},{"name":"value","nativeSrc":"7680:5:14","nodeType":"YulIdentifier","src":"7680:5:14"}],"functionName":{"name":"shr","nativeSrc":"7670:3:14","nodeType":"YulIdentifier","src":"7670:3:14"},"nativeSrc":"7670:16:14","nodeType":"YulFunctionCall","src":"7670:16:14"},"variableNames":[{"name":"newValue","nativeSrc":"7649:8:14","nodeType":"YulIdentifier","src":"7649:8:14"}]}]},"name":"shift_right_unsigned_dynamic","nativeSrc":"7576:117:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nativeSrc":"7614:4:14","nodeType":"YulTypedName","src":"7614:4:14","type":""},{"name":"value","nativeSrc":"7620:5:14","nodeType":"YulTypedName","src":"7620:5:14","type":""}],"returnVariables":[{"name":"newValue","nativeSrc":"7630:8:14","nodeType":"YulTypedName","src":"7630:8:14","type":""}],"src":"7576:117:14"},{"body":{"nativeSrc":"7750:118:14","nodeType":"YulBlock","src":"7750:118:14","statements":[{"nativeSrc":"7760:68:14","nodeType":"YulVariableDeclaration","src":"7760:68:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"7809:1:14","nodeType":"YulLiteral","src":"7809:1:14","type":"","value":"8"},{"name":"bytes","nativeSrc":"7812:5:14","nodeType":"YulIdentifier","src":"7812:5:14"}],"functionName":{"name":"mul","nativeSrc":"7805:3:14","nodeType":"YulIdentifier","src":"7805:3:14"},"nativeSrc":"7805:13:14","nodeType":"YulFunctionCall","src":"7805:13:14"},{"arguments":[{"kind":"number","nativeSrc":"7824:1:14","nodeType":"YulLiteral","src":"7824:1:14","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"7820:3:14","nodeType":"YulIdentifier","src":"7820:3:14"},"nativeSrc":"7820:6:14","nodeType":"YulFunctionCall","src":"7820:6:14"}],"functionName":{"name":"shift_right_unsigned_dynamic","nativeSrc":"7776:28:14","nodeType":"YulIdentifier","src":"7776:28:14"},"nativeSrc":"7776:51:14","nodeType":"YulFunctionCall","src":"7776:51:14"}],"functionName":{"name":"not","nativeSrc":"7772:3:14","nodeType":"YulIdentifier","src":"7772:3:14"},"nativeSrc":"7772:56:14","nodeType":"YulFunctionCall","src":"7772:56:14"},"variables":[{"name":"mask","nativeSrc":"7764:4:14","nodeType":"YulTypedName","src":"7764:4:14","type":""}]},{"nativeSrc":"7837:25:14","nodeType":"YulAssignment","src":"7837:25:14","value":{"arguments":[{"name":"data","nativeSrc":"7851:4:14","nodeType":"YulIdentifier","src":"7851:4:14"},{"name":"mask","nativeSrc":"7857:4:14","nodeType":"YulIdentifier","src":"7857:4:14"}],"functionName":{"name":"and","nativeSrc":"7847:3:14","nodeType":"YulIdentifier","src":"7847:3:14"},"nativeSrc":"7847:15:14","nodeType":"YulFunctionCall","src":"7847:15:14"},"variableNames":[{"name":"result","nativeSrc":"7837:6:14","nodeType":"YulIdentifier","src":"7837:6:14"}]}]},"name":"mask_bytes_dynamic","nativeSrc":"7699:169:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"7727:4:14","nodeType":"YulTypedName","src":"7727:4:14","type":""},{"name":"bytes","nativeSrc":"7733:5:14","nodeType":"YulTypedName","src":"7733:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"7743:6:14","nodeType":"YulTypedName","src":"7743:6:14","type":""}],"src":"7699:169:14"},{"body":{"nativeSrc":"7954:214:14","nodeType":"YulBlock","src":"7954:214:14","statements":[{"nativeSrc":"8087:37:14","nodeType":"YulAssignment","src":"8087:37:14","value":{"arguments":[{"name":"data","nativeSrc":"8114:4:14","nodeType":"YulIdentifier","src":"8114:4:14"},{"name":"len","nativeSrc":"8120:3:14","nodeType":"YulIdentifier","src":"8120:3:14"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"8095:18:14","nodeType":"YulIdentifier","src":"8095:18:14"},"nativeSrc":"8095:29:14","nodeType":"YulFunctionCall","src":"8095:29:14"},"variableNames":[{"name":"data","nativeSrc":"8087:4:14","nodeType":"YulIdentifier","src":"8087:4:14"}]},{"nativeSrc":"8133:29:14","nodeType":"YulAssignment","src":"8133:29:14","value":{"arguments":[{"name":"data","nativeSrc":"8144:4:14","nodeType":"YulIdentifier","src":"8144:4:14"},{"arguments":[{"kind":"number","nativeSrc":"8154:1:14","nodeType":"YulLiteral","src":"8154:1:14","type":"","value":"2"},{"name":"len","nativeSrc":"8157:3:14","nodeType":"YulIdentifier","src":"8157:3:14"}],"functionName":{"name":"mul","nativeSrc":"8150:3:14","nodeType":"YulIdentifier","src":"8150:3:14"},"nativeSrc":"8150:11:14","nodeType":"YulFunctionCall","src":"8150:11:14"}],"functionName":{"name":"or","nativeSrc":"8141:2:14","nodeType":"YulIdentifier","src":"8141:2:14"},"nativeSrc":"8141:21:14","nodeType":"YulFunctionCall","src":"8141:21:14"},"variableNames":[{"name":"used","nativeSrc":"8133:4:14","nodeType":"YulIdentifier","src":"8133:4:14"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"7873:295:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"7935:4:14","nodeType":"YulTypedName","src":"7935:4:14","type":""},{"name":"len","nativeSrc":"7941:3:14","nodeType":"YulTypedName","src":"7941:3:14","type":""}],"returnVariables":[{"name":"used","nativeSrc":"7949:4:14","nodeType":"YulTypedName","src":"7949:4:14","type":""}],"src":"7873:295:14"},{"body":{"nativeSrc":"8265:1303:14","nodeType":"YulBlock","src":"8265:1303:14","statements":[{"nativeSrc":"8276:51:14","nodeType":"YulVariableDeclaration","src":"8276:51:14","value":{"arguments":[{"name":"src","nativeSrc":"8323:3:14","nodeType":"YulIdentifier","src":"8323:3:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"8290:32:14","nodeType":"YulIdentifier","src":"8290:32:14"},"nativeSrc":"8290:37:14","nodeType":"YulFunctionCall","src":"8290:37:14"},"variables":[{"name":"newLen","nativeSrc":"8280:6:14","nodeType":"YulTypedName","src":"8280:6:14","type":""}]},{"body":{"nativeSrc":"8412:22:14","nodeType":"YulBlock","src":"8412:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8414:16:14","nodeType":"YulIdentifier","src":"8414:16:14"},"nativeSrc":"8414:18:14","nodeType":"YulFunctionCall","src":"8414:18:14"},"nativeSrc":"8414:18:14","nodeType":"YulExpressionStatement","src":"8414:18:14"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"8384:6:14","nodeType":"YulIdentifier","src":"8384:6:14"},{"kind":"number","nativeSrc":"8392:18:14","nodeType":"YulLiteral","src":"8392:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8381:2:14","nodeType":"YulIdentifier","src":"8381:2:14"},"nativeSrc":"8381:30:14","nodeType":"YulFunctionCall","src":"8381:30:14"},"nativeSrc":"8378:56:14","nodeType":"YulIf","src":"8378:56:14"},{"nativeSrc":"8444:52:14","nodeType":"YulVariableDeclaration","src":"8444:52:14","value":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"8490:4:14","nodeType":"YulIdentifier","src":"8490:4:14"}],"functionName":{"name":"sload","nativeSrc":"8484:5:14","nodeType":"YulIdentifier","src":"8484:5:14"},"nativeSrc":"8484:11:14","nodeType":"YulFunctionCall","src":"8484:11:14"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"8458:25:14","nodeType":"YulIdentifier","src":"8458:25:14"},"nativeSrc":"8458:38:14","nodeType":"YulFunctionCall","src":"8458:38:14"},"variables":[{"name":"oldLen","nativeSrc":"8448:6:14","nodeType":"YulTypedName","src":"8448:6:14","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"8589:4:14","nodeType":"YulIdentifier","src":"8589:4:14"},{"name":"oldLen","nativeSrc":"8595:6:14","nodeType":"YulIdentifier","src":"8595:6:14"},{"name":"newLen","nativeSrc":"8603:6:14","nodeType":"YulIdentifier","src":"8603:6:14"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nativeSrc":"8543:45:14","nodeType":"YulIdentifier","src":"8543:45:14"},"nativeSrc":"8543:67:14","nodeType":"YulFunctionCall","src":"8543:67:14"},"nativeSrc":"8543:67:14","nodeType":"YulExpressionStatement","src":"8543:67:14"},{"nativeSrc":"8620:18:14","nodeType":"YulVariableDeclaration","src":"8620:18:14","value":{"kind":"number","nativeSrc":"8637:1:14","nodeType":"YulLiteral","src":"8637:1:14","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"8624:9:14","nodeType":"YulTypedName","src":"8624:9:14","type":""}]},{"nativeSrc":"8648:17:14","nodeType":"YulAssignment","src":"8648:17:14","value":{"kind":"number","nativeSrc":"8661:4:14","nodeType":"YulLiteral","src":"8661:4:14","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"8648:9:14","nodeType":"YulIdentifier","src":"8648:9:14"}]},{"cases":[{"body":{"nativeSrc":"8712:611:14","nodeType":"YulBlock","src":"8712:611:14","statements":[{"nativeSrc":"8726:37:14","nodeType":"YulVariableDeclaration","src":"8726:37:14","value":{"arguments":[{"name":"newLen","nativeSrc":"8745:6:14","nodeType":"YulIdentifier","src":"8745:6:14"},{"arguments":[{"kind":"number","nativeSrc":"8757:4:14","nodeType":"YulLiteral","src":"8757:4:14","type":"","value":"0x1f"}],"functionName":{"name":"not","nativeSrc":"8753:3:14","nodeType":"YulIdentifier","src":"8753:3:14"},"nativeSrc":"8753:9:14","nodeType":"YulFunctionCall","src":"8753:9:14"}],"functionName":{"name":"and","nativeSrc":"8741:3:14","nodeType":"YulIdentifier","src":"8741:3:14"},"nativeSrc":"8741:22:14","nodeType":"YulFunctionCall","src":"8741:22:14"},"variables":[{"name":"loopEnd","nativeSrc":"8730:7:14","nodeType":"YulTypedName","src":"8730:7:14","type":""}]},{"nativeSrc":"8777:51:14","nodeType":"YulVariableDeclaration","src":"8777:51:14","value":{"arguments":[{"name":"slot","nativeSrc":"8823:4:14","nodeType":"YulIdentifier","src":"8823:4:14"}],"functionName":{"name":"array_dataslot_t_string_storage","nativeSrc":"8791:31:14","nodeType":"YulIdentifier","src":"8791:31:14"},"nativeSrc":"8791:37:14","nodeType":"YulFunctionCall","src":"8791:37:14"},"variables":[{"name":"dstPtr","nativeSrc":"8781:6:14","nodeType":"YulTypedName","src":"8781:6:14","type":""}]},{"nativeSrc":"8841:10:14","nodeType":"YulVariableDeclaration","src":"8841:10:14","value":{"kind":"number","nativeSrc":"8850:1:14","nodeType":"YulLiteral","src":"8850:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"8845:1:14","nodeType":"YulTypedName","src":"8845:1:14","type":""}]},{"body":{"nativeSrc":"8909:163:14","nodeType":"YulBlock","src":"8909:163:14","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"8934:6:14","nodeType":"YulIdentifier","src":"8934:6:14"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"8952:3:14","nodeType":"YulIdentifier","src":"8952:3:14"},{"name":"srcOffset","nativeSrc":"8957:9:14","nodeType":"YulIdentifier","src":"8957:9:14"}],"functionName":{"name":"add","nativeSrc":"8948:3:14","nodeType":"YulIdentifier","src":"8948:3:14"},"nativeSrc":"8948:19:14","nodeType":"YulFunctionCall","src":"8948:19:14"}],"functionName":{"name":"mload","nativeSrc":"8942:5:14","nodeType":"YulIdentifier","src":"8942:5:14"},"nativeSrc":"8942:26:14","nodeType":"YulFunctionCall","src":"8942:26:14"}],"functionName":{"name":"sstore","nativeSrc":"8927:6:14","nodeType":"YulIdentifier","src":"8927:6:14"},"nativeSrc":"8927:42:14","nodeType":"YulFunctionCall","src":"8927:42:14"},"nativeSrc":"8927:42:14","nodeType":"YulExpressionStatement","src":"8927:42:14"},{"nativeSrc":"8986:24:14","nodeType":"YulAssignment","src":"8986:24:14","value":{"arguments":[{"name":"dstPtr","nativeSrc":"9000:6:14","nodeType":"YulIdentifier","src":"9000:6:14"},{"kind":"number","nativeSrc":"9008:1:14","nodeType":"YulLiteral","src":"9008:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"8996:3:14","nodeType":"YulIdentifier","src":"8996:3:14"},"nativeSrc":"8996:14:14","nodeType":"YulFunctionCall","src":"8996:14:14"},"variableNames":[{"name":"dstPtr","nativeSrc":"8986:6:14","nodeType":"YulIdentifier","src":"8986:6:14"}]},{"nativeSrc":"9027:31:14","nodeType":"YulAssignment","src":"9027:31:14","value":{"arguments":[{"name":"srcOffset","nativeSrc":"9044:9:14","nodeType":"YulIdentifier","src":"9044:9:14"},{"kind":"number","nativeSrc":"9055:2:14","nodeType":"YulLiteral","src":"9055:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9040:3:14","nodeType":"YulIdentifier","src":"9040:3:14"},"nativeSrc":"9040:18:14","nodeType":"YulFunctionCall","src":"9040:18:14"},"variableNames":[{"name":"srcOffset","nativeSrc":"9027:9:14","nodeType":"YulIdentifier","src":"9027:9:14"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"8875:1:14","nodeType":"YulIdentifier","src":"8875:1:14"},{"name":"loopEnd","nativeSrc":"8878:7:14","nodeType":"YulIdentifier","src":"8878:7:14"}],"functionName":{"name":"lt","nativeSrc":"8872:2:14","nodeType":"YulIdentifier","src":"8872:2:14"},"nativeSrc":"8872:14:14","nodeType":"YulFunctionCall","src":"8872:14:14"},"nativeSrc":"8864:208:14","nodeType":"YulForLoop","post":{"nativeSrc":"8887:21:14","nodeType":"YulBlock","src":"8887:21:14","statements":[{"nativeSrc":"8889:17:14","nodeType":"YulAssignment","src":"8889:17:14","value":{"arguments":[{"name":"i","nativeSrc":"8898:1:14","nodeType":"YulIdentifier","src":"8898:1:14"},{"kind":"number","nativeSrc":"8901:4:14","nodeType":"YulLiteral","src":"8901:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"8894:3:14","nodeType":"YulIdentifier","src":"8894:3:14"},"nativeSrc":"8894:12:14","nodeType":"YulFunctionCall","src":"8894:12:14"},"variableNames":[{"name":"i","nativeSrc":"8889:1:14","nodeType":"YulIdentifier","src":"8889:1:14"}]}]},"pre":{"nativeSrc":"8868:3:14","nodeType":"YulBlock","src":"8868:3:14","statements":[]},"src":"8864:208:14"},{"body":{"nativeSrc":"9108:156:14","nodeType":"YulBlock","src":"9108:156:14","statements":[{"nativeSrc":"9126:43:14","nodeType":"YulVariableDeclaration","src":"9126:43:14","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"9153:3:14","nodeType":"YulIdentifier","src":"9153:3:14"},{"name":"srcOffset","nativeSrc":"9158:9:14","nodeType":"YulIdentifier","src":"9158:9:14"}],"functionName":{"name":"add","nativeSrc":"9149:3:14","nodeType":"YulIdentifier","src":"9149:3:14"},"nativeSrc":"9149:19:14","nodeType":"YulFunctionCall","src":"9149:19:14"}],"functionName":{"name":"mload","nativeSrc":"9143:5:14","nodeType":"YulIdentifier","src":"9143:5:14"},"nativeSrc":"9143:26:14","nodeType":"YulFunctionCall","src":"9143:26:14"},"variables":[{"name":"lastValue","nativeSrc":"9130:9:14","nodeType":"YulTypedName","src":"9130:9:14","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"9193:6:14","nodeType":"YulIdentifier","src":"9193:6:14"},{"arguments":[{"name":"lastValue","nativeSrc":"9220:9:14","nodeType":"YulIdentifier","src":"9220:9:14"},{"arguments":[{"name":"newLen","nativeSrc":"9235:6:14","nodeType":"YulIdentifier","src":"9235:6:14"},{"kind":"number","nativeSrc":"9243:4:14","nodeType":"YulLiteral","src":"9243:4:14","type":"","value":"0x1f"}],"functionName":{"name":"and","nativeSrc":"9231:3:14","nodeType":"YulIdentifier","src":"9231:3:14"},"nativeSrc":"9231:17:14","nodeType":"YulFunctionCall","src":"9231:17:14"}],"functionName":{"name":"mask_bytes_dynamic","nativeSrc":"9201:18:14","nodeType":"YulIdentifier","src":"9201:18:14"},"nativeSrc":"9201:48:14","nodeType":"YulFunctionCall","src":"9201:48:14"}],"functionName":{"name":"sstore","nativeSrc":"9186:6:14","nodeType":"YulIdentifier","src":"9186:6:14"},"nativeSrc":"9186:64:14","nodeType":"YulFunctionCall","src":"9186:64:14"},"nativeSrc":"9186:64:14","nodeType":"YulExpressionStatement","src":"9186:64:14"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"9091:7:14","nodeType":"YulIdentifier","src":"9091:7:14"},{"name":"newLen","nativeSrc":"9100:6:14","nodeType":"YulIdentifier","src":"9100:6:14"}],"functionName":{"name":"lt","nativeSrc":"9088:2:14","nodeType":"YulIdentifier","src":"9088:2:14"},"nativeSrc":"9088:19:14","nodeType":"YulFunctionCall","src":"9088:19:14"},"nativeSrc":"9085:179:14","nodeType":"YulIf","src":"9085:179:14"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"9284:4:14","nodeType":"YulIdentifier","src":"9284:4:14"},{"arguments":[{"arguments":[{"name":"newLen","nativeSrc":"9298:6:14","nodeType":"YulIdentifier","src":"9298:6:14"},{"kind":"number","nativeSrc":"9306:1:14","nodeType":"YulLiteral","src":"9306:1:14","type":"","value":"2"}],"functionName":{"name":"mul","nativeSrc":"9294:3:14","nodeType":"YulIdentifier","src":"9294:3:14"},"nativeSrc":"9294:14:14","nodeType":"YulFunctionCall","src":"9294:14:14"},{"kind":"number","nativeSrc":"9310:1:14","nodeType":"YulLiteral","src":"9310:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"9290:3:14","nodeType":"YulIdentifier","src":"9290:3:14"},"nativeSrc":"9290:22:14","nodeType":"YulFunctionCall","src":"9290:22:14"}],"functionName":{"name":"sstore","nativeSrc":"9277:6:14","nodeType":"YulIdentifier","src":"9277:6:14"},"nativeSrc":"9277:36:14","nodeType":"YulFunctionCall","src":"9277:36:14"},"nativeSrc":"9277:36:14","nodeType":"YulExpressionStatement","src":"9277:36:14"}]},"nativeSrc":"8705:618:14","nodeType":"YulCase","src":"8705:618:14","value":{"kind":"number","nativeSrc":"8710:1:14","nodeType":"YulLiteral","src":"8710:1:14","type":"","value":"1"}},{"body":{"nativeSrc":"9340:222:14","nodeType":"YulBlock","src":"9340:222:14","statements":[{"nativeSrc":"9354:14:14","nodeType":"YulVariableDeclaration","src":"9354:14:14","value":{"kind":"number","nativeSrc":"9367:1:14","nodeType":"YulLiteral","src":"9367:1:14","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"9358:5:14","nodeType":"YulTypedName","src":"9358:5:14","type":""}]},{"body":{"nativeSrc":"9391:67:14","nodeType":"YulBlock","src":"9391:67:14","statements":[{"nativeSrc":"9409:35:14","nodeType":"YulAssignment","src":"9409:35:14","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"9428:3:14","nodeType":"YulIdentifier","src":"9428:3:14"},{"name":"srcOffset","nativeSrc":"9433:9:14","nodeType":"YulIdentifier","src":"9433:9:14"}],"functionName":{"name":"add","nativeSrc":"9424:3:14","nodeType":"YulIdentifier","src":"9424:3:14"},"nativeSrc":"9424:19:14","nodeType":"YulFunctionCall","src":"9424:19:14"}],"functionName":{"name":"mload","nativeSrc":"9418:5:14","nodeType":"YulIdentifier","src":"9418:5:14"},"nativeSrc":"9418:26:14","nodeType":"YulFunctionCall","src":"9418:26:14"},"variableNames":[{"name":"value","nativeSrc":"9409:5:14","nodeType":"YulIdentifier","src":"9409:5:14"}]}]},"condition":{"name":"newLen","nativeSrc":"9384:6:14","nodeType":"YulIdentifier","src":"9384:6:14"},"nativeSrc":"9381:77:14","nodeType":"YulIf","src":"9381:77:14"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"9478:4:14","nodeType":"YulIdentifier","src":"9478:4:14"},{"arguments":[{"name":"value","nativeSrc":"9537:5:14","nodeType":"YulIdentifier","src":"9537:5:14"},{"name":"newLen","nativeSrc":"9544:6:14","nodeType":"YulIdentifier","src":"9544:6:14"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"9484:52:14","nodeType":"YulIdentifier","src":"9484:52:14"},"nativeSrc":"9484:67:14","nodeType":"YulFunctionCall","src":"9484:67:14"}],"functionName":{"name":"sstore","nativeSrc":"9471:6:14","nodeType":"YulIdentifier","src":"9471:6:14"},"nativeSrc":"9471:81:14","nodeType":"YulFunctionCall","src":"9471:81:14"},"nativeSrc":"9471:81:14","nodeType":"YulExpressionStatement","src":"9471:81:14"}]},"nativeSrc":"9332:230:14","nodeType":"YulCase","src":"9332:230:14","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"8685:6:14","nodeType":"YulIdentifier","src":"8685:6:14"},{"kind":"number","nativeSrc":"8693:2:14","nodeType":"YulLiteral","src":"8693:2:14","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"8682:2:14","nodeType":"YulIdentifier","src":"8682:2:14"},"nativeSrc":"8682:14:14","nodeType":"YulFunctionCall","src":"8682:14:14"},"nativeSrc":"8675:887:14","nodeType":"YulSwitch","src":"8675:887:14"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"8173:1395:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"8254:4:14","nodeType":"YulTypedName","src":"8254:4:14","type":""},{"name":"src","nativeSrc":"8260:3:14","nodeType":"YulTypedName","src":"8260:3:14","type":""}],"src":"8173:1395:14"},{"body":{"nativeSrc":"9639:53:14","nodeType":"YulBlock","src":"9639:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9656:3:14","nodeType":"YulIdentifier","src":"9656:3:14"},{"arguments":[{"name":"value","nativeSrc":"9679:5:14","nodeType":"YulIdentifier","src":"9679:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"9661:17:14","nodeType":"YulIdentifier","src":"9661:17:14"},"nativeSrc":"9661:24:14","nodeType":"YulFunctionCall","src":"9661:24:14"}],"functionName":{"name":"mstore","nativeSrc":"9649:6:14","nodeType":"YulIdentifier","src":"9649:6:14"},"nativeSrc":"9649:37:14","nodeType":"YulFunctionCall","src":"9649:37:14"},"nativeSrc":"9649:37:14","nodeType":"YulExpressionStatement","src":"9649:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"9574:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9627:5:14","nodeType":"YulTypedName","src":"9627:5:14","type":""},{"name":"pos","nativeSrc":"9634:3:14","nodeType":"YulTypedName","src":"9634:3:14","type":""}],"src":"9574:118:14"},{"body":{"nativeSrc":"9796:124:14","nodeType":"YulBlock","src":"9796:124:14","statements":[{"nativeSrc":"9806:26:14","nodeType":"YulAssignment","src":"9806:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"9818:9:14","nodeType":"YulIdentifier","src":"9818:9:14"},{"kind":"number","nativeSrc":"9829:2:14","nodeType":"YulLiteral","src":"9829:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9814:3:14","nodeType":"YulIdentifier","src":"9814:3:14"},"nativeSrc":"9814:18:14","nodeType":"YulFunctionCall","src":"9814:18:14"},"variableNames":[{"name":"tail","nativeSrc":"9806:4:14","nodeType":"YulIdentifier","src":"9806:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"9886:6:14","nodeType":"YulIdentifier","src":"9886:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"9899:9:14","nodeType":"YulIdentifier","src":"9899:9:14"},{"kind":"number","nativeSrc":"9910:1:14","nodeType":"YulLiteral","src":"9910:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"9895:3:14","nodeType":"YulIdentifier","src":"9895:3:14"},"nativeSrc":"9895:17:14","nodeType":"YulFunctionCall","src":"9895:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"9842:43:14","nodeType":"YulIdentifier","src":"9842:43:14"},"nativeSrc":"9842:71:14","nodeType":"YulFunctionCall","src":"9842:71:14"},"nativeSrc":"9842:71:14","nodeType":"YulExpressionStatement","src":"9842:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"9698:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9768:9:14","nodeType":"YulTypedName","src":"9768:9:14","type":""},{"name":"value0","nativeSrc":"9780:6:14","nodeType":"YulTypedName","src":"9780:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9791:4:14","nodeType":"YulTypedName","src":"9791:4:14","type":""}],"src":"9698:222:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162003714380380620037148339818101604052810190620000379190620003dc565b83838381600090816200004b9190620006f6565b5080600190816200005d9190620006f6565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000cc9190620007ee565b60405180910390fd5b620000e6816200011e60201b60201c565b508060089081620000f89190620006f6565b506001600c60006101000a81548160ff021916908315150217905550505050506200080b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022582620001f8565b9050919050565b620002378162000218565b81146200024357600080fd5b50565b60008151905062000257816200022c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b28262000267565b810181811067ffffffffffffffff82111715620002d457620002d362000278565b5b80604052505050565b6000620002e9620001e4565b9050620002f78282620002a7565b919050565b600067ffffffffffffffff8211156200031a576200031962000278565b5b620003258262000267565b9050602081019050919050565b60005b838110156200035257808201518184015260208101905062000335565b60008484015250505050565b6000620003756200036f84620002fc565b620002dd565b90508281526020810184848401111562000394576200039362000262565b5b620003a184828562000332565b509392505050565b600082601f830112620003c157620003c06200025d565b5b8151620003d38482602086016200035e565b91505092915050565b60008060008060808587031215620003f957620003f8620001ee565b5b6000620004098782880162000246565b945050602085015167ffffffffffffffff8111156200042d576200042c620001f3565b5b6200043b87828801620003a9565b935050604085015167ffffffffffffffff8111156200045f576200045e620001f3565b5b6200046d87828801620003a9565b925050606085015167ffffffffffffffff811115620004915762000490620001f3565b5b6200049f87828801620003a9565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004fe57607f821691505b602082108103620005145762000513620004b6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200057e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200053f565b6200058a86836200053f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005d7620005d1620005cb84620005a2565b620005ac565b620005a2565b9050919050565b6000819050919050565b620005f383620005b6565b6200060b6200060282620005de565b8484546200054c565b825550505050565b600090565b6200062262000613565b6200062f818484620005e8565b505050565b5b8181101562000657576200064b60008262000618565b60018101905062000635565b5050565b601f821115620006a65762000670816200051a565b6200067b846200052f565b810160208510156200068b578190505b620006a36200069a856200052f565b83018262000634565b50505b505050565b600082821c905092915050565b6000620006cb60001984600802620006ab565b1980831691505092915050565b6000620006e68383620006b8565b9150826002028217905092915050565b6200070182620004ab565b67ffffffffffffffff8111156200071d576200071c62000278565b5b620007298254620004e5565b620007368282856200065b565b600060209050601f8311600181146200076e576000841562000759578287015190505b620007658582620006d8565b865550620007d5565b601f1984166200077e866200051a565b60005b82811015620007a85784890151825560018201915060208501945060208101905062000781565b86831015620007c85784890151620007c4601f891682620006b8565b8355505b6001600288020188555050505b505050505050565b620007e88162000218565b82525050565b6000602082019050620008056000830184620007dd565b92915050565b612ef9806200081b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de5780639b4f7b2011610097578063bf96ae6311610071578063bf96ae6314610414578063c87b56dd1461041e578063e985e9c51461044e578063f2fde38b1461047e57610173565b80639b4f7b20146103d2578063a22cb465146103dc578063b88d4fde146103f857610173565b806370a0823114610320578063715018a6146103505780637824407f1461035a5780638af05318146103785780638da5cb5b1461039657806395d89b41146103b457610173565b806330bee0f11161013057806330bee0f11461025e57806340d097c31461027c57806342842e0e1461029857806354a18d57146102b45780635fe8e7cc146102d25780636352211e146102f057610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f657806323b872dd146102125780632a11ced01461022e575b600080fd5b610192600480360381019061018d91906122ac565b61049a565b60405161019f91906122f4565b60405180910390f35b6101b061057c565b6040516101bd919061239f565b60405180910390f35b6101e060048036038101906101db91906123f7565b61060e565b6040516101ed9190612465565b60405180910390f35b610210600480360381019061020b91906124ac565b61062a565b005b61022c600480360381019061022791906124ec565b610640565b005b610248600480360381019061024391906123f7565b6107ed565b6040516102559190612465565b60405180910390f35b61026661082c565b60405161027391906122f4565b60405180910390f35b6102966004803603810190610291919061253f565b61083f565b005b6102b260048036038101906102ad91906124ec565b610a17565b005b6102bc610a37565b6040516102c9919061239f565b60405180910390f35b6102da610ac5565b6040516102e7919061262a565b60405180910390f35b61030a600480360381019061030591906123f7565b610b53565b6040516103179190612465565b60405180910390f35b61033a6004803603810190610335919061253f565b610b65565b604051610347919061265b565b60405180910390f35b610358610c1f565b005b610362610c33565b60405161036f919061265b565b60405180910390f35b610380610c39565b60405161038d919061265b565b60405180910390f35b61039e610c3f565b6040516103ab9190612465565b60405180910390f35b6103bc610c69565b6040516103c9919061239f565b60405180910390f35b6103da610cfb565b005b6103f660048036038101906103f191906126a2565b610d2f565b005b610412600480360381019061040d9190612817565b610d45565b005b61041c610d62565b005b610438600480360381019061043391906123f7565b610eb0565b604051610445919061239f565b60405180910390f35b6104686004803603810190610463919061289a565b610f19565b60405161047591906122f4565b60405180910390f35b6104986004803603810190610493919061253f565b610fad565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610575575061057482611033565b5b9050919050565b60606000805461058b90612909565b80601f01602080910402602001604051908101604052809291908181526020018280546105b790612909565b80156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b5050505050905090565b60006106198261109d565b5061062382611125565b9050919050565b61063c8282610637611162565b61116a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906129ac565b60405180910390fd5b60006106ba83610b65565b146106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190612a18565b60405180910390fd5b600161070584610b65565b03610714576107138361117c565b5b600061071f83610b65565b036107dd57600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506107999190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6107e8838383611344565b505050565b600b81815481106107fd57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900460ff1681565b610847611446565b600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ca90612ae7565b60405180910390fd5b60006108de82610b65565b1461091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590612b53565b60405180910390fd5b60006007600081548092919061093390612b73565b91905055905061094382826114cd565b6009600081548092919061095690612b73565b9190505550600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506109d09190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610a3283838360405180602001604052806000815250610d45565b505050565b60088054610a4490612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7090612909565b8015610abd5780601f10610a9257610100808354040283529160200191610abd565b820191906000526020600020905b815481529060010190602001808311610aa057829003601f168201915b505050505081565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b4957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aff575b5050505050905090565b6000610b5e8261109d565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bd85760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610bcf9190612465565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c27611446565b610c3160006114eb565b565b60095481565b600a5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610c7890612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490612909565b8015610cf15780601f10610cc657610100808354040283529160200191610cf1565b820191906000526020600020905b815481529060010190602001808311610cd457829003601f168201915b5050505050905090565b610d03611446565b600c60009054906101000a900460ff1615600c60006101000a81548160ff021916908315150217905550565b610d41610d3a611162565b83836115b1565b5050565b610d50848484610640565b610d5c84848484611720565b50505050565b600c60009054906101000a900460ff16610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da890612c07565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3590612c73565b60405180910390fd5b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600a6000815480929190610ea990612b73565b9190505550565b6060610ebb8261109d565b506000610ec66118d7565b90506000815111610ee65760405180602001604052806000815250610f11565b80610ef084611969565b604051602001610f01929190612ccf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610fb5611446565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110275760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161101e9190612465565b60405180910390fd5b611030816114eb565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806110a983611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111c57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611113919061265b565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6111778383836001611a74565b505050565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b6001600b805490506111d69190612a67565b815481106111e7576111e6612cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600b838154811061122957611228612cf3565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b8054806112c7576112c6612d22565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113b65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113ad9190612465565b60405180910390fd5b60006113ca83836113c5611162565b611c39565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611440578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161143793929190612d51565b60405180910390fd5b50505050565b61144e611162565b73ffffffffffffffffffffffffffffffffffffffff1661146c610c3f565b73ffffffffffffffffffffffffffffffffffffffff16146114cb5761148f611162565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114c29190612465565b60405180910390fd5b565b6114e7828260405180602001604052806000815250611e53565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162257816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016116199190612465565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171391906122f4565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156118d1578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611764611162565b8685856040518563ffffffff1660e01b81526004016117869493929190612ddd565b6020604051808303816000875af19250505080156117c257506040513d601f19601f820116820180604052508101906117bf9190612e3e565b60015b611846573d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50600081510361183e57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118359190612465565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146118cf57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118c69190612465565b60405180910390fd5b505b50505050565b6060600880546118e690612909565b80601f016020809104026020016040519081016040528092919081815260200182805461191290612909565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b5050505050905090565b60606000600161197884611e6f565b01905060008167ffffffffffffffff811115611997576119966126ec565b5b6040519080825280601f01601f1916602001820160405280156119c95781602001600182028036833780820191505090505b509050600082602001820190505b600115611a2c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a2057611a1f612e6b565b5b049450600085036119d7575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611aad5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611be1576000611abd8461109d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b2857508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611b3b5750611b398184610f19565b155b15611b7d57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611b749190612465565b60405180910390fd5b8115611bdf57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600080611c4584611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c8757611c86818486611fc2565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d1857611cc9600085600080611a74565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611d9b576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b611e5d8383612086565b611e6a6000848484611720565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ecd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ec357611ec2612e6b565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f0a576d04ee2d6d415b85acef81000000008381611f0057611eff612e6b565b5b0492506020810190505b662386f26fc100008310611f3957662386f26fc100008381611f2f57611f2e612e6b565b5b0492506010810190505b6305f5e1008310611f62576305f5e1008381611f5857611f57612e6b565b5b0492506008810190505b6127108310611f87576127108381611f7d57611f7c612e6b565b5b0492506004810190505b60648310611faa5760648381611fa057611f9f612e6b565b5b0492506002810190505b600a8310611fb9576001810190505b80915050919050565b611fcd83838361217f565b61208157600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361204257806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612039919061265b565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612078929190612e9a565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120f85760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016120ef9190612465565b60405180910390fd5b600061210683836000611c39565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461217a5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016121719190612465565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561223757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806121f857506121f78484610f19565b5b8061223657508273ffffffffffffffffffffffffffffffffffffffff1661221e83611125565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61228981612254565b811461229457600080fd5b50565b6000813590506122a681612280565b92915050565b6000602082840312156122c2576122c161224a565b5b60006122d084828501612297565b91505092915050565b60008115159050919050565b6122ee816122d9565b82525050565b600060208201905061230960008301846122e5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561234957808201518184015260208101905061232e565b60008484015250505050565b6000601f19601f8301169050919050565b60006123718261230f565b61237b818561231a565b935061238b81856020860161232b565b61239481612355565b840191505092915050565b600060208201905081810360008301526123b98184612366565b905092915050565b6000819050919050565b6123d4816123c1565b81146123df57600080fd5b50565b6000813590506123f1816123cb565b92915050565b60006020828403121561240d5761240c61224a565b5b600061241b848285016123e2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244f82612424565b9050919050565b61245f81612444565b82525050565b600060208201905061247a6000830184612456565b92915050565b61248981612444565b811461249457600080fd5b50565b6000813590506124a681612480565b92915050565b600080604083850312156124c3576124c261224a565b5b60006124d185828601612497565b92505060206124e2858286016123e2565b9150509250929050565b6000806000606084860312156125055761250461224a565b5b600061251386828701612497565b935050602061252486828701612497565b9250506040612535868287016123e2565b9150509250925092565b6000602082840312156125555761255461224a565b5b600061256384828501612497565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125a181612444565b82525050565b60006125b38383612598565b60208301905092915050565b6000602082019050919050565b60006125d78261256c565b6125e18185612577565b93506125ec83612588565b8060005b8381101561261d57815161260488826125a7565b975061260f836125bf565b9250506001810190506125f0565b5085935050505092915050565b6000602082019050818103600083015261264481846125cc565b905092915050565b612655816123c1565b82525050565b6000602082019050612670600083018461264c565b92915050565b61267f816122d9565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b600080604083850312156126b9576126b861224a565b5b60006126c785828601612497565b92505060206126d88582860161268d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61272482612355565b810181811067ffffffffffffffff82111715612743576127426126ec565b5b80604052505050565b6000612756612240565b9050612762828261271b565b919050565b600067ffffffffffffffff821115612782576127816126ec565b5b61278b82612355565b9050602081019050919050565b82818337600083830152505050565b60006127ba6127b584612767565b61274c565b9050828152602081018484840111156127d6576127d56126e7565b5b6127e1848285612798565b509392505050565b600082601f8301126127fe576127fd6126e2565b5b813561280e8482602086016127a7565b91505092915050565b600080600080608085870312156128315761283061224a565b5b600061283f87828801612497565b945050602061285087828801612497565b9350506040612861878288016123e2565b925050606085013567ffffffffffffffff8111156128825761288161224f565b5b61288e878288016127e9565b91505092959194509250565b600080604083850312156128b1576128b061224a565b5b60006128bf85828601612497565b92505060206128d085828601612497565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061292157607f821691505b602082108103612934576129336128da565b5b50919050565b7f43616e6e6f74207472616e7366657220746f2061207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061299660218361231a565b91506129a18261293a565b604082019050919050565b600060208201905081810360008301526129c581612989565b9050919050565b7f526563697069656e7420616c7265616479206f776e73206120504f4150000000600082015250565b6000612a02601d8361231a565b9150612a0d826129cc565b602082019050919050565b60006020820190508181036000830152612a31816129f5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a72826123c1565b9150612a7d836123c1565b9250828203905081811115612a9557612a94612a38565b5b92915050565b7f4164647265737320686173206e6f74207369676e65642075702e000000000000600082015250565b6000612ad1601a8361231a565b9150612adc82612a9b565b602082019050919050565b60006020820190508181036000830152612b0081612ac4565b9050919050565b7f4164647265737320616c7265616479206f776e73206120504f41500000000000600082015250565b6000612b3d601b8361231a565b9150612b4882612b07565b602082019050919050565b60006020820190508181036000830152612b6c81612b30565b9050919050565b6000612b7e826123c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bb057612baf612a38565b5b600182019050919050565b7f5369676e2d757073206172652063757272656e746c792064697361626c65642e600082015250565b6000612bf160208361231a565b9150612bfc82612bbb565b602082019050919050565b60006020820190508181036000830152612c2081612be4565b9050919050565b7f596f75206861766520616c7265616479207369676e65642075702e0000000000600082015250565b6000612c5d601b8361231a565b9150612c6882612c27565b602082019050919050565b60006020820190508181036000830152612c8c81612c50565b9050919050565b600081905092915050565b6000612ca98261230f565b612cb38185612c93565b9350612cc381856020860161232b565b80840191505092915050565b6000612cdb8285612c9e565b9150612ce78284612c9e565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000606082019050612d666000830186612456565b612d73602083018561264c565b612d806040830184612456565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000612daf82612d88565b612db98185612d93565b9350612dc981856020860161232b565b612dd281612355565b840191505092915050565b6000608082019050612df26000830187612456565b612dff6020830186612456565b612e0c604083018561264c565b8181036060830152612e1e8184612da4565b905095945050505050565b600081519050612e3881612280565b92915050565b600060208284031215612e5457612e5361224a565b5b6000612e6284828501612e29565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000604082019050612eaf6000830185612456565b612ebc602083018461264c565b939250505056fea26469706673582212206dd576b79bb2ce0b45bc0be17068c095cc92612d30c302fb67e1b387076e2d8e64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3714 CODESIZE SUB DUP1 PUSH3 0x3714 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x3DC JUMP JUMPDEST DUP4 DUP4 DUP4 DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x4B SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0x5D SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xCC SWAP2 SWAP1 PUSH3 0x7EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xE6 DUP2 PUSH3 0x11E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP DUP1 PUSH1 0x8 SWAP1 DUP2 PUSH3 0xF8 SWAP2 SWAP1 PUSH3 0x6F6 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP PUSH3 0x80B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x225 DUP3 PUSH3 0x1F8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x237 DUP2 PUSH3 0x218 JUMP JUMPDEST DUP2 EQ PUSH3 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x257 DUP2 PUSH3 0x22C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x2B2 DUP3 PUSH3 0x267 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x2D3 PUSH3 0x278 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2E9 PUSH3 0x1E4 JUMP JUMPDEST SWAP1 POP PUSH3 0x2F7 DUP3 DUP3 PUSH3 0x2A7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x31A JUMPI PUSH3 0x319 PUSH3 0x278 JUMP JUMPDEST JUMPDEST PUSH3 0x325 DUP3 PUSH3 0x267 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x352 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x335 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x375 PUSH3 0x36F DUP5 PUSH3 0x2FC JUMP JUMPDEST PUSH3 0x2DD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x394 JUMPI PUSH3 0x393 PUSH3 0x262 JUMP JUMPDEST JUMPDEST PUSH3 0x3A1 DUP5 DUP3 DUP6 PUSH3 0x332 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3C1 JUMPI PUSH3 0x3C0 PUSH3 0x25D JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x3D3 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x35E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x3F9 JUMPI PUSH3 0x3F8 PUSH3 0x1EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x409 DUP8 DUP3 DUP9 ADD PUSH3 0x246 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x42D JUMPI PUSH3 0x42C PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x43B DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x45F JUMPI PUSH3 0x45E PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x46D DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x491 JUMPI PUSH3 0x490 PUSH3 0x1F3 JUMP JUMPDEST JUMPDEST PUSH3 0x49F DUP8 DUP3 DUP9 ADD PUSH3 0x3A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x4FE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x514 JUMPI PUSH3 0x513 PUSH3 0x4B6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x57E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x53F JUMP JUMPDEST PUSH3 0x58A DUP7 DUP4 PUSH3 0x53F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5D7 PUSH3 0x5D1 PUSH3 0x5CB DUP5 PUSH3 0x5A2 JUMP JUMPDEST PUSH3 0x5AC JUMP JUMPDEST PUSH3 0x5A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x5F3 DUP4 PUSH3 0x5B6 JUMP JUMPDEST PUSH3 0x60B PUSH3 0x602 DUP3 PUSH3 0x5DE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x54C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x622 PUSH3 0x613 JUMP JUMPDEST PUSH3 0x62F DUP2 DUP5 DUP5 PUSH3 0x5E8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x657 JUMPI PUSH3 0x64B PUSH1 0x0 DUP3 PUSH3 0x618 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x635 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x6A6 JUMPI PUSH3 0x670 DUP2 PUSH3 0x51A JUMP JUMPDEST PUSH3 0x67B DUP5 PUSH3 0x52F JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x68B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x6A3 PUSH3 0x69A DUP6 PUSH3 0x52F JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x634 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6CB PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x6AB JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6E6 DUP4 DUP4 PUSH3 0x6B8 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x701 DUP3 PUSH3 0x4AB JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x71D JUMPI PUSH3 0x71C PUSH3 0x278 JUMP JUMPDEST JUMPDEST PUSH3 0x729 DUP3 SLOAD PUSH3 0x4E5 JUMP JUMPDEST PUSH3 0x736 DUP3 DUP3 DUP6 PUSH3 0x65B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x76E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x759 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x765 DUP6 DUP3 PUSH3 0x6D8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x7D5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x77E DUP7 PUSH3 0x51A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x7A8 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x781 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x7C8 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x7C4 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x6B8 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x7E8 DUP2 PUSH3 0x218 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x805 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x7DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2EF9 DUP1 PUSH3 0x81B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9B4F7B20 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xBF96AE63 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBF96AE63 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x47E JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x9B4F7B20 EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3F8 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x7824407F EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x8AF05318 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3B4 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x30BEE0F1 GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x30BEE0F1 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x54A18D57 EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x5FE8E7CC EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2F0 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x2A11CED0 EQ PUSH2 0x22E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x22AC JUMP JUMPDEST PUSH2 0x49A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x24AC JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x227 SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x248 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0x83F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BC PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DA PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x262A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xB53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xB65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x358 PUSH2 0xC1F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x362 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x380 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39E PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3BC PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DA PUSH2 0xCFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F1 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST PUSH2 0xD2F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x412 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40D SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST PUSH2 0xD45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH2 0xD62 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x438 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xEB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x445 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x468 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x289A JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x475 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x498 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xFAD JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x565 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x575 JUMPI POP PUSH2 0x574 DUP3 PUSH2 0x1033 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x58B SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5B7 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x604 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x604 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH2 0x623 DUP3 PUSH2 0x1125 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x63C DUP3 DUP3 PUSH2 0x637 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A6 SWAP1 PUSH2 0x29AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6BA DUP4 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x6FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F1 SWAP1 PUSH2 0x2A18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x705 DUP5 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x714 JUMPI PUSH2 0x713 DUP4 PUSH2 0x117C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x71F DUP4 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x7DD JUMPI PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x799 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0x1344 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x7FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x847 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8CA SWAP1 PUSH2 0x2AE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x915 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x933 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x943 DUP3 DUP3 PUSH2 0x14CD JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x956 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x9D0 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xA32 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD45 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0xA44 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA70 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xABD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xABD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAA0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB49 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xAFF JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC27 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0xC31 PUSH1 0x0 PUSH2 0x14EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xC78 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCA4 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCC6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD03 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0xC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD41 PUSH2 0xD3A PUSH2 0x1162 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x15B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD50 DUP5 DUP5 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0xD5C DUP5 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA8 SWAP1 PUSH2 0x2C07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE35 SWAP1 PUSH2 0x2C73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xEA9 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEBB DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xEC6 PUSH2 0x18D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xEE6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF11 JUMP JUMPDEST DUP1 PUSH2 0xEF0 DUP5 PUSH2 0x1969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF01 SWAP3 SWAP2 SWAP1 PUSH2 0x2CCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFB5 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1027 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x101E SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1030 DUP2 PUSH2 0x14EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A9 DUP4 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x111C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1113 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1177 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1A74 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0xB PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x11D6 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x11E7 JUMPI PUSH2 0x11E6 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0xB DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1229 JUMPI PUSH2 0x1228 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xB DUP1 SLOAD DUP1 PUSH2 0x12C7 JUMPI PUSH2 0x12C6 PUSH2 0x2D22 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13B6 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AD SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13CA DUP4 DUP4 PUSH2 0x13C5 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1440 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1437 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x144E PUSH2 0x1162 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x146C PUSH2 0xC3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14CB JUMPI PUSH2 0x148F PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x14E7 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E53 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1622 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1619 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1713 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x18D1 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1764 PUSH2 0x1162 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1786 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x17C2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BF SWAP2 SWAP1 PUSH2 0x2E3E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1846 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x183E JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1835 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x18CF JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18C6 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x8 DUP1 SLOAD PUSH2 0x18E6 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1912 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x195F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1934 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x195F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1942 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1978 DUP5 PUSH2 0x1E6F JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1997 JUMPI PUSH2 0x1996 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19C9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1A2C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1A20 JUMPI PUSH2 0x1A1F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x19D7 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1AAD JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1BE1 JUMPI PUSH1 0x0 PUSH2 0x1ABD DUP5 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B28 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1B3B JUMPI POP PUSH2 0x1B39 DUP2 DUP5 PUSH2 0xF19 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B7D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B74 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1BDF JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C45 DUP5 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C87 JUMPI PUSH2 0x1C86 DUP2 DUP5 DUP7 PUSH2 0x1FC2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D18 JUMPI PUSH2 0x1CC9 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1A74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D9B JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E5D DUP4 DUP4 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x1E6A PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1ECD JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1EC3 JUMPI PUSH2 0x1EC2 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1F0A JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1F00 JUMPI PUSH2 0x1EFF PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1F39 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1F2F JUMPI PUSH2 0x1F2E PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1F62 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1F58 JUMPI PUSH2 0x1F57 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1F87 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1F7D JUMPI PUSH2 0x1F7C PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1FAA JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1FA0 JUMPI PUSH2 0x1F9F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1FB9 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FCD DUP4 DUP4 DUP4 PUSH2 0x217F JUMP JUMPDEST PUSH2 0x2081 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2042 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2039 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2078 SWAP3 SWAP2 SWAP1 PUSH2 0x2E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20F8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20EF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2106 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x217A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2171 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2237 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x21F8 JUMPI POP PUSH2 0x21F7 DUP5 DUP5 PUSH2 0xF19 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2236 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x221E DUP4 PUSH2 0x1125 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2289 DUP2 PUSH2 0x2254 JUMP JUMPDEST DUP2 EQ PUSH2 0x2294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22A6 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22C2 JUMPI PUSH2 0x22C1 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22D0 DUP5 DUP3 DUP6 ADD PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22EE DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2309 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2349 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x232E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2371 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x237B DUP2 DUP6 PUSH2 0x231A JUMP JUMPDEST SWAP4 POP PUSH2 0x238B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2394 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23B9 DUP2 DUP5 PUSH2 0x2366 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23D4 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP2 EQ PUSH2 0x23DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23F1 DUP2 PUSH2 0x23CB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x240D JUMPI PUSH2 0x240C PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x241B DUP5 DUP3 DUP6 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x244F DUP3 PUSH2 0x2424 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x245F DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x247A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2489 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP2 EQ PUSH2 0x2494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24A6 DUP2 PUSH2 0x2480 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C3 JUMPI PUSH2 0x24C2 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24E2 DUP6 DUP3 DUP7 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2505 JUMPI PUSH2 0x2504 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2513 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2524 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2535 DUP7 DUP3 DUP8 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2555 JUMPI PUSH2 0x2554 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2563 DUP5 DUP3 DUP6 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25A1 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B3 DUP4 DUP4 PUSH2 0x2598 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25D7 DUP3 PUSH2 0x256C JUMP JUMPDEST PUSH2 0x25E1 DUP2 DUP6 PUSH2 0x2577 JUMP JUMPDEST SWAP4 POP PUSH2 0x25EC DUP4 PUSH2 0x2588 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x261D JUMPI DUP2 MLOAD PUSH2 0x2604 DUP9 DUP3 PUSH2 0x25A7 JUMP JUMPDEST SWAP8 POP PUSH2 0x260F DUP4 PUSH2 0x25BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25F0 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2644 DUP2 DUP5 PUSH2 0x25CC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2655 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2670 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x267F DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x268A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x269C DUP2 PUSH2 0x2676 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26B9 JUMPI PUSH2 0x26B8 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26C7 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26D8 DUP6 DUP3 DUP7 ADD PUSH2 0x268D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2724 DUP3 PUSH2 0x2355 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2743 JUMPI PUSH2 0x2742 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2756 PUSH2 0x2240 JUMP JUMPDEST SWAP1 POP PUSH2 0x2762 DUP3 DUP3 PUSH2 0x271B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2782 JUMPI PUSH2 0x2781 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH2 0x278B DUP3 PUSH2 0x2355 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27BA PUSH2 0x27B5 DUP5 PUSH2 0x2767 JUMP JUMPDEST PUSH2 0x274C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x27D6 JUMPI PUSH2 0x27D5 PUSH2 0x26E7 JUMP JUMPDEST JUMPDEST PUSH2 0x27E1 DUP5 DUP3 DUP6 PUSH2 0x2798 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27FE JUMPI PUSH2 0x27FD PUSH2 0x26E2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x280E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27A7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2831 JUMPI PUSH2 0x2830 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x283F DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2850 DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2861 DUP8 DUP3 DUP9 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2882 JUMPI PUSH2 0x2881 PUSH2 0x224F JUMP JUMPDEST JUMPDEST PUSH2 0x288E DUP8 DUP3 DUP9 ADD PUSH2 0x27E9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28B1 JUMPI PUSH2 0x28B0 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28BF DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28D0 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2921 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2934 JUMPI PUSH2 0x2933 PUSH2 0x28DA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2061207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2996 PUSH1 0x21 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x29A1 DUP3 PUSH2 0x293A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29C5 DUP2 PUSH2 0x2989 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526563697069656E7420616C7265616479206F776E73206120504F4150000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A02 PUSH1 0x1D DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2A0D DUP3 PUSH2 0x29CC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A31 DUP2 PUSH2 0x29F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A72 DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A7D DUP4 PUSH2 0x23C1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2A95 JUMPI PUSH2 0x2A94 PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4164647265737320686173206E6F74207369676E65642075702E000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD1 PUSH1 0x1A DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2ADC DUP3 PUSH2 0x2A9B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B00 DUP2 PUSH2 0x2AC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4164647265737320616C7265616479206F776E73206120504F41500000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2B48 DUP3 PUSH2 0x2B07 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B6C DUP2 PUSH2 0x2B30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7E DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2BB0 JUMPI PUSH2 0x2BAF PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5369676E2D757073206172652063757272656E746C792064697361626C65642E PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF1 PUSH1 0x20 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2BFC DUP3 PUSH2 0x2BBB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C20 DUP2 PUSH2 0x2BE4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x596F75206861766520616C7265616479207369676E65642075702E0000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2C68 DUP3 PUSH2 0x2C27 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C8C DUP2 PUSH2 0x2C50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA9 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x2CB3 DUP2 DUP6 PUSH2 0x2C93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2CC3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CDB DUP3 DUP6 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CE7 DUP3 DUP5 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2D66 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2D73 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST PUSH2 0x2D80 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DAF DUP3 PUSH2 0x2D88 JUMP JUMPDEST PUSH2 0x2DB9 DUP2 DUP6 PUSH2 0x2D93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2DC9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2DD2 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DF2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2DFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2E0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2E1E DUP2 DUP5 PUSH2 0x2DA4 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E38 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E54 JUMPI PUSH2 0x2E53 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E62 DUP5 DUP3 DUP6 ADD PUSH2 0x2E29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EAF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2EBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xD576B79BB2CE0B45BC0BE17068C0 SWAP6 0xCC SWAP3 PUSH2 0x2D30 0xC3 MUL 0xFB PUSH8 0xE1B387076E2D8E64 PUSH20 0x6F6C634300081800330000000000000000000000 ","sourceMap":"218:2664:13:-:0;;;553:272;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;746:12;711:9;722:14;1455:5:2;1447;:13;;;;;;:::i;:::-;;1480:7;1470;:17;;;;;;:::i;:::-;;1381:113;;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;780:8:13::2;770:7;:18;;;;;;:::i;:::-;;814:4;798:13;;:20;;;;;;;;;;;;;;;;;;553:272:::0;;;;218:2664;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:117::-;954:1;951;944:12;968:117;1077:1;1074;1067:12;1091:102;1132:6;1183:2;1179:7;1174:2;1167:5;1163:14;1159:28;1149:38;;1091:102;;;:::o;1199:180::-;1247:77;1244:1;1237:88;1344:4;1341:1;1334:15;1368:4;1365:1;1358:15;1385:281;1468:27;1490:4;1468:27;:::i;:::-;1460:6;1456:40;1598:6;1586:10;1583:22;1562:18;1550:10;1547:34;1544:62;1541:88;;;1609:18;;:::i;:::-;1541:88;1649:10;1645:2;1638:22;1428:238;1385:281;;:::o;1672:129::-;1706:6;1733:20;;:::i;:::-;1723:30;;1762:33;1790:4;1782:6;1762:33;:::i;:::-;1672:129;;;:::o;1807:308::-;1869:4;1959:18;1951:6;1948:30;1945:56;;;1981:18;;:::i;:::-;1945:56;2019:29;2041:6;2019:29;:::i;:::-;2011:37;;2103:4;2097;2093:15;2085:23;;1807:308;;;:::o;2121:246::-;2202:1;2212:113;2226:6;2223:1;2220:13;2212:113;;;2311:1;2306:3;2302:11;2296:18;2292:1;2287:3;2283:11;2276:39;2248:2;2245:1;2241:10;2236:15;;2212:113;;;2359:1;2350:6;2345:3;2341:16;2334:27;2183:184;2121:246;;;:::o;2373:434::-;2462:5;2487:66;2503:49;2545:6;2503:49;:::i;:::-;2487:66;:::i;:::-;2478:75;;2576:6;2569:5;2562:21;2614:4;2607:5;2603:16;2652:3;2643:6;2638:3;2634:16;2631:25;2628:112;;;2659:79;;:::i;:::-;2628:112;2749:52;2794:6;2789:3;2784;2749:52;:::i;:::-;2468:339;2373:434;;;;;:::o;2827:355::-;2894:5;2943:3;2936:4;2928:6;2924:17;2920:27;2910:122;;2951:79;;:::i;:::-;2910:122;3061:6;3055:13;3086:90;3172:3;3164:6;3157:4;3149:6;3145:17;3086:90;:::i;:::-;3077:99;;2900:282;2827:355;;;;:::o;3188:1339::-;3315:6;3323;3331;3339;3388:3;3376:9;3367:7;3363:23;3359:33;3356:120;;;3395:79;;:::i;:::-;3356:120;3515:1;3540:64;3596:7;3587:6;3576:9;3572:22;3540:64;:::i;:::-;3530:74;;3486:128;3674:2;3663:9;3659:18;3653:25;3705:18;3697:6;3694:30;3691:117;;;3727:79;;:::i;:::-;3691:117;3832:74;3898:7;3889:6;3878:9;3874:22;3832:74;:::i;:::-;3822:84;;3624:292;3976:2;3965:9;3961:18;3955:25;4007:18;3999:6;3996:30;3993:117;;;4029:79;;:::i;:::-;3993:117;4134:74;4200:7;4191:6;4180:9;4176:22;4134:74;:::i;:::-;4124:84;;3926:292;4278:2;4267:9;4263:18;4257:25;4309:18;4301:6;4298:30;4295:117;;;4331:79;;:::i;:::-;4295:117;4436:74;4502:7;4493:6;4482:9;4478:22;4436:74;:::i;:::-;4426:84;;4228:292;3188:1339;;;;;;;:::o;4533:99::-;4585:6;4619:5;4613:12;4603:22;;4533:99;;;:::o;4638:180::-;4686:77;4683:1;4676:88;4783:4;4780:1;4773:15;4807:4;4804:1;4797:15;4824:320;4868:6;4905:1;4899:4;4895:12;4885:22;;4952:1;4946:4;4942:12;4973:18;4963:81;;5029:4;5021:6;5017:17;5007:27;;4963:81;5091:2;5083:6;5080:14;5060:18;5057:38;5054:84;;5110:18;;:::i;:::-;5054:84;4875:269;4824:320;;;:::o;5150:141::-;5199:4;5222:3;5214:11;;5245:3;5242:1;5235:14;5279:4;5276:1;5266:18;5258:26;;5150:141;;;:::o;5297:93::-;5334:6;5381:2;5376;5369:5;5365:14;5361:23;5351:33;;5297:93;;;:::o;5396:107::-;5440:8;5490:5;5484:4;5480:16;5459:37;;5396:107;;;;:::o;5509:393::-;5578:6;5628:1;5616:10;5612:18;5651:97;5681:66;5670:9;5651:97;:::i;:::-;5769:39;5799:8;5788:9;5769:39;:::i;:::-;5757:51;;5841:4;5837:9;5830:5;5826:21;5817:30;;5890:4;5880:8;5876:19;5869:5;5866:30;5856:40;;5585:317;;5509:393;;;;;:::o;5908:77::-;5945:7;5974:5;5963:16;;5908:77;;;:::o;5991:60::-;6019:3;6040:5;6033:12;;5991:60;;;:::o;6057:142::-;6107:9;6140:53;6158:34;6167:24;6185:5;6167:24;:::i;:::-;6158:34;:::i;:::-;6140:53;:::i;:::-;6127:66;;6057:142;;;:::o;6205:75::-;6248:3;6269:5;6262:12;;6205:75;;;:::o;6286:269::-;6396:39;6427:7;6396:39;:::i;:::-;6457:91;6506:41;6530:16;6506:41;:::i;:::-;6498:6;6491:4;6485:11;6457:91;:::i;:::-;6451:4;6444:105;6362:193;6286:269;;;:::o;6561:73::-;6606:3;6561:73;:::o;6640:189::-;6717:32;;:::i;:::-;6758:65;6816:6;6808;6802:4;6758:65;:::i;:::-;6693:136;6640:189;;:::o;6835:186::-;6895:120;6912:3;6905:5;6902:14;6895:120;;;6966:39;7003:1;6996:5;6966:39;:::i;:::-;6939:1;6932:5;6928:13;6919:22;;6895:120;;;6835:186;;:::o;7027:543::-;7128:2;7123:3;7120:11;7117:446;;;7162:38;7194:5;7162:38;:::i;:::-;7246:29;7264:10;7246:29;:::i;:::-;7236:8;7232:44;7429:2;7417:10;7414:18;7411:49;;;7450:8;7435:23;;7411:49;7473:80;7529:22;7547:3;7529:22;:::i;:::-;7519:8;7515:37;7502:11;7473:80;:::i;:::-;7132:431;;7117:446;7027:543;;;:::o;7576:117::-;7630:8;7680:5;7674:4;7670:16;7649:37;;7576:117;;;;:::o;7699:169::-;7743:6;7776:51;7824:1;7820:6;7812:5;7809:1;7805:13;7776:51;:::i;:::-;7772:56;7857:4;7851;7847:15;7837:25;;7750:118;7699:169;;;;:::o;7873:295::-;7949:4;8095:29;8120:3;8114:4;8095:29;:::i;:::-;8087:37;;8157:3;8154:1;8150:11;8144:4;8141:21;8133:29;;7873:295;;;;:::o;8173:1395::-;8290:37;8323:3;8290:37;:::i;:::-;8392:18;8384:6;8381:30;8378:56;;;8414:18;;:::i;:::-;8378:56;8458:38;8490:4;8484:11;8458:38;:::i;:::-;8543:67;8603:6;8595;8589:4;8543:67;:::i;:::-;8637:1;8661:4;8648:17;;8693:2;8685:6;8682:14;8710:1;8705:618;;;;9367:1;9384:6;9381:77;;;9433:9;9428:3;9424:19;9418:26;9409:35;;9381:77;9484:67;9544:6;9537:5;9484:67;:::i;:::-;9478:4;9471:81;9340:222;8675:887;;8705:618;8757:4;8753:9;8745:6;8741:22;8791:37;8823:4;8791:37;:::i;:::-;8850:1;8864:208;8878:7;8875:1;8872:14;8864:208;;;8957:9;8952:3;8948:19;8942:26;8934:6;8927:42;9008:1;9000:6;8996:14;8986:24;;9055:2;9044:9;9040:18;9027:31;;8901:4;8898:1;8894:12;8889:17;;8864:208;;;9100:6;9091:7;9088:19;9085:179;;;9158:9;9153:3;9149:19;9143:26;9201:48;9243:4;9235:6;9231:17;9220:9;9201:48;:::i;:::-;9193:6;9186:64;9108:156;9085:179;9310:1;9306;9298:6;9294:14;9290:22;9284:4;9277:36;8712:611;;;8675:887;;8265:1303;;;8173:1395;;:::o;9574:118::-;9661:24;9679:5;9661:24;:::i;:::-;9656:3;9649:37;9574:118;;:::o;9698:222::-;9791:4;9829:2;9818:9;9814:18;9806:26;;9842:71;9910:1;9899:9;9895:17;9886:6;9842:71;:::i;:::-;9698:222;;;;:::o;218:2664:13:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_approve_1096":{"entryPoint":4458,"id":1096,"parameterSlots":3,"returnSlots":0},"@_approve_1162":{"entryPoint":6772,"id":1162,"parameterSlots":4,"returnSlots":0},"@_baseURI_3061":{"entryPoint":6359,"id":3061,"parameterSlots":0,"returnSlots":1},"@_checkAuthorized_744":{"entryPoint":8130,"id":744,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_1292":{"entryPoint":5920,"id":1292,"parameterSlots":4,"returnSlots":0},"@_checkOwner_84":{"entryPoint":5190,"id":84,"parameterSlots":0,"returnSlots":0},"@_getApproved_671":{"entryPoint":4389,"id":671,"parameterSlots":1,"returnSlots":1},"@_isAuthorized_707":{"entryPoint":8575,"id":707,"parameterSlots":3,"returnSlots":1},"@_mint_900":{"entryPoint":8326,"id":900,"parameterSlots":2,"returnSlots":0},"@_msgSender_1468":{"entryPoint":4450,"id":1468,"parameterSlots":0,"returnSlots":1},"@_ownerOf_658":{"entryPoint":6711,"id":658,"parameterSlots":1,"returnSlots":1},"@_removeHolder_3266":{"entryPoint":4476,"id":3266,"parameterSlots":1,"returnSlots":0},"@_requireOwned_1228":{"entryPoint":4253,"id":1228,"parameterSlots":1,"returnSlots":1},"@_safeMint_915":{"entryPoint":5325,"id":915,"parameterSlots":2,"returnSlots":0},"@_safeMint_941":{"entryPoint":7763,"id":941,"parameterSlots":3,"returnSlots":0},"@_setApprovalForAll_1199":{"entryPoint":5553,"id":1199,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_146":{"entryPoint":5355,"id":146,"parameterSlots":1,"returnSlots":0},"@_update_850":{"entryPoint":7225,"id":850,"parameterSlots":3,"returnSlots":1},"@approve_505":{"entryPoint":1578,"id":505,"parameterSlots":2,"returnSlots":0},"@balanceOf_413":{"entryPoint":2917,"id":413,"parameterSlots":1,"returnSlots":1},"@getApproved_522":{"entryPoint":1550,"id":522,"parameterSlots":1,"returnSlots":1},"@getHolders_3275":{"entryPoint":2757,"id":3275,"parameterSlots":0,"returnSlots":1},"@holders_3015":{"entryPoint":2029,"id":3015,"parameterSlots":0,"returnSlots":0},"@isApprovedForAll_555":{"entryPoint":3865,"id":555,"parameterSlots":2,"returnSlots":1},"@log10_2651":{"entryPoint":7791,"id":2651,"parameterSlots":1,"returnSlots":1},"@name_435":{"entryPoint":1404,"id":435,"parameterSlots":0,"returnSlots":1},"@ownerOf_426":{"entryPoint":2899,"id":426,"parameterSlots":1,"returnSlots":1},"@owner_67":{"entryPoint":3135,"id":67,"parameterSlots":0,"returnSlots":1},"@poapURL_3008":{"entryPoint":2615,"id":3008,"parameterSlots":0,"returnSlots":0},"@renounceOwnership_98":{"entryPoint":3103,"id":98,"parameterSlots":0,"returnSlots":0},"@safeMint_3152":{"entryPoint":2111,"id":3152,"parameterSlots":1,"returnSlots":0},"@safeTransferFrom_619":{"entryPoint":2583,"id":619,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_645":{"entryPoint":3397,"id":645,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_538":{"entryPoint":3375,"id":538,"parameterSlots":2,"returnSlots":0},"@signUpEnabled_3017":{"entryPoint":2092,"id":3017,"parameterSlots":0,"returnSlots":0},"@signUp_3100":{"entryPoint":3426,"id":3100,"parameterSlots":0,"returnSlots":0},"@supportsInterface_1764":{"entryPoint":4147,"id":1764,"parameterSlots":1,"returnSlots":1},"@supportsInterface_385":{"entryPoint":1178,"id":385,"parameterSlots":1,"returnSlots":1},"@symbol_444":{"entryPoint":3177,"id":444,"parameterSlots":0,"returnSlots":1},"@toString_1554":{"entryPoint":6505,"id":1554,"parameterSlots":1,"returnSlots":1},"@toggleSignUp_3072":{"entryPoint":3323,"id":3072,"parameterSlots":0,"returnSlots":0},"@tokenSupply_3010":{"entryPoint":3123,"id":3010,"parameterSlots":0,"returnSlots":0},"@tokenURI_480":{"entryPoint":3760,"id":480,"parameterSlots":1,"returnSlots":1},"@transferFrom_3223":{"entryPoint":1600,"id":3223,"parameterSlots":3,"returnSlots":0},"@transferFrom_601":{"entryPoint":4932,"id":601,"parameterSlots":3,"returnSlots":0},"@transferOwnership_126":{"entryPoint":4013,"id":126,"parameterSlots":1,"returnSlots":0},"@volunteerSignUp_3012":{"entryPoint":3129,"id":3012,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":10151,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9367,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":9869,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":8855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":11817,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":10217,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9186,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9535,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10394,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":9452,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":10263,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":9890,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9388,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8876,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11838,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9207,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":9639,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":9624,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9302,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":9676,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":8933,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11684,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":9062,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11422,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb_to_t_string_memory_ptr_fromStack":{"entryPoint":11056,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad_to_t_string_memory_ptr_fromStack":{"entryPoint":10741,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8_to_t_string_memory_ptr_fromStack":{"entryPoint":10948,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f_to_t_string_memory_ptr_fromStack":{"entryPoint":11236,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79_to_t_string_memory_ptr_fromStack":{"entryPoint":10633,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931_to_t_string_memory_ptr_fromStack":{"entryPoint":11344,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":9804,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11471,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11741,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":11930,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":11601,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9770,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":8948,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9119,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11091,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10776,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10983,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11271,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10668,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11379,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9819,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":10060,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":8768,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":10087,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":9608,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":9580,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11656,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":8975,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":9663,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":9591,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":11667,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":8986,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11411,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":10855,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":9284,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":8921,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":8788,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9252,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9153,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":10136,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":9003,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":10505,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":10011,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":11123,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":10808,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":11883,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":10458,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":11554,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11507,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9964,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9954,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":9959,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8783,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8778,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9045,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb":{"entryPoint":11015,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad":{"entryPoint":10700,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8":{"entryPoint":10907,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f":{"entryPoint":11195,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79":{"entryPoint":10554,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931":{"entryPoint":11303,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9344,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":9846,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8832,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9163,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:23687:14","nodeType":"YulBlock","src":"0:23687:14","statements":[{"body":{"nativeSrc":"47:35:14","nodeType":"YulBlock","src":"47:35:14","statements":[{"nativeSrc":"57:19:14","nodeType":"YulAssignment","src":"57:19:14","value":{"arguments":[{"kind":"number","nativeSrc":"73:2:14","nodeType":"YulLiteral","src":"73:2:14","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"67:5:14","nodeType":"YulIdentifier","src":"67:5:14"},"nativeSrc":"67:9:14","nodeType":"YulFunctionCall","src":"67:9:14"},"variableNames":[{"name":"memPtr","nativeSrc":"57:6:14","nodeType":"YulIdentifier","src":"57:6:14"}]}]},"name":"allocate_unbounded","nativeSrc":"7:75:14","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nativeSrc":"40:6:14","nodeType":"YulTypedName","src":"40:6:14","type":""}],"src":"7:75:14"},{"body":{"nativeSrc":"177:28:14","nodeType":"YulBlock","src":"177:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"194:1:14","nodeType":"YulLiteral","src":"194:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"197:1:14","nodeType":"YulLiteral","src":"197:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"187:6:14","nodeType":"YulIdentifier","src":"187:6:14"},"nativeSrc":"187:12:14","nodeType":"YulFunctionCall","src":"187:12:14"},"nativeSrc":"187:12:14","nodeType":"YulExpressionStatement","src":"187:12:14"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"88:117:14","nodeType":"YulFunctionDefinition","src":"88:117:14"},{"body":{"nativeSrc":"300:28:14","nodeType":"YulBlock","src":"300:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"317:1:14","nodeType":"YulLiteral","src":"317:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"320:1:14","nodeType":"YulLiteral","src":"320:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"310:6:14","nodeType":"YulIdentifier","src":"310:6:14"},"nativeSrc":"310:12:14","nodeType":"YulFunctionCall","src":"310:12:14"},"nativeSrc":"310:12:14","nodeType":"YulExpressionStatement","src":"310:12:14"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"211:117:14","nodeType":"YulFunctionDefinition","src":"211:117:14"},{"body":{"nativeSrc":"378:105:14","nodeType":"YulBlock","src":"378:105:14","statements":[{"nativeSrc":"388:89:14","nodeType":"YulAssignment","src":"388:89:14","value":{"arguments":[{"name":"value","nativeSrc":"403:5:14","nodeType":"YulIdentifier","src":"403:5:14"},{"kind":"number","nativeSrc":"410:66:14","nodeType":"YulLiteral","src":"410:66:14","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"399:3:14","nodeType":"YulIdentifier","src":"399:3:14"},"nativeSrc":"399:78:14","nodeType":"YulFunctionCall","src":"399:78:14"},"variableNames":[{"name":"cleaned","nativeSrc":"388:7:14","nodeType":"YulIdentifier","src":"388:7:14"}]}]},"name":"cleanup_t_bytes4","nativeSrc":"334:149:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"360:5:14","nodeType":"YulTypedName","src":"360:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"370:7:14","nodeType":"YulTypedName","src":"370:7:14","type":""}],"src":"334:149:14"},{"body":{"nativeSrc":"531:78:14","nodeType":"YulBlock","src":"531:78:14","statements":[{"body":{"nativeSrc":"587:16:14","nodeType":"YulBlock","src":"587:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"596:1:14","nodeType":"YulLiteral","src":"596:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"599:1:14","nodeType":"YulLiteral","src":"599:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"589:6:14","nodeType":"YulIdentifier","src":"589:6:14"},"nativeSrc":"589:12:14","nodeType":"YulFunctionCall","src":"589:12:14"},"nativeSrc":"589:12:14","nodeType":"YulExpressionStatement","src":"589:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"554:5:14","nodeType":"YulIdentifier","src":"554:5:14"},{"arguments":[{"name":"value","nativeSrc":"578:5:14","nodeType":"YulIdentifier","src":"578:5:14"}],"functionName":{"name":"cleanup_t_bytes4","nativeSrc":"561:16:14","nodeType":"YulIdentifier","src":"561:16:14"},"nativeSrc":"561:23:14","nodeType":"YulFunctionCall","src":"561:23:14"}],"functionName":{"name":"eq","nativeSrc":"551:2:14","nodeType":"YulIdentifier","src":"551:2:14"},"nativeSrc":"551:34:14","nodeType":"YulFunctionCall","src":"551:34:14"}],"functionName":{"name":"iszero","nativeSrc":"544:6:14","nodeType":"YulIdentifier","src":"544:6:14"},"nativeSrc":"544:42:14","nodeType":"YulFunctionCall","src":"544:42:14"},"nativeSrc":"541:62:14","nodeType":"YulIf","src":"541:62:14"}]},"name":"validator_revert_t_bytes4","nativeSrc":"489:120:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"524:5:14","nodeType":"YulTypedName","src":"524:5:14","type":""}],"src":"489:120:14"},{"body":{"nativeSrc":"666:86:14","nodeType":"YulBlock","src":"666:86:14","statements":[{"nativeSrc":"676:29:14","nodeType":"YulAssignment","src":"676:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"698:6:14","nodeType":"YulIdentifier","src":"698:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"685:12:14","nodeType":"YulIdentifier","src":"685:12:14"},"nativeSrc":"685:20:14","nodeType":"YulFunctionCall","src":"685:20:14"},"variableNames":[{"name":"value","nativeSrc":"676:5:14","nodeType":"YulIdentifier","src":"676:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"740:5:14","nodeType":"YulIdentifier","src":"740:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"714:25:14","nodeType":"YulIdentifier","src":"714:25:14"},"nativeSrc":"714:32:14","nodeType":"YulFunctionCall","src":"714:32:14"},"nativeSrc":"714:32:14","nodeType":"YulExpressionStatement","src":"714:32:14"}]},"name":"abi_decode_t_bytes4","nativeSrc":"615:137:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"644:6:14","nodeType":"YulTypedName","src":"644:6:14","type":""},{"name":"end","nativeSrc":"652:3:14","nodeType":"YulTypedName","src":"652:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"660:5:14","nodeType":"YulTypedName","src":"660:5:14","type":""}],"src":"615:137:14"},{"body":{"nativeSrc":"823:262:14","nodeType":"YulBlock","src":"823:262:14","statements":[{"body":{"nativeSrc":"869:83:14","nodeType":"YulBlock","src":"869:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"871:77:14","nodeType":"YulIdentifier","src":"871:77:14"},"nativeSrc":"871:79:14","nodeType":"YulFunctionCall","src":"871:79:14"},"nativeSrc":"871:79:14","nodeType":"YulExpressionStatement","src":"871:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"844:7:14","nodeType":"YulIdentifier","src":"844:7:14"},{"name":"headStart","nativeSrc":"853:9:14","nodeType":"YulIdentifier","src":"853:9:14"}],"functionName":{"name":"sub","nativeSrc":"840:3:14","nodeType":"YulIdentifier","src":"840:3:14"},"nativeSrc":"840:23:14","nodeType":"YulFunctionCall","src":"840:23:14"},{"kind":"number","nativeSrc":"865:2:14","nodeType":"YulLiteral","src":"865:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"836:3:14","nodeType":"YulIdentifier","src":"836:3:14"},"nativeSrc":"836:32:14","nodeType":"YulFunctionCall","src":"836:32:14"},"nativeSrc":"833:119:14","nodeType":"YulIf","src":"833:119:14"},{"nativeSrc":"962:116:14","nodeType":"YulBlock","src":"962:116:14","statements":[{"nativeSrc":"977:15:14","nodeType":"YulVariableDeclaration","src":"977:15:14","value":{"kind":"number","nativeSrc":"991:1:14","nodeType":"YulLiteral","src":"991:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"981:6:14","nodeType":"YulTypedName","src":"981:6:14","type":""}]},{"nativeSrc":"1006:62:14","nodeType":"YulAssignment","src":"1006:62:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1040:9:14","nodeType":"YulIdentifier","src":"1040:9:14"},{"name":"offset","nativeSrc":"1051:6:14","nodeType":"YulIdentifier","src":"1051:6:14"}],"functionName":{"name":"add","nativeSrc":"1036:3:14","nodeType":"YulIdentifier","src":"1036:3:14"},"nativeSrc":"1036:22:14","nodeType":"YulFunctionCall","src":"1036:22:14"},{"name":"dataEnd","nativeSrc":"1060:7:14","nodeType":"YulIdentifier","src":"1060:7:14"}],"functionName":{"name":"abi_decode_t_bytes4","nativeSrc":"1016:19:14","nodeType":"YulIdentifier","src":"1016:19:14"},"nativeSrc":"1016:52:14","nodeType":"YulFunctionCall","src":"1016:52:14"},"variableNames":[{"name":"value0","nativeSrc":"1006:6:14","nodeType":"YulIdentifier","src":"1006:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"758:327:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"793:9:14","nodeType":"YulTypedName","src":"793:9:14","type":""},{"name":"dataEnd","nativeSrc":"804:7:14","nodeType":"YulTypedName","src":"804:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"816:6:14","nodeType":"YulTypedName","src":"816:6:14","type":""}],"src":"758:327:14"},{"body":{"nativeSrc":"1133:48:14","nodeType":"YulBlock","src":"1133:48:14","statements":[{"nativeSrc":"1143:32:14","nodeType":"YulAssignment","src":"1143:32:14","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1168:5:14","nodeType":"YulIdentifier","src":"1168:5:14"}],"functionName":{"name":"iszero","nativeSrc":"1161:6:14","nodeType":"YulIdentifier","src":"1161:6:14"},"nativeSrc":"1161:13:14","nodeType":"YulFunctionCall","src":"1161:13:14"}],"functionName":{"name":"iszero","nativeSrc":"1154:6:14","nodeType":"YulIdentifier","src":"1154:6:14"},"nativeSrc":"1154:21:14","nodeType":"YulFunctionCall","src":"1154:21:14"},"variableNames":[{"name":"cleaned","nativeSrc":"1143:7:14","nodeType":"YulIdentifier","src":"1143:7:14"}]}]},"name":"cleanup_t_bool","nativeSrc":"1091:90:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1115:5:14","nodeType":"YulTypedName","src":"1115:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"1125:7:14","nodeType":"YulTypedName","src":"1125:7:14","type":""}],"src":"1091:90:14"},{"body":{"nativeSrc":"1246:50:14","nodeType":"YulBlock","src":"1246:50:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1263:3:14","nodeType":"YulIdentifier","src":"1263:3:14"},{"arguments":[{"name":"value","nativeSrc":"1283:5:14","nodeType":"YulIdentifier","src":"1283:5:14"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"1268:14:14","nodeType":"YulIdentifier","src":"1268:14:14"},"nativeSrc":"1268:21:14","nodeType":"YulFunctionCall","src":"1268:21:14"}],"functionName":{"name":"mstore","nativeSrc":"1256:6:14","nodeType":"YulIdentifier","src":"1256:6:14"},"nativeSrc":"1256:34:14","nodeType":"YulFunctionCall","src":"1256:34:14"},"nativeSrc":"1256:34:14","nodeType":"YulExpressionStatement","src":"1256:34:14"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1187:109:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1234:5:14","nodeType":"YulTypedName","src":"1234:5:14","type":""},{"name":"pos","nativeSrc":"1241:3:14","nodeType":"YulTypedName","src":"1241:3:14","type":""}],"src":"1187:109:14"},{"body":{"nativeSrc":"1394:118:14","nodeType":"YulBlock","src":"1394:118:14","statements":[{"nativeSrc":"1404:26:14","nodeType":"YulAssignment","src":"1404:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"1416:9:14","nodeType":"YulIdentifier","src":"1416:9:14"},{"kind":"number","nativeSrc":"1427:2:14","nodeType":"YulLiteral","src":"1427:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1412:3:14","nodeType":"YulIdentifier","src":"1412:3:14"},"nativeSrc":"1412:18:14","nodeType":"YulFunctionCall","src":"1412:18:14"},"variableNames":[{"name":"tail","nativeSrc":"1404:4:14","nodeType":"YulIdentifier","src":"1404:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"1478:6:14","nodeType":"YulIdentifier","src":"1478:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"1491:9:14","nodeType":"YulIdentifier","src":"1491:9:14"},{"kind":"number","nativeSrc":"1502:1:14","nodeType":"YulLiteral","src":"1502:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"1487:3:14","nodeType":"YulIdentifier","src":"1487:3:14"},"nativeSrc":"1487:17:14","nodeType":"YulFunctionCall","src":"1487:17:14"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nativeSrc":"1440:37:14","nodeType":"YulIdentifier","src":"1440:37:14"},"nativeSrc":"1440:65:14","nodeType":"YulFunctionCall","src":"1440:65:14"},"nativeSrc":"1440:65:14","nodeType":"YulExpressionStatement","src":"1440:65:14"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"1302:210:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1366:9:14","nodeType":"YulTypedName","src":"1366:9:14","type":""},{"name":"value0","nativeSrc":"1378:6:14","nodeType":"YulTypedName","src":"1378:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1389:4:14","nodeType":"YulTypedName","src":"1389:4:14","type":""}],"src":"1302:210:14"},{"body":{"nativeSrc":"1577:40:14","nodeType":"YulBlock","src":"1577:40:14","statements":[{"nativeSrc":"1588:22:14","nodeType":"YulAssignment","src":"1588:22:14","value":{"arguments":[{"name":"value","nativeSrc":"1604:5:14","nodeType":"YulIdentifier","src":"1604:5:14"}],"functionName":{"name":"mload","nativeSrc":"1598:5:14","nodeType":"YulIdentifier","src":"1598:5:14"},"nativeSrc":"1598:12:14","nodeType":"YulFunctionCall","src":"1598:12:14"},"variableNames":[{"name":"length","nativeSrc":"1588:6:14","nodeType":"YulIdentifier","src":"1588:6:14"}]}]},"name":"array_length_t_string_memory_ptr","nativeSrc":"1518:99:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1560:5:14","nodeType":"YulTypedName","src":"1560:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"1570:6:14","nodeType":"YulTypedName","src":"1570:6:14","type":""}],"src":"1518:99:14"},{"body":{"nativeSrc":"1719:73:14","nodeType":"YulBlock","src":"1719:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"1736:3:14","nodeType":"YulIdentifier","src":"1736:3:14"},{"name":"length","nativeSrc":"1741:6:14","nodeType":"YulIdentifier","src":"1741:6:14"}],"functionName":{"name":"mstore","nativeSrc":"1729:6:14","nodeType":"YulIdentifier","src":"1729:6:14"},"nativeSrc":"1729:19:14","nodeType":"YulFunctionCall","src":"1729:19:14"},"nativeSrc":"1729:19:14","nodeType":"YulExpressionStatement","src":"1729:19:14"},{"nativeSrc":"1757:29:14","nodeType":"YulAssignment","src":"1757:29:14","value":{"arguments":[{"name":"pos","nativeSrc":"1776:3:14","nodeType":"YulIdentifier","src":"1776:3:14"},{"kind":"number","nativeSrc":"1781:4:14","nodeType":"YulLiteral","src":"1781:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1772:3:14","nodeType":"YulIdentifier","src":"1772:3:14"},"nativeSrc":"1772:14:14","nodeType":"YulFunctionCall","src":"1772:14:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"1757:11:14","nodeType":"YulIdentifier","src":"1757:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"1623:169:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"1691:3:14","nodeType":"YulTypedName","src":"1691:3:14","type":""},{"name":"length","nativeSrc":"1696:6:14","nodeType":"YulTypedName","src":"1696:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"1707:11:14","nodeType":"YulTypedName","src":"1707:11:14","type":""}],"src":"1623:169:14"},{"body":{"nativeSrc":"1860:184:14","nodeType":"YulBlock","src":"1860:184:14","statements":[{"nativeSrc":"1870:10:14","nodeType":"YulVariableDeclaration","src":"1870:10:14","value":{"kind":"number","nativeSrc":"1879:1:14","nodeType":"YulLiteral","src":"1879:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"1874:1:14","nodeType":"YulTypedName","src":"1874:1:14","type":""}]},{"body":{"nativeSrc":"1939:63:14","nodeType":"YulBlock","src":"1939:63:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"1964:3:14","nodeType":"YulIdentifier","src":"1964:3:14"},{"name":"i","nativeSrc":"1969:1:14","nodeType":"YulIdentifier","src":"1969:1:14"}],"functionName":{"name":"add","nativeSrc":"1960:3:14","nodeType":"YulIdentifier","src":"1960:3:14"},"nativeSrc":"1960:11:14","nodeType":"YulFunctionCall","src":"1960:11:14"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"1983:3:14","nodeType":"YulIdentifier","src":"1983:3:14"},{"name":"i","nativeSrc":"1988:1:14","nodeType":"YulIdentifier","src":"1988:1:14"}],"functionName":{"name":"add","nativeSrc":"1979:3:14","nodeType":"YulIdentifier","src":"1979:3:14"},"nativeSrc":"1979:11:14","nodeType":"YulFunctionCall","src":"1979:11:14"}],"functionName":{"name":"mload","nativeSrc":"1973:5:14","nodeType":"YulIdentifier","src":"1973:5:14"},"nativeSrc":"1973:18:14","nodeType":"YulFunctionCall","src":"1973:18:14"}],"functionName":{"name":"mstore","nativeSrc":"1953:6:14","nodeType":"YulIdentifier","src":"1953:6:14"},"nativeSrc":"1953:39:14","nodeType":"YulFunctionCall","src":"1953:39:14"},"nativeSrc":"1953:39:14","nodeType":"YulExpressionStatement","src":"1953:39:14"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"1900:1:14","nodeType":"YulIdentifier","src":"1900:1:14"},{"name":"length","nativeSrc":"1903:6:14","nodeType":"YulIdentifier","src":"1903:6:14"}],"functionName":{"name":"lt","nativeSrc":"1897:2:14","nodeType":"YulIdentifier","src":"1897:2:14"},"nativeSrc":"1897:13:14","nodeType":"YulFunctionCall","src":"1897:13:14"},"nativeSrc":"1889:113:14","nodeType":"YulForLoop","post":{"nativeSrc":"1911:19:14","nodeType":"YulBlock","src":"1911:19:14","statements":[{"nativeSrc":"1913:15:14","nodeType":"YulAssignment","src":"1913:15:14","value":{"arguments":[{"name":"i","nativeSrc":"1922:1:14","nodeType":"YulIdentifier","src":"1922:1:14"},{"kind":"number","nativeSrc":"1925:2:14","nodeType":"YulLiteral","src":"1925:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1918:3:14","nodeType":"YulIdentifier","src":"1918:3:14"},"nativeSrc":"1918:10:14","nodeType":"YulFunctionCall","src":"1918:10:14"},"variableNames":[{"name":"i","nativeSrc":"1913:1:14","nodeType":"YulIdentifier","src":"1913:1:14"}]}]},"pre":{"nativeSrc":"1893:3:14","nodeType":"YulBlock","src":"1893:3:14","statements":[]},"src":"1889:113:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"2022:3:14","nodeType":"YulIdentifier","src":"2022:3:14"},{"name":"length","nativeSrc":"2027:6:14","nodeType":"YulIdentifier","src":"2027:6:14"}],"functionName":{"name":"add","nativeSrc":"2018:3:14","nodeType":"YulIdentifier","src":"2018:3:14"},"nativeSrc":"2018:16:14","nodeType":"YulFunctionCall","src":"2018:16:14"},{"kind":"number","nativeSrc":"2036:1:14","nodeType":"YulLiteral","src":"2036:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2011:6:14","nodeType":"YulIdentifier","src":"2011:6:14"},"nativeSrc":"2011:27:14","nodeType":"YulFunctionCall","src":"2011:27:14"},"nativeSrc":"2011:27:14","nodeType":"YulExpressionStatement","src":"2011:27:14"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1798:246:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"1842:3:14","nodeType":"YulTypedName","src":"1842:3:14","type":""},{"name":"dst","nativeSrc":"1847:3:14","nodeType":"YulTypedName","src":"1847:3:14","type":""},{"name":"length","nativeSrc":"1852:6:14","nodeType":"YulTypedName","src":"1852:6:14","type":""}],"src":"1798:246:14"},{"body":{"nativeSrc":"2098:54:14","nodeType":"YulBlock","src":"2098:54:14","statements":[{"nativeSrc":"2108:38:14","nodeType":"YulAssignment","src":"2108:38:14","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2126:5:14","nodeType":"YulIdentifier","src":"2126:5:14"},{"kind":"number","nativeSrc":"2133:2:14","nodeType":"YulLiteral","src":"2133:2:14","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2122:3:14","nodeType":"YulIdentifier","src":"2122:3:14"},"nativeSrc":"2122:14:14","nodeType":"YulFunctionCall","src":"2122:14:14"},{"arguments":[{"kind":"number","nativeSrc":"2142:2:14","nodeType":"YulLiteral","src":"2142:2:14","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"2138:3:14","nodeType":"YulIdentifier","src":"2138:3:14"},"nativeSrc":"2138:7:14","nodeType":"YulFunctionCall","src":"2138:7:14"}],"functionName":{"name":"and","nativeSrc":"2118:3:14","nodeType":"YulIdentifier","src":"2118:3:14"},"nativeSrc":"2118:28:14","nodeType":"YulFunctionCall","src":"2118:28:14"},"variableNames":[{"name":"result","nativeSrc":"2108:6:14","nodeType":"YulIdentifier","src":"2108:6:14"}]}]},"name":"round_up_to_mul_of_32","nativeSrc":"2050:102:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2081:5:14","nodeType":"YulTypedName","src":"2081:5:14","type":""}],"returnVariables":[{"name":"result","nativeSrc":"2091:6:14","nodeType":"YulTypedName","src":"2091:6:14","type":""}],"src":"2050:102:14"},{"body":{"nativeSrc":"2250:285:14","nodeType":"YulBlock","src":"2250:285:14","statements":[{"nativeSrc":"2260:53:14","nodeType":"YulVariableDeclaration","src":"2260:53:14","value":{"arguments":[{"name":"value","nativeSrc":"2307:5:14","nodeType":"YulIdentifier","src":"2307:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"2274:32:14","nodeType":"YulIdentifier","src":"2274:32:14"},"nativeSrc":"2274:39:14","nodeType":"YulFunctionCall","src":"2274:39:14"},"variables":[{"name":"length","nativeSrc":"2264:6:14","nodeType":"YulTypedName","src":"2264:6:14","type":""}]},{"nativeSrc":"2322:78:14","nodeType":"YulAssignment","src":"2322:78:14","value":{"arguments":[{"name":"pos","nativeSrc":"2388:3:14","nodeType":"YulIdentifier","src":"2388:3:14"},{"name":"length","nativeSrc":"2393:6:14","nodeType":"YulIdentifier","src":"2393:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"2329:58:14","nodeType":"YulIdentifier","src":"2329:58:14"},"nativeSrc":"2329:71:14","nodeType":"YulFunctionCall","src":"2329:71:14"},"variableNames":[{"name":"pos","nativeSrc":"2322:3:14","nodeType":"YulIdentifier","src":"2322:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2448:5:14","nodeType":"YulIdentifier","src":"2448:5:14"},{"kind":"number","nativeSrc":"2455:4:14","nodeType":"YulLiteral","src":"2455:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2444:3:14","nodeType":"YulIdentifier","src":"2444:3:14"},"nativeSrc":"2444:16:14","nodeType":"YulFunctionCall","src":"2444:16:14"},{"name":"pos","nativeSrc":"2462:3:14","nodeType":"YulIdentifier","src":"2462:3:14"},{"name":"length","nativeSrc":"2467:6:14","nodeType":"YulIdentifier","src":"2467:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"2409:34:14","nodeType":"YulIdentifier","src":"2409:34:14"},"nativeSrc":"2409:65:14","nodeType":"YulFunctionCall","src":"2409:65:14"},"nativeSrc":"2409:65:14","nodeType":"YulExpressionStatement","src":"2409:65:14"},{"nativeSrc":"2483:46:14","nodeType":"YulAssignment","src":"2483:46:14","value":{"arguments":[{"name":"pos","nativeSrc":"2494:3:14","nodeType":"YulIdentifier","src":"2494:3:14"},{"arguments":[{"name":"length","nativeSrc":"2521:6:14","nodeType":"YulIdentifier","src":"2521:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"2499:21:14","nodeType":"YulIdentifier","src":"2499:21:14"},"nativeSrc":"2499:29:14","nodeType":"YulFunctionCall","src":"2499:29:14"}],"functionName":{"name":"add","nativeSrc":"2490:3:14","nodeType":"YulIdentifier","src":"2490:3:14"},"nativeSrc":"2490:39:14","nodeType":"YulFunctionCall","src":"2490:39:14"},"variableNames":[{"name":"end","nativeSrc":"2483:3:14","nodeType":"YulIdentifier","src":"2483:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2158:377:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2231:5:14","nodeType":"YulTypedName","src":"2231:5:14","type":""},{"name":"pos","nativeSrc":"2238:3:14","nodeType":"YulTypedName","src":"2238:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"2246:3:14","nodeType":"YulTypedName","src":"2246:3:14","type":""}],"src":"2158:377:14"},{"body":{"nativeSrc":"2659:195:14","nodeType":"YulBlock","src":"2659:195:14","statements":[{"nativeSrc":"2669:26:14","nodeType":"YulAssignment","src":"2669:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"2681:9:14","nodeType":"YulIdentifier","src":"2681:9:14"},{"kind":"number","nativeSrc":"2692:2:14","nodeType":"YulLiteral","src":"2692:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2677:3:14","nodeType":"YulIdentifier","src":"2677:3:14"},"nativeSrc":"2677:18:14","nodeType":"YulFunctionCall","src":"2677:18:14"},"variableNames":[{"name":"tail","nativeSrc":"2669:4:14","nodeType":"YulIdentifier","src":"2669:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2716:9:14","nodeType":"YulIdentifier","src":"2716:9:14"},{"kind":"number","nativeSrc":"2727:1:14","nodeType":"YulLiteral","src":"2727:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"2712:3:14","nodeType":"YulIdentifier","src":"2712:3:14"},"nativeSrc":"2712:17:14","nodeType":"YulFunctionCall","src":"2712:17:14"},{"arguments":[{"name":"tail","nativeSrc":"2735:4:14","nodeType":"YulIdentifier","src":"2735:4:14"},{"name":"headStart","nativeSrc":"2741:9:14","nodeType":"YulIdentifier","src":"2741:9:14"}],"functionName":{"name":"sub","nativeSrc":"2731:3:14","nodeType":"YulIdentifier","src":"2731:3:14"},"nativeSrc":"2731:20:14","nodeType":"YulFunctionCall","src":"2731:20:14"}],"functionName":{"name":"mstore","nativeSrc":"2705:6:14","nodeType":"YulIdentifier","src":"2705:6:14"},"nativeSrc":"2705:47:14","nodeType":"YulFunctionCall","src":"2705:47:14"},"nativeSrc":"2705:47:14","nodeType":"YulExpressionStatement","src":"2705:47:14"},{"nativeSrc":"2761:86:14","nodeType":"YulAssignment","src":"2761:86:14","value":{"arguments":[{"name":"value0","nativeSrc":"2833:6:14","nodeType":"YulIdentifier","src":"2833:6:14"},{"name":"tail","nativeSrc":"2842:4:14","nodeType":"YulIdentifier","src":"2842:4:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nativeSrc":"2769:63:14","nodeType":"YulIdentifier","src":"2769:63:14"},"nativeSrc":"2769:78:14","nodeType":"YulFunctionCall","src":"2769:78:14"},"variableNames":[{"name":"tail","nativeSrc":"2761:4:14","nodeType":"YulIdentifier","src":"2761:4:14"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"2541:313:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2631:9:14","nodeType":"YulTypedName","src":"2631:9:14","type":""},{"name":"value0","nativeSrc":"2643:6:14","nodeType":"YulTypedName","src":"2643:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2654:4:14","nodeType":"YulTypedName","src":"2654:4:14","type":""}],"src":"2541:313:14"},{"body":{"nativeSrc":"2905:32:14","nodeType":"YulBlock","src":"2905:32:14","statements":[{"nativeSrc":"2915:16:14","nodeType":"YulAssignment","src":"2915:16:14","value":{"name":"value","nativeSrc":"2926:5:14","nodeType":"YulIdentifier","src":"2926:5:14"},"variableNames":[{"name":"cleaned","nativeSrc":"2915:7:14","nodeType":"YulIdentifier","src":"2915:7:14"}]}]},"name":"cleanup_t_uint256","nativeSrc":"2860:77:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2887:5:14","nodeType":"YulTypedName","src":"2887:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"2897:7:14","nodeType":"YulTypedName","src":"2897:7:14","type":""}],"src":"2860:77:14"},{"body":{"nativeSrc":"2986:79:14","nodeType":"YulBlock","src":"2986:79:14","statements":[{"body":{"nativeSrc":"3043:16:14","nodeType":"YulBlock","src":"3043:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3052:1:14","nodeType":"YulLiteral","src":"3052:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"3055:1:14","nodeType":"YulLiteral","src":"3055:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3045:6:14","nodeType":"YulIdentifier","src":"3045:6:14"},"nativeSrc":"3045:12:14","nodeType":"YulFunctionCall","src":"3045:12:14"},"nativeSrc":"3045:12:14","nodeType":"YulExpressionStatement","src":"3045:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3009:5:14","nodeType":"YulIdentifier","src":"3009:5:14"},{"arguments":[{"name":"value","nativeSrc":"3034:5:14","nodeType":"YulIdentifier","src":"3034:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"3016:17:14","nodeType":"YulIdentifier","src":"3016:17:14"},"nativeSrc":"3016:24:14","nodeType":"YulFunctionCall","src":"3016:24:14"}],"functionName":{"name":"eq","nativeSrc":"3006:2:14","nodeType":"YulIdentifier","src":"3006:2:14"},"nativeSrc":"3006:35:14","nodeType":"YulFunctionCall","src":"3006:35:14"}],"functionName":{"name":"iszero","nativeSrc":"2999:6:14","nodeType":"YulIdentifier","src":"2999:6:14"},"nativeSrc":"2999:43:14","nodeType":"YulFunctionCall","src":"2999:43:14"},"nativeSrc":"2996:63:14","nodeType":"YulIf","src":"2996:63:14"}]},"name":"validator_revert_t_uint256","nativeSrc":"2943:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"2979:5:14","nodeType":"YulTypedName","src":"2979:5:14","type":""}],"src":"2943:122:14"},{"body":{"nativeSrc":"3123:87:14","nodeType":"YulBlock","src":"3123:87:14","statements":[{"nativeSrc":"3133:29:14","nodeType":"YulAssignment","src":"3133:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"3155:6:14","nodeType":"YulIdentifier","src":"3155:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"3142:12:14","nodeType":"YulIdentifier","src":"3142:12:14"},"nativeSrc":"3142:20:14","nodeType":"YulFunctionCall","src":"3142:20:14"},"variableNames":[{"name":"value","nativeSrc":"3133:5:14","nodeType":"YulIdentifier","src":"3133:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3198:5:14","nodeType":"YulIdentifier","src":"3198:5:14"}],"functionName":{"name":"validator_revert_t_uint256","nativeSrc":"3171:26:14","nodeType":"YulIdentifier","src":"3171:26:14"},"nativeSrc":"3171:33:14","nodeType":"YulFunctionCall","src":"3171:33:14"},"nativeSrc":"3171:33:14","nodeType":"YulExpressionStatement","src":"3171:33:14"}]},"name":"abi_decode_t_uint256","nativeSrc":"3071:139:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3101:6:14","nodeType":"YulTypedName","src":"3101:6:14","type":""},{"name":"end","nativeSrc":"3109:3:14","nodeType":"YulTypedName","src":"3109:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3117:5:14","nodeType":"YulTypedName","src":"3117:5:14","type":""}],"src":"3071:139:14"},{"body":{"nativeSrc":"3282:263:14","nodeType":"YulBlock","src":"3282:263:14","statements":[{"body":{"nativeSrc":"3328:83:14","nodeType":"YulBlock","src":"3328:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"3330:77:14","nodeType":"YulIdentifier","src":"3330:77:14"},"nativeSrc":"3330:79:14","nodeType":"YulFunctionCall","src":"3330:79:14"},"nativeSrc":"3330:79:14","nodeType":"YulExpressionStatement","src":"3330:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3303:7:14","nodeType":"YulIdentifier","src":"3303:7:14"},{"name":"headStart","nativeSrc":"3312:9:14","nodeType":"YulIdentifier","src":"3312:9:14"}],"functionName":{"name":"sub","nativeSrc":"3299:3:14","nodeType":"YulIdentifier","src":"3299:3:14"},"nativeSrc":"3299:23:14","nodeType":"YulFunctionCall","src":"3299:23:14"},{"kind":"number","nativeSrc":"3324:2:14","nodeType":"YulLiteral","src":"3324:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3295:3:14","nodeType":"YulIdentifier","src":"3295:3:14"},"nativeSrc":"3295:32:14","nodeType":"YulFunctionCall","src":"3295:32:14"},"nativeSrc":"3292:119:14","nodeType":"YulIf","src":"3292:119:14"},{"nativeSrc":"3421:117:14","nodeType":"YulBlock","src":"3421:117:14","statements":[{"nativeSrc":"3436:15:14","nodeType":"YulVariableDeclaration","src":"3436:15:14","value":{"kind":"number","nativeSrc":"3450:1:14","nodeType":"YulLiteral","src":"3450:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"3440:6:14","nodeType":"YulTypedName","src":"3440:6:14","type":""}]},{"nativeSrc":"3465:63:14","nodeType":"YulAssignment","src":"3465:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3500:9:14","nodeType":"YulIdentifier","src":"3500:9:14"},{"name":"offset","nativeSrc":"3511:6:14","nodeType":"YulIdentifier","src":"3511:6:14"}],"functionName":{"name":"add","nativeSrc":"3496:3:14","nodeType":"YulIdentifier","src":"3496:3:14"},"nativeSrc":"3496:22:14","nodeType":"YulFunctionCall","src":"3496:22:14"},{"name":"dataEnd","nativeSrc":"3520:7:14","nodeType":"YulIdentifier","src":"3520:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"3475:20:14","nodeType":"YulIdentifier","src":"3475:20:14"},"nativeSrc":"3475:53:14","nodeType":"YulFunctionCall","src":"3475:53:14"},"variableNames":[{"name":"value0","nativeSrc":"3465:6:14","nodeType":"YulIdentifier","src":"3465:6:14"}]}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"3216:329:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3252:9:14","nodeType":"YulTypedName","src":"3252:9:14","type":""},{"name":"dataEnd","nativeSrc":"3263:7:14","nodeType":"YulTypedName","src":"3263:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3275:6:14","nodeType":"YulTypedName","src":"3275:6:14","type":""}],"src":"3216:329:14"},{"body":{"nativeSrc":"3596:81:14","nodeType":"YulBlock","src":"3596:81:14","statements":[{"nativeSrc":"3606:65:14","nodeType":"YulAssignment","src":"3606:65:14","value":{"arguments":[{"name":"value","nativeSrc":"3621:5:14","nodeType":"YulIdentifier","src":"3621:5:14"},{"kind":"number","nativeSrc":"3628:42:14","nodeType":"YulLiteral","src":"3628:42:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3617:3:14","nodeType":"YulIdentifier","src":"3617:3:14"},"nativeSrc":"3617:54:14","nodeType":"YulFunctionCall","src":"3617:54:14"},"variableNames":[{"name":"cleaned","nativeSrc":"3606:7:14","nodeType":"YulIdentifier","src":"3606:7:14"}]}]},"name":"cleanup_t_uint160","nativeSrc":"3551:126:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3578:5:14","nodeType":"YulTypedName","src":"3578:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3588:7:14","nodeType":"YulTypedName","src":"3588:7:14","type":""}],"src":"3551:126:14"},{"body":{"nativeSrc":"3728:51:14","nodeType":"YulBlock","src":"3728:51:14","statements":[{"nativeSrc":"3738:35:14","nodeType":"YulAssignment","src":"3738:35:14","value":{"arguments":[{"name":"value","nativeSrc":"3767:5:14","nodeType":"YulIdentifier","src":"3767:5:14"}],"functionName":{"name":"cleanup_t_uint160","nativeSrc":"3749:17:14","nodeType":"YulIdentifier","src":"3749:17:14"},"nativeSrc":"3749:24:14","nodeType":"YulFunctionCall","src":"3749:24:14"},"variableNames":[{"name":"cleaned","nativeSrc":"3738:7:14","nodeType":"YulIdentifier","src":"3738:7:14"}]}]},"name":"cleanup_t_address","nativeSrc":"3683:96:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3710:5:14","nodeType":"YulTypedName","src":"3710:5:14","type":""}],"returnVariables":[{"name":"cleaned","nativeSrc":"3720:7:14","nodeType":"YulTypedName","src":"3720:7:14","type":""}],"src":"3683:96:14"},{"body":{"nativeSrc":"3850:53:14","nodeType":"YulBlock","src":"3850:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3867:3:14","nodeType":"YulIdentifier","src":"3867:3:14"},{"arguments":[{"name":"value","nativeSrc":"3890:5:14","nodeType":"YulIdentifier","src":"3890:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"3872:17:14","nodeType":"YulIdentifier","src":"3872:17:14"},"nativeSrc":"3872:24:14","nodeType":"YulFunctionCall","src":"3872:24:14"}],"functionName":{"name":"mstore","nativeSrc":"3860:6:14","nodeType":"YulIdentifier","src":"3860:6:14"},"nativeSrc":"3860:37:14","nodeType":"YulFunctionCall","src":"3860:37:14"},"nativeSrc":"3860:37:14","nodeType":"YulExpressionStatement","src":"3860:37:14"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"3785:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3838:5:14","nodeType":"YulTypedName","src":"3838:5:14","type":""},{"name":"pos","nativeSrc":"3845:3:14","nodeType":"YulTypedName","src":"3845:3:14","type":""}],"src":"3785:118:14"},{"body":{"nativeSrc":"4007:124:14","nodeType":"YulBlock","src":"4007:124:14","statements":[{"nativeSrc":"4017:26:14","nodeType":"YulAssignment","src":"4017:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"4029:9:14","nodeType":"YulIdentifier","src":"4029:9:14"},{"kind":"number","nativeSrc":"4040:2:14","nodeType":"YulLiteral","src":"4040:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4025:3:14","nodeType":"YulIdentifier","src":"4025:3:14"},"nativeSrc":"4025:18:14","nodeType":"YulFunctionCall","src":"4025:18:14"},"variableNames":[{"name":"tail","nativeSrc":"4017:4:14","nodeType":"YulIdentifier","src":"4017:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"4097:6:14","nodeType":"YulIdentifier","src":"4097:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"4110:9:14","nodeType":"YulIdentifier","src":"4110:9:14"},{"kind":"number","nativeSrc":"4121:1:14","nodeType":"YulLiteral","src":"4121:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"4106:3:14","nodeType":"YulIdentifier","src":"4106:3:14"},"nativeSrc":"4106:17:14","nodeType":"YulFunctionCall","src":"4106:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"4053:43:14","nodeType":"YulIdentifier","src":"4053:43:14"},"nativeSrc":"4053:71:14","nodeType":"YulFunctionCall","src":"4053:71:14"},"nativeSrc":"4053:71:14","nodeType":"YulExpressionStatement","src":"4053:71:14"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3909:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3979:9:14","nodeType":"YulTypedName","src":"3979:9:14","type":""},{"name":"value0","nativeSrc":"3991:6:14","nodeType":"YulTypedName","src":"3991:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4002:4:14","nodeType":"YulTypedName","src":"4002:4:14","type":""}],"src":"3909:222:14"},{"body":{"nativeSrc":"4180:79:14","nodeType":"YulBlock","src":"4180:79:14","statements":[{"body":{"nativeSrc":"4237:16:14","nodeType":"YulBlock","src":"4237:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4246:1:14","nodeType":"YulLiteral","src":"4246:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"4249:1:14","nodeType":"YulLiteral","src":"4249:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4239:6:14","nodeType":"YulIdentifier","src":"4239:6:14"},"nativeSrc":"4239:12:14","nodeType":"YulFunctionCall","src":"4239:12:14"},"nativeSrc":"4239:12:14","nodeType":"YulExpressionStatement","src":"4239:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4203:5:14","nodeType":"YulIdentifier","src":"4203:5:14"},{"arguments":[{"name":"value","nativeSrc":"4228:5:14","nodeType":"YulIdentifier","src":"4228:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"4210:17:14","nodeType":"YulIdentifier","src":"4210:17:14"},"nativeSrc":"4210:24:14","nodeType":"YulFunctionCall","src":"4210:24:14"}],"functionName":{"name":"eq","nativeSrc":"4200:2:14","nodeType":"YulIdentifier","src":"4200:2:14"},"nativeSrc":"4200:35:14","nodeType":"YulFunctionCall","src":"4200:35:14"}],"functionName":{"name":"iszero","nativeSrc":"4193:6:14","nodeType":"YulIdentifier","src":"4193:6:14"},"nativeSrc":"4193:43:14","nodeType":"YulFunctionCall","src":"4193:43:14"},"nativeSrc":"4190:63:14","nodeType":"YulIf","src":"4190:63:14"}]},"name":"validator_revert_t_address","nativeSrc":"4137:122:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"4173:5:14","nodeType":"YulTypedName","src":"4173:5:14","type":""}],"src":"4137:122:14"},{"body":{"nativeSrc":"4317:87:14","nodeType":"YulBlock","src":"4317:87:14","statements":[{"nativeSrc":"4327:29:14","nodeType":"YulAssignment","src":"4327:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"4349:6:14","nodeType":"YulIdentifier","src":"4349:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"4336:12:14","nodeType":"YulIdentifier","src":"4336:12:14"},"nativeSrc":"4336:20:14","nodeType":"YulFunctionCall","src":"4336:20:14"},"variableNames":[{"name":"value","nativeSrc":"4327:5:14","nodeType":"YulIdentifier","src":"4327:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4392:5:14","nodeType":"YulIdentifier","src":"4392:5:14"}],"functionName":{"name":"validator_revert_t_address","nativeSrc":"4365:26:14","nodeType":"YulIdentifier","src":"4365:26:14"},"nativeSrc":"4365:33:14","nodeType":"YulFunctionCall","src":"4365:33:14"},"nativeSrc":"4365:33:14","nodeType":"YulExpressionStatement","src":"4365:33:14"}]},"name":"abi_decode_t_address","nativeSrc":"4265:139:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4295:6:14","nodeType":"YulTypedName","src":"4295:6:14","type":""},{"name":"end","nativeSrc":"4303:3:14","nodeType":"YulTypedName","src":"4303:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"4311:5:14","nodeType":"YulTypedName","src":"4311:5:14","type":""}],"src":"4265:139:14"},{"body":{"nativeSrc":"4493:391:14","nodeType":"YulBlock","src":"4493:391:14","statements":[{"body":{"nativeSrc":"4539:83:14","nodeType":"YulBlock","src":"4539:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"4541:77:14","nodeType":"YulIdentifier","src":"4541:77:14"},"nativeSrc":"4541:79:14","nodeType":"YulFunctionCall","src":"4541:79:14"},"nativeSrc":"4541:79:14","nodeType":"YulExpressionStatement","src":"4541:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4514:7:14","nodeType":"YulIdentifier","src":"4514:7:14"},{"name":"headStart","nativeSrc":"4523:9:14","nodeType":"YulIdentifier","src":"4523:9:14"}],"functionName":{"name":"sub","nativeSrc":"4510:3:14","nodeType":"YulIdentifier","src":"4510:3:14"},"nativeSrc":"4510:23:14","nodeType":"YulFunctionCall","src":"4510:23:14"},{"kind":"number","nativeSrc":"4535:2:14","nodeType":"YulLiteral","src":"4535:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4506:3:14","nodeType":"YulIdentifier","src":"4506:3:14"},"nativeSrc":"4506:32:14","nodeType":"YulFunctionCall","src":"4506:32:14"},"nativeSrc":"4503:119:14","nodeType":"YulIf","src":"4503:119:14"},{"nativeSrc":"4632:117:14","nodeType":"YulBlock","src":"4632:117:14","statements":[{"nativeSrc":"4647:15:14","nodeType":"YulVariableDeclaration","src":"4647:15:14","value":{"kind":"number","nativeSrc":"4661:1:14","nodeType":"YulLiteral","src":"4661:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"4651:6:14","nodeType":"YulTypedName","src":"4651:6:14","type":""}]},{"nativeSrc":"4676:63:14","nodeType":"YulAssignment","src":"4676:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4711:9:14","nodeType":"YulIdentifier","src":"4711:9:14"},{"name":"offset","nativeSrc":"4722:6:14","nodeType":"YulIdentifier","src":"4722:6:14"}],"functionName":{"name":"add","nativeSrc":"4707:3:14","nodeType":"YulIdentifier","src":"4707:3:14"},"nativeSrc":"4707:22:14","nodeType":"YulFunctionCall","src":"4707:22:14"},{"name":"dataEnd","nativeSrc":"4731:7:14","nodeType":"YulIdentifier","src":"4731:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"4686:20:14","nodeType":"YulIdentifier","src":"4686:20:14"},"nativeSrc":"4686:53:14","nodeType":"YulFunctionCall","src":"4686:53:14"},"variableNames":[{"name":"value0","nativeSrc":"4676:6:14","nodeType":"YulIdentifier","src":"4676:6:14"}]}]},{"nativeSrc":"4759:118:14","nodeType":"YulBlock","src":"4759:118:14","statements":[{"nativeSrc":"4774:16:14","nodeType":"YulVariableDeclaration","src":"4774:16:14","value":{"kind":"number","nativeSrc":"4788:2:14","nodeType":"YulLiteral","src":"4788:2:14","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"4778:6:14","nodeType":"YulTypedName","src":"4778:6:14","type":""}]},{"nativeSrc":"4804:63:14","nodeType":"YulAssignment","src":"4804:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4839:9:14","nodeType":"YulIdentifier","src":"4839:9:14"},{"name":"offset","nativeSrc":"4850:6:14","nodeType":"YulIdentifier","src":"4850:6:14"}],"functionName":{"name":"add","nativeSrc":"4835:3:14","nodeType":"YulIdentifier","src":"4835:3:14"},"nativeSrc":"4835:22:14","nodeType":"YulFunctionCall","src":"4835:22:14"},{"name":"dataEnd","nativeSrc":"4859:7:14","nodeType":"YulIdentifier","src":"4859:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"4814:20:14","nodeType":"YulIdentifier","src":"4814:20:14"},"nativeSrc":"4814:53:14","nodeType":"YulFunctionCall","src":"4814:53:14"},"variableNames":[{"name":"value1","nativeSrc":"4804:6:14","nodeType":"YulIdentifier","src":"4804:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"4410:474:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4455:9:14","nodeType":"YulTypedName","src":"4455:9:14","type":""},{"name":"dataEnd","nativeSrc":"4466:7:14","nodeType":"YulTypedName","src":"4466:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4478:6:14","nodeType":"YulTypedName","src":"4478:6:14","type":""},{"name":"value1","nativeSrc":"4486:6:14","nodeType":"YulTypedName","src":"4486:6:14","type":""}],"src":"4410:474:14"},{"body":{"nativeSrc":"4990:519:14","nodeType":"YulBlock","src":"4990:519:14","statements":[{"body":{"nativeSrc":"5036:83:14","nodeType":"YulBlock","src":"5036:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5038:77:14","nodeType":"YulIdentifier","src":"5038:77:14"},"nativeSrc":"5038:79:14","nodeType":"YulFunctionCall","src":"5038:79:14"},"nativeSrc":"5038:79:14","nodeType":"YulExpressionStatement","src":"5038:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5011:7:14","nodeType":"YulIdentifier","src":"5011:7:14"},{"name":"headStart","nativeSrc":"5020:9:14","nodeType":"YulIdentifier","src":"5020:9:14"}],"functionName":{"name":"sub","nativeSrc":"5007:3:14","nodeType":"YulIdentifier","src":"5007:3:14"},"nativeSrc":"5007:23:14","nodeType":"YulFunctionCall","src":"5007:23:14"},{"kind":"number","nativeSrc":"5032:2:14","nodeType":"YulLiteral","src":"5032:2:14","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"5003:3:14","nodeType":"YulIdentifier","src":"5003:3:14"},"nativeSrc":"5003:32:14","nodeType":"YulFunctionCall","src":"5003:32:14"},"nativeSrc":"5000:119:14","nodeType":"YulIf","src":"5000:119:14"},{"nativeSrc":"5129:117:14","nodeType":"YulBlock","src":"5129:117:14","statements":[{"nativeSrc":"5144:15:14","nodeType":"YulVariableDeclaration","src":"5144:15:14","value":{"kind":"number","nativeSrc":"5158:1:14","nodeType":"YulLiteral","src":"5158:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5148:6:14","nodeType":"YulTypedName","src":"5148:6:14","type":""}]},{"nativeSrc":"5173:63:14","nodeType":"YulAssignment","src":"5173:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5208:9:14","nodeType":"YulIdentifier","src":"5208:9:14"},{"name":"offset","nativeSrc":"5219:6:14","nodeType":"YulIdentifier","src":"5219:6:14"}],"functionName":{"name":"add","nativeSrc":"5204:3:14","nodeType":"YulIdentifier","src":"5204:3:14"},"nativeSrc":"5204:22:14","nodeType":"YulFunctionCall","src":"5204:22:14"},{"name":"dataEnd","nativeSrc":"5228:7:14","nodeType":"YulIdentifier","src":"5228:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5183:20:14","nodeType":"YulIdentifier","src":"5183:20:14"},"nativeSrc":"5183:53:14","nodeType":"YulFunctionCall","src":"5183:53:14"},"variableNames":[{"name":"value0","nativeSrc":"5173:6:14","nodeType":"YulIdentifier","src":"5173:6:14"}]}]},{"nativeSrc":"5256:118:14","nodeType":"YulBlock","src":"5256:118:14","statements":[{"nativeSrc":"5271:16:14","nodeType":"YulVariableDeclaration","src":"5271:16:14","value":{"kind":"number","nativeSrc":"5285:2:14","nodeType":"YulLiteral","src":"5285:2:14","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"5275:6:14","nodeType":"YulTypedName","src":"5275:6:14","type":""}]},{"nativeSrc":"5301:63:14","nodeType":"YulAssignment","src":"5301:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5336:9:14","nodeType":"YulIdentifier","src":"5336:9:14"},{"name":"offset","nativeSrc":"5347:6:14","nodeType":"YulIdentifier","src":"5347:6:14"}],"functionName":{"name":"add","nativeSrc":"5332:3:14","nodeType":"YulIdentifier","src":"5332:3:14"},"nativeSrc":"5332:22:14","nodeType":"YulFunctionCall","src":"5332:22:14"},{"name":"dataEnd","nativeSrc":"5356:7:14","nodeType":"YulIdentifier","src":"5356:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5311:20:14","nodeType":"YulIdentifier","src":"5311:20:14"},"nativeSrc":"5311:53:14","nodeType":"YulFunctionCall","src":"5311:53:14"},"variableNames":[{"name":"value1","nativeSrc":"5301:6:14","nodeType":"YulIdentifier","src":"5301:6:14"}]}]},{"nativeSrc":"5384:118:14","nodeType":"YulBlock","src":"5384:118:14","statements":[{"nativeSrc":"5399:16:14","nodeType":"YulVariableDeclaration","src":"5399:16:14","value":{"kind":"number","nativeSrc":"5413:2:14","nodeType":"YulLiteral","src":"5413:2:14","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"5403:6:14","nodeType":"YulTypedName","src":"5403:6:14","type":""}]},{"nativeSrc":"5429:63:14","nodeType":"YulAssignment","src":"5429:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5464:9:14","nodeType":"YulIdentifier","src":"5464:9:14"},{"name":"offset","nativeSrc":"5475:6:14","nodeType":"YulIdentifier","src":"5475:6:14"}],"functionName":{"name":"add","nativeSrc":"5460:3:14","nodeType":"YulIdentifier","src":"5460:3:14"},"nativeSrc":"5460:22:14","nodeType":"YulFunctionCall","src":"5460:22:14"},{"name":"dataEnd","nativeSrc":"5484:7:14","nodeType":"YulIdentifier","src":"5484:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"5439:20:14","nodeType":"YulIdentifier","src":"5439:20:14"},"nativeSrc":"5439:53:14","nodeType":"YulFunctionCall","src":"5439:53:14"},"variableNames":[{"name":"value2","nativeSrc":"5429:6:14","nodeType":"YulIdentifier","src":"5429:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"4890:619:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4944:9:14","nodeType":"YulTypedName","src":"4944:9:14","type":""},{"name":"dataEnd","nativeSrc":"4955:7:14","nodeType":"YulTypedName","src":"4955:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4967:6:14","nodeType":"YulTypedName","src":"4967:6:14","type":""},{"name":"value1","nativeSrc":"4975:6:14","nodeType":"YulTypedName","src":"4975:6:14","type":""},{"name":"value2","nativeSrc":"4983:6:14","nodeType":"YulTypedName","src":"4983:6:14","type":""}],"src":"4890:619:14"},{"body":{"nativeSrc":"5581:263:14","nodeType":"YulBlock","src":"5581:263:14","statements":[{"body":{"nativeSrc":"5627:83:14","nodeType":"YulBlock","src":"5627:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"5629:77:14","nodeType":"YulIdentifier","src":"5629:77:14"},"nativeSrc":"5629:79:14","nodeType":"YulFunctionCall","src":"5629:79:14"},"nativeSrc":"5629:79:14","nodeType":"YulExpressionStatement","src":"5629:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5602:7:14","nodeType":"YulIdentifier","src":"5602:7:14"},{"name":"headStart","nativeSrc":"5611:9:14","nodeType":"YulIdentifier","src":"5611:9:14"}],"functionName":{"name":"sub","nativeSrc":"5598:3:14","nodeType":"YulIdentifier","src":"5598:3:14"},"nativeSrc":"5598:23:14","nodeType":"YulFunctionCall","src":"5598:23:14"},{"kind":"number","nativeSrc":"5623:2:14","nodeType":"YulLiteral","src":"5623:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5594:3:14","nodeType":"YulIdentifier","src":"5594:3:14"},"nativeSrc":"5594:32:14","nodeType":"YulFunctionCall","src":"5594:32:14"},"nativeSrc":"5591:119:14","nodeType":"YulIf","src":"5591:119:14"},{"nativeSrc":"5720:117:14","nodeType":"YulBlock","src":"5720:117:14","statements":[{"nativeSrc":"5735:15:14","nodeType":"YulVariableDeclaration","src":"5735:15:14","value":{"kind":"number","nativeSrc":"5749:1:14","nodeType":"YulLiteral","src":"5749:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"5739:6:14","nodeType":"YulTypedName","src":"5739:6:14","type":""}]},{"nativeSrc":"5764:63:14","nodeType":"YulAssignment","src":"5764:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5799:9:14","nodeType":"YulIdentifier","src":"5799:9:14"},{"name":"offset","nativeSrc":"5810:6:14","nodeType":"YulIdentifier","src":"5810:6:14"}],"functionName":{"name":"add","nativeSrc":"5795:3:14","nodeType":"YulIdentifier","src":"5795:3:14"},"nativeSrc":"5795:22:14","nodeType":"YulFunctionCall","src":"5795:22:14"},{"name":"dataEnd","nativeSrc":"5819:7:14","nodeType":"YulIdentifier","src":"5819:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"5774:20:14","nodeType":"YulIdentifier","src":"5774:20:14"},"nativeSrc":"5774:53:14","nodeType":"YulFunctionCall","src":"5774:53:14"},"variableNames":[{"name":"value0","nativeSrc":"5764:6:14","nodeType":"YulIdentifier","src":"5764:6:14"}]}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"5515:329:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5551:9:14","nodeType":"YulTypedName","src":"5551:9:14","type":""},{"name":"dataEnd","nativeSrc":"5562:7:14","nodeType":"YulTypedName","src":"5562:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5574:6:14","nodeType":"YulTypedName","src":"5574:6:14","type":""}],"src":"5515:329:14"},{"body":{"nativeSrc":"5924:40:14","nodeType":"YulBlock","src":"5924:40:14","statements":[{"nativeSrc":"5935:22:14","nodeType":"YulAssignment","src":"5935:22:14","value":{"arguments":[{"name":"value","nativeSrc":"5951:5:14","nodeType":"YulIdentifier","src":"5951:5:14"}],"functionName":{"name":"mload","nativeSrc":"5945:5:14","nodeType":"YulIdentifier","src":"5945:5:14"},"nativeSrc":"5945:12:14","nodeType":"YulFunctionCall","src":"5945:12:14"},"variableNames":[{"name":"length","nativeSrc":"5935:6:14","nodeType":"YulIdentifier","src":"5935:6:14"}]}]},"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"5850:114:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5907:5:14","nodeType":"YulTypedName","src":"5907:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"5917:6:14","nodeType":"YulTypedName","src":"5917:6:14","type":""}],"src":"5850:114:14"},{"body":{"nativeSrc":"6081:73:14","nodeType":"YulBlock","src":"6081:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6098:3:14","nodeType":"YulIdentifier","src":"6098:3:14"},{"name":"length","nativeSrc":"6103:6:14","nodeType":"YulIdentifier","src":"6103:6:14"}],"functionName":{"name":"mstore","nativeSrc":"6091:6:14","nodeType":"YulIdentifier","src":"6091:6:14"},"nativeSrc":"6091:19:14","nodeType":"YulFunctionCall","src":"6091:19:14"},"nativeSrc":"6091:19:14","nodeType":"YulExpressionStatement","src":"6091:19:14"},{"nativeSrc":"6119:29:14","nodeType":"YulAssignment","src":"6119:29:14","value":{"arguments":[{"name":"pos","nativeSrc":"6138:3:14","nodeType":"YulIdentifier","src":"6138:3:14"},{"kind":"number","nativeSrc":"6143:4:14","nodeType":"YulLiteral","src":"6143:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6134:3:14","nodeType":"YulIdentifier","src":"6134:3:14"},"nativeSrc":"6134:14:14","nodeType":"YulFunctionCall","src":"6134:14:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"6119:11:14","nodeType":"YulIdentifier","src":"6119:11:14"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"5970:184:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"6053:3:14","nodeType":"YulTypedName","src":"6053:3:14","type":""},{"name":"length","nativeSrc":"6058:6:14","nodeType":"YulTypedName","src":"6058:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"6069:11:14","nodeType":"YulTypedName","src":"6069:11:14","type":""}],"src":"5970:184:14"},{"body":{"nativeSrc":"6232:60:14","nodeType":"YulBlock","src":"6232:60:14","statements":[{"nativeSrc":"6242:11:14","nodeType":"YulAssignment","src":"6242:11:14","value":{"name":"ptr","nativeSrc":"6250:3:14","nodeType":"YulIdentifier","src":"6250:3:14"},"variableNames":[{"name":"data","nativeSrc":"6242:4:14","nodeType":"YulIdentifier","src":"6242:4:14"}]},{"nativeSrc":"6263:22:14","nodeType":"YulAssignment","src":"6263:22:14","value":{"arguments":[{"name":"ptr","nativeSrc":"6275:3:14","nodeType":"YulIdentifier","src":"6275:3:14"},{"kind":"number","nativeSrc":"6280:4:14","nodeType":"YulLiteral","src":"6280:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6271:3:14","nodeType":"YulIdentifier","src":"6271:3:14"},"nativeSrc":"6271:14:14","nodeType":"YulFunctionCall","src":"6271:14:14"},"variableNames":[{"name":"data","nativeSrc":"6263:4:14","nodeType":"YulIdentifier","src":"6263:4:14"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"6160:132:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"6219:3:14","nodeType":"YulTypedName","src":"6219:3:14","type":""}],"returnVariables":[{"name":"data","nativeSrc":"6227:4:14","nodeType":"YulTypedName","src":"6227:4:14","type":""}],"src":"6160:132:14"},{"body":{"nativeSrc":"6353:53:14","nodeType":"YulBlock","src":"6353:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6370:3:14","nodeType":"YulIdentifier","src":"6370:3:14"},{"arguments":[{"name":"value","nativeSrc":"6393:5:14","nodeType":"YulIdentifier","src":"6393:5:14"}],"functionName":{"name":"cleanup_t_address","nativeSrc":"6375:17:14","nodeType":"YulIdentifier","src":"6375:17:14"},"nativeSrc":"6375:24:14","nodeType":"YulFunctionCall","src":"6375:24:14"}],"functionName":{"name":"mstore","nativeSrc":"6363:6:14","nodeType":"YulIdentifier","src":"6363:6:14"},"nativeSrc":"6363:37:14","nodeType":"YulFunctionCall","src":"6363:37:14"},"nativeSrc":"6363:37:14","nodeType":"YulExpressionStatement","src":"6363:37:14"}]},"name":"abi_encode_t_address_to_t_address","nativeSrc":"6298:108:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6341:5:14","nodeType":"YulTypedName","src":"6341:5:14","type":""},{"name":"pos","nativeSrc":"6348:3:14","nodeType":"YulTypedName","src":"6348:3:14","type":""}],"src":"6298:108:14"},{"body":{"nativeSrc":"6492:99:14","nodeType":"YulBlock","src":"6492:99:14","statements":[{"expression":{"arguments":[{"name":"value0","nativeSrc":"6536:6:14","nodeType":"YulIdentifier","src":"6536:6:14"},{"name":"pos","nativeSrc":"6544:3:14","nodeType":"YulIdentifier","src":"6544:3:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nativeSrc":"6502:33:14","nodeType":"YulIdentifier","src":"6502:33:14"},"nativeSrc":"6502:46:14","nodeType":"YulFunctionCall","src":"6502:46:14"},"nativeSrc":"6502:46:14","nodeType":"YulExpressionStatement","src":"6502:46:14"},{"nativeSrc":"6557:28:14","nodeType":"YulAssignment","src":"6557:28:14","value":{"arguments":[{"name":"pos","nativeSrc":"6575:3:14","nodeType":"YulIdentifier","src":"6575:3:14"},{"kind":"number","nativeSrc":"6580:4:14","nodeType":"YulLiteral","src":"6580:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6571:3:14","nodeType":"YulIdentifier","src":"6571:3:14"},"nativeSrc":"6571:14:14","nodeType":"YulFunctionCall","src":"6571:14:14"},"variableNames":[{"name":"updatedPos","nativeSrc":"6557:10:14","nodeType":"YulIdentifier","src":"6557:10:14"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nativeSrc":"6412:179:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nativeSrc":"6465:6:14","nodeType":"YulTypedName","src":"6465:6:14","type":""},{"name":"pos","nativeSrc":"6473:3:14","nodeType":"YulTypedName","src":"6473:3:14","type":""}],"returnVariables":[{"name":"updatedPos","nativeSrc":"6481:10:14","nodeType":"YulTypedName","src":"6481:10:14","type":""}],"src":"6412:179:14"},{"body":{"nativeSrc":"6672:38:14","nodeType":"YulBlock","src":"6672:38:14","statements":[{"nativeSrc":"6682:22:14","nodeType":"YulAssignment","src":"6682:22:14","value":{"arguments":[{"name":"ptr","nativeSrc":"6694:3:14","nodeType":"YulIdentifier","src":"6694:3:14"},{"kind":"number","nativeSrc":"6699:4:14","nodeType":"YulLiteral","src":"6699:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6690:3:14","nodeType":"YulIdentifier","src":"6690:3:14"},"nativeSrc":"6690:14:14","nodeType":"YulFunctionCall","src":"6690:14:14"},"variableNames":[{"name":"next","nativeSrc":"6682:4:14","nodeType":"YulIdentifier","src":"6682:4:14"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"6597:113:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"6659:3:14","nodeType":"YulTypedName","src":"6659:3:14","type":""}],"returnVariables":[{"name":"next","nativeSrc":"6667:4:14","nodeType":"YulTypedName","src":"6667:4:14","type":""}],"src":"6597:113:14"},{"body":{"nativeSrc":"6870:608:14","nodeType":"YulBlock","src":"6870:608:14","statements":[{"nativeSrc":"6880:68:14","nodeType":"YulVariableDeclaration","src":"6880:68:14","value":{"arguments":[{"name":"value","nativeSrc":"6942:5:14","nodeType":"YulIdentifier","src":"6942:5:14"}],"functionName":{"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"6894:47:14","nodeType":"YulIdentifier","src":"6894:47:14"},"nativeSrc":"6894:54:14","nodeType":"YulFunctionCall","src":"6894:54:14"},"variables":[{"name":"length","nativeSrc":"6884:6:14","nodeType":"YulTypedName","src":"6884:6:14","type":""}]},{"nativeSrc":"6957:93:14","nodeType":"YulAssignment","src":"6957:93:14","value":{"arguments":[{"name":"pos","nativeSrc":"7038:3:14","nodeType":"YulIdentifier","src":"7038:3:14"},{"name":"length","nativeSrc":"7043:6:14","nodeType":"YulIdentifier","src":"7043:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"6964:73:14","nodeType":"YulIdentifier","src":"6964:73:14"},"nativeSrc":"6964:86:14","nodeType":"YulFunctionCall","src":"6964:86:14"},"variableNames":[{"name":"pos","nativeSrc":"6957:3:14","nodeType":"YulIdentifier","src":"6957:3:14"}]},{"nativeSrc":"7059:71:14","nodeType":"YulVariableDeclaration","src":"7059:71:14","value":{"arguments":[{"name":"value","nativeSrc":"7124:5:14","nodeType":"YulIdentifier","src":"7124:5:14"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"7074:49:14","nodeType":"YulIdentifier","src":"7074:49:14"},"nativeSrc":"7074:56:14","nodeType":"YulFunctionCall","src":"7074:56:14"},"variables":[{"name":"baseRef","nativeSrc":"7063:7:14","nodeType":"YulTypedName","src":"7063:7:14","type":""}]},{"nativeSrc":"7139:21:14","nodeType":"YulVariableDeclaration","src":"7139:21:14","value":{"name":"baseRef","nativeSrc":"7153:7:14","nodeType":"YulIdentifier","src":"7153:7:14"},"variables":[{"name":"srcPtr","nativeSrc":"7143:6:14","nodeType":"YulTypedName","src":"7143:6:14","type":""}]},{"body":{"nativeSrc":"7229:224:14","nodeType":"YulBlock","src":"7229:224:14","statements":[{"nativeSrc":"7243:34:14","nodeType":"YulVariableDeclaration","src":"7243:34:14","value":{"arguments":[{"name":"srcPtr","nativeSrc":"7270:6:14","nodeType":"YulIdentifier","src":"7270:6:14"}],"functionName":{"name":"mload","nativeSrc":"7264:5:14","nodeType":"YulIdentifier","src":"7264:5:14"},"nativeSrc":"7264:13:14","nodeType":"YulFunctionCall","src":"7264:13:14"},"variables":[{"name":"elementValue0","nativeSrc":"7247:13:14","nodeType":"YulTypedName","src":"7247:13:14","type":""}]},{"nativeSrc":"7290:70:14","nodeType":"YulAssignment","src":"7290:70:14","value":{"arguments":[{"name":"elementValue0","nativeSrc":"7341:13:14","nodeType":"YulIdentifier","src":"7341:13:14"},{"name":"pos","nativeSrc":"7356:3:14","nodeType":"YulIdentifier","src":"7356:3:14"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nativeSrc":"7297:43:14","nodeType":"YulIdentifier","src":"7297:43:14"},"nativeSrc":"7297:63:14","nodeType":"YulFunctionCall","src":"7297:63:14"},"variableNames":[{"name":"pos","nativeSrc":"7290:3:14","nodeType":"YulIdentifier","src":"7290:3:14"}]},{"nativeSrc":"7373:70:14","nodeType":"YulAssignment","src":"7373:70:14","value":{"arguments":[{"name":"srcPtr","nativeSrc":"7436:6:14","nodeType":"YulIdentifier","src":"7436:6:14"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nativeSrc":"7383:52:14","nodeType":"YulIdentifier","src":"7383:52:14"},"nativeSrc":"7383:60:14","nodeType":"YulFunctionCall","src":"7383:60:14"},"variableNames":[{"name":"srcPtr","nativeSrc":"7373:6:14","nodeType":"YulIdentifier","src":"7373:6:14"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7191:1:14","nodeType":"YulIdentifier","src":"7191:1:14"},{"name":"length","nativeSrc":"7194:6:14","nodeType":"YulIdentifier","src":"7194:6:14"}],"functionName":{"name":"lt","nativeSrc":"7188:2:14","nodeType":"YulIdentifier","src":"7188:2:14"},"nativeSrc":"7188:13:14","nodeType":"YulFunctionCall","src":"7188:13:14"},"nativeSrc":"7169:284:14","nodeType":"YulForLoop","post":{"nativeSrc":"7202:18:14","nodeType":"YulBlock","src":"7202:18:14","statements":[{"nativeSrc":"7204:14:14","nodeType":"YulAssignment","src":"7204:14:14","value":{"arguments":[{"name":"i","nativeSrc":"7213:1:14","nodeType":"YulIdentifier","src":"7213:1:14"},{"kind":"number","nativeSrc":"7216:1:14","nodeType":"YulLiteral","src":"7216:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"7209:3:14","nodeType":"YulIdentifier","src":"7209:3:14"},"nativeSrc":"7209:9:14","nodeType":"YulFunctionCall","src":"7209:9:14"},"variableNames":[{"name":"i","nativeSrc":"7204:1:14","nodeType":"YulIdentifier","src":"7204:1:14"}]}]},"pre":{"nativeSrc":"7173:14:14","nodeType":"YulBlock","src":"7173:14:14","statements":[{"nativeSrc":"7175:10:14","nodeType":"YulVariableDeclaration","src":"7175:10:14","value":{"kind":"number","nativeSrc":"7184:1:14","nodeType":"YulLiteral","src":"7184:1:14","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7179:1:14","nodeType":"YulTypedName","src":"7179:1:14","type":""}]}]},"src":"7169:284:14"},{"nativeSrc":"7462:10:14","nodeType":"YulAssignment","src":"7462:10:14","value":{"name":"pos","nativeSrc":"7469:3:14","nodeType":"YulIdentifier","src":"7469:3:14"},"variableNames":[{"name":"end","nativeSrc":"7462:3:14","nodeType":"YulIdentifier","src":"7462:3:14"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"6746:732:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6849:5:14","nodeType":"YulTypedName","src":"6849:5:14","type":""},{"name":"pos","nativeSrc":"6856:3:14","nodeType":"YulTypedName","src":"6856:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6865:3:14","nodeType":"YulTypedName","src":"6865:3:14","type":""}],"src":"6746:732:14"},{"body":{"nativeSrc":"7632:225:14","nodeType":"YulBlock","src":"7632:225:14","statements":[{"nativeSrc":"7642:26:14","nodeType":"YulAssignment","src":"7642:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"7654:9:14","nodeType":"YulIdentifier","src":"7654:9:14"},{"kind":"number","nativeSrc":"7665:2:14","nodeType":"YulLiteral","src":"7665:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7650:3:14","nodeType":"YulIdentifier","src":"7650:3:14"},"nativeSrc":"7650:18:14","nodeType":"YulFunctionCall","src":"7650:18:14"},"variableNames":[{"name":"tail","nativeSrc":"7642:4:14","nodeType":"YulIdentifier","src":"7642:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7689:9:14","nodeType":"YulIdentifier","src":"7689:9:14"},{"kind":"number","nativeSrc":"7700:1:14","nodeType":"YulLiteral","src":"7700:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"7685:3:14","nodeType":"YulIdentifier","src":"7685:3:14"},"nativeSrc":"7685:17:14","nodeType":"YulFunctionCall","src":"7685:17:14"},{"arguments":[{"name":"tail","nativeSrc":"7708:4:14","nodeType":"YulIdentifier","src":"7708:4:14"},{"name":"headStart","nativeSrc":"7714:9:14","nodeType":"YulIdentifier","src":"7714:9:14"}],"functionName":{"name":"sub","nativeSrc":"7704:3:14","nodeType":"YulIdentifier","src":"7704:3:14"},"nativeSrc":"7704:20:14","nodeType":"YulFunctionCall","src":"7704:20:14"}],"functionName":{"name":"mstore","nativeSrc":"7678:6:14","nodeType":"YulIdentifier","src":"7678:6:14"},"nativeSrc":"7678:47:14","nodeType":"YulFunctionCall","src":"7678:47:14"},"nativeSrc":"7678:47:14","nodeType":"YulExpressionStatement","src":"7678:47:14"},{"nativeSrc":"7734:116:14","nodeType":"YulAssignment","src":"7734:116:14","value":{"arguments":[{"name":"value0","nativeSrc":"7836:6:14","nodeType":"YulIdentifier","src":"7836:6:14"},{"name":"tail","nativeSrc":"7845:4:14","nodeType":"YulIdentifier","src":"7845:4:14"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nativeSrc":"7742:93:14","nodeType":"YulIdentifier","src":"7742:93:14"},"nativeSrc":"7742:108:14","nodeType":"YulFunctionCall","src":"7742:108:14"},"variableNames":[{"name":"tail","nativeSrc":"7734:4:14","nodeType":"YulIdentifier","src":"7734:4:14"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"7484:373:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7604:9:14","nodeType":"YulTypedName","src":"7604:9:14","type":""},{"name":"value0","nativeSrc":"7616:6:14","nodeType":"YulTypedName","src":"7616:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7627:4:14","nodeType":"YulTypedName","src":"7627:4:14","type":""}],"src":"7484:373:14"},{"body":{"nativeSrc":"7928:53:14","nodeType":"YulBlock","src":"7928:53:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7945:3:14","nodeType":"YulIdentifier","src":"7945:3:14"},{"arguments":[{"name":"value","nativeSrc":"7968:5:14","nodeType":"YulIdentifier","src":"7968:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"7950:17:14","nodeType":"YulIdentifier","src":"7950:17:14"},"nativeSrc":"7950:24:14","nodeType":"YulFunctionCall","src":"7950:24:14"}],"functionName":{"name":"mstore","nativeSrc":"7938:6:14","nodeType":"YulIdentifier","src":"7938:6:14"},"nativeSrc":"7938:37:14","nodeType":"YulFunctionCall","src":"7938:37:14"},"nativeSrc":"7938:37:14","nodeType":"YulExpressionStatement","src":"7938:37:14"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"7863:118:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"7916:5:14","nodeType":"YulTypedName","src":"7916:5:14","type":""},{"name":"pos","nativeSrc":"7923:3:14","nodeType":"YulTypedName","src":"7923:3:14","type":""}],"src":"7863:118:14"},{"body":{"nativeSrc":"8085:124:14","nodeType":"YulBlock","src":"8085:124:14","statements":[{"nativeSrc":"8095:26:14","nodeType":"YulAssignment","src":"8095:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"8107:9:14","nodeType":"YulIdentifier","src":"8107:9:14"},{"kind":"number","nativeSrc":"8118:2:14","nodeType":"YulLiteral","src":"8118:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8103:3:14","nodeType":"YulIdentifier","src":"8103:3:14"},"nativeSrc":"8103:18:14","nodeType":"YulFunctionCall","src":"8103:18:14"},"variableNames":[{"name":"tail","nativeSrc":"8095:4:14","nodeType":"YulIdentifier","src":"8095:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"8175:6:14","nodeType":"YulIdentifier","src":"8175:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"8188:9:14","nodeType":"YulIdentifier","src":"8188:9:14"},{"kind":"number","nativeSrc":"8199:1:14","nodeType":"YulLiteral","src":"8199:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"8184:3:14","nodeType":"YulIdentifier","src":"8184:3:14"},"nativeSrc":"8184:17:14","nodeType":"YulFunctionCall","src":"8184:17:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"8131:43:14","nodeType":"YulIdentifier","src":"8131:43:14"},"nativeSrc":"8131:71:14","nodeType":"YulFunctionCall","src":"8131:71:14"},"nativeSrc":"8131:71:14","nodeType":"YulExpressionStatement","src":"8131:71:14"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"7987:222:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8057:9:14","nodeType":"YulTypedName","src":"8057:9:14","type":""},{"name":"value0","nativeSrc":"8069:6:14","nodeType":"YulTypedName","src":"8069:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8080:4:14","nodeType":"YulTypedName","src":"8080:4:14","type":""}],"src":"7987:222:14"},{"body":{"nativeSrc":"8255:76:14","nodeType":"YulBlock","src":"8255:76:14","statements":[{"body":{"nativeSrc":"8309:16:14","nodeType":"YulBlock","src":"8309:16:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8318:1:14","nodeType":"YulLiteral","src":"8318:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"8321:1:14","nodeType":"YulLiteral","src":"8321:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8311:6:14","nodeType":"YulIdentifier","src":"8311:6:14"},"nativeSrc":"8311:12:14","nodeType":"YulFunctionCall","src":"8311:12:14"},"nativeSrc":"8311:12:14","nodeType":"YulExpressionStatement","src":"8311:12:14"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8278:5:14","nodeType":"YulIdentifier","src":"8278:5:14"},{"arguments":[{"name":"value","nativeSrc":"8300:5:14","nodeType":"YulIdentifier","src":"8300:5:14"}],"functionName":{"name":"cleanup_t_bool","nativeSrc":"8285:14:14","nodeType":"YulIdentifier","src":"8285:14:14"},"nativeSrc":"8285:21:14","nodeType":"YulFunctionCall","src":"8285:21:14"}],"functionName":{"name":"eq","nativeSrc":"8275:2:14","nodeType":"YulIdentifier","src":"8275:2:14"},"nativeSrc":"8275:32:14","nodeType":"YulFunctionCall","src":"8275:32:14"}],"functionName":{"name":"iszero","nativeSrc":"8268:6:14","nodeType":"YulIdentifier","src":"8268:6:14"},"nativeSrc":"8268:40:14","nodeType":"YulFunctionCall","src":"8268:40:14"},"nativeSrc":"8265:60:14","nodeType":"YulIf","src":"8265:60:14"}]},"name":"validator_revert_t_bool","nativeSrc":"8215:116:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"8248:5:14","nodeType":"YulTypedName","src":"8248:5:14","type":""}],"src":"8215:116:14"},{"body":{"nativeSrc":"8386:84:14","nodeType":"YulBlock","src":"8386:84:14","statements":[{"nativeSrc":"8396:29:14","nodeType":"YulAssignment","src":"8396:29:14","value":{"arguments":[{"name":"offset","nativeSrc":"8418:6:14","nodeType":"YulIdentifier","src":"8418:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"8405:12:14","nodeType":"YulIdentifier","src":"8405:12:14"},"nativeSrc":"8405:20:14","nodeType":"YulFunctionCall","src":"8405:20:14"},"variableNames":[{"name":"value","nativeSrc":"8396:5:14","nodeType":"YulIdentifier","src":"8396:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8458:5:14","nodeType":"YulIdentifier","src":"8458:5:14"}],"functionName":{"name":"validator_revert_t_bool","nativeSrc":"8434:23:14","nodeType":"YulIdentifier","src":"8434:23:14"},"nativeSrc":"8434:30:14","nodeType":"YulFunctionCall","src":"8434:30:14"},"nativeSrc":"8434:30:14","nodeType":"YulExpressionStatement","src":"8434:30:14"}]},"name":"abi_decode_t_bool","nativeSrc":"8337:133:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8364:6:14","nodeType":"YulTypedName","src":"8364:6:14","type":""},{"name":"end","nativeSrc":"8372:3:14","nodeType":"YulTypedName","src":"8372:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"8380:5:14","nodeType":"YulTypedName","src":"8380:5:14","type":""}],"src":"8337:133:14"},{"body":{"nativeSrc":"8556:388:14","nodeType":"YulBlock","src":"8556:388:14","statements":[{"body":{"nativeSrc":"8602:83:14","nodeType":"YulBlock","src":"8602:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"8604:77:14","nodeType":"YulIdentifier","src":"8604:77:14"},"nativeSrc":"8604:79:14","nodeType":"YulFunctionCall","src":"8604:79:14"},"nativeSrc":"8604:79:14","nodeType":"YulExpressionStatement","src":"8604:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8577:7:14","nodeType":"YulIdentifier","src":"8577:7:14"},{"name":"headStart","nativeSrc":"8586:9:14","nodeType":"YulIdentifier","src":"8586:9:14"}],"functionName":{"name":"sub","nativeSrc":"8573:3:14","nodeType":"YulIdentifier","src":"8573:3:14"},"nativeSrc":"8573:23:14","nodeType":"YulFunctionCall","src":"8573:23:14"},{"kind":"number","nativeSrc":"8598:2:14","nodeType":"YulLiteral","src":"8598:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8569:3:14","nodeType":"YulIdentifier","src":"8569:3:14"},"nativeSrc":"8569:32:14","nodeType":"YulFunctionCall","src":"8569:32:14"},"nativeSrc":"8566:119:14","nodeType":"YulIf","src":"8566:119:14"},{"nativeSrc":"8695:117:14","nodeType":"YulBlock","src":"8695:117:14","statements":[{"nativeSrc":"8710:15:14","nodeType":"YulVariableDeclaration","src":"8710:15:14","value":{"kind":"number","nativeSrc":"8724:1:14","nodeType":"YulLiteral","src":"8724:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"8714:6:14","nodeType":"YulTypedName","src":"8714:6:14","type":""}]},{"nativeSrc":"8739:63:14","nodeType":"YulAssignment","src":"8739:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8774:9:14","nodeType":"YulIdentifier","src":"8774:9:14"},{"name":"offset","nativeSrc":"8785:6:14","nodeType":"YulIdentifier","src":"8785:6:14"}],"functionName":{"name":"add","nativeSrc":"8770:3:14","nodeType":"YulIdentifier","src":"8770:3:14"},"nativeSrc":"8770:22:14","nodeType":"YulFunctionCall","src":"8770:22:14"},{"name":"dataEnd","nativeSrc":"8794:7:14","nodeType":"YulIdentifier","src":"8794:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"8749:20:14","nodeType":"YulIdentifier","src":"8749:20:14"},"nativeSrc":"8749:53:14","nodeType":"YulFunctionCall","src":"8749:53:14"},"variableNames":[{"name":"value0","nativeSrc":"8739:6:14","nodeType":"YulIdentifier","src":"8739:6:14"}]}]},{"nativeSrc":"8822:115:14","nodeType":"YulBlock","src":"8822:115:14","statements":[{"nativeSrc":"8837:16:14","nodeType":"YulVariableDeclaration","src":"8837:16:14","value":{"kind":"number","nativeSrc":"8851:2:14","nodeType":"YulLiteral","src":"8851:2:14","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"8841:6:14","nodeType":"YulTypedName","src":"8841:6:14","type":""}]},{"nativeSrc":"8867:60:14","nodeType":"YulAssignment","src":"8867:60:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8899:9:14","nodeType":"YulIdentifier","src":"8899:9:14"},{"name":"offset","nativeSrc":"8910:6:14","nodeType":"YulIdentifier","src":"8910:6:14"}],"functionName":{"name":"add","nativeSrc":"8895:3:14","nodeType":"YulIdentifier","src":"8895:3:14"},"nativeSrc":"8895:22:14","nodeType":"YulFunctionCall","src":"8895:22:14"},{"name":"dataEnd","nativeSrc":"8919:7:14","nodeType":"YulIdentifier","src":"8919:7:14"}],"functionName":{"name":"abi_decode_t_bool","nativeSrc":"8877:17:14","nodeType":"YulIdentifier","src":"8877:17:14"},"nativeSrc":"8877:50:14","nodeType":"YulFunctionCall","src":"8877:50:14"},"variableNames":[{"name":"value1","nativeSrc":"8867:6:14","nodeType":"YulIdentifier","src":"8867:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"8476:468:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8518:9:14","nodeType":"YulTypedName","src":"8518:9:14","type":""},{"name":"dataEnd","nativeSrc":"8529:7:14","nodeType":"YulTypedName","src":"8529:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8541:6:14","nodeType":"YulTypedName","src":"8541:6:14","type":""},{"name":"value1","nativeSrc":"8549:6:14","nodeType":"YulTypedName","src":"8549:6:14","type":""}],"src":"8476:468:14"},{"body":{"nativeSrc":"9039:28:14","nodeType":"YulBlock","src":"9039:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9056:1:14","nodeType":"YulLiteral","src":"9056:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"9059:1:14","nodeType":"YulLiteral","src":"9059:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9049:6:14","nodeType":"YulIdentifier","src":"9049:6:14"},"nativeSrc":"9049:12:14","nodeType":"YulFunctionCall","src":"9049:12:14"},"nativeSrc":"9049:12:14","nodeType":"YulExpressionStatement","src":"9049:12:14"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"8950:117:14","nodeType":"YulFunctionDefinition","src":"8950:117:14"},{"body":{"nativeSrc":"9162:28:14","nodeType":"YulBlock","src":"9162:28:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9179:1:14","nodeType":"YulLiteral","src":"9179:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"9182:1:14","nodeType":"YulLiteral","src":"9182:1:14","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9172:6:14","nodeType":"YulIdentifier","src":"9172:6:14"},"nativeSrc":"9172:12:14","nodeType":"YulFunctionCall","src":"9172:12:14"},"nativeSrc":"9172:12:14","nodeType":"YulExpressionStatement","src":"9172:12:14"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"9073:117:14","nodeType":"YulFunctionDefinition","src":"9073:117:14"},{"body":{"nativeSrc":"9224:152:14","nodeType":"YulBlock","src":"9224:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9241:1:14","nodeType":"YulLiteral","src":"9241:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"9244:77:14","nodeType":"YulLiteral","src":"9244:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9234:6:14","nodeType":"YulIdentifier","src":"9234:6:14"},"nativeSrc":"9234:88:14","nodeType":"YulFunctionCall","src":"9234:88:14"},"nativeSrc":"9234:88:14","nodeType":"YulExpressionStatement","src":"9234:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9338:1:14","nodeType":"YulLiteral","src":"9338:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"9341:4:14","nodeType":"YulLiteral","src":"9341:4:14","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"9331:6:14","nodeType":"YulIdentifier","src":"9331:6:14"},"nativeSrc":"9331:15:14","nodeType":"YulFunctionCall","src":"9331:15:14"},"nativeSrc":"9331:15:14","nodeType":"YulExpressionStatement","src":"9331:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9362:1:14","nodeType":"YulLiteral","src":"9362:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"9365:4:14","nodeType":"YulLiteral","src":"9365:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9355:6:14","nodeType":"YulIdentifier","src":"9355:6:14"},"nativeSrc":"9355:15:14","nodeType":"YulFunctionCall","src":"9355:15:14"},"nativeSrc":"9355:15:14","nodeType":"YulExpressionStatement","src":"9355:15:14"}]},"name":"panic_error_0x41","nativeSrc":"9196:180:14","nodeType":"YulFunctionDefinition","src":"9196:180:14"},{"body":{"nativeSrc":"9425:238:14","nodeType":"YulBlock","src":"9425:238:14","statements":[{"nativeSrc":"9435:58:14","nodeType":"YulVariableDeclaration","src":"9435:58:14","value":{"arguments":[{"name":"memPtr","nativeSrc":"9457:6:14","nodeType":"YulIdentifier","src":"9457:6:14"},{"arguments":[{"name":"size","nativeSrc":"9487:4:14","nodeType":"YulIdentifier","src":"9487:4:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"9465:21:14","nodeType":"YulIdentifier","src":"9465:21:14"},"nativeSrc":"9465:27:14","nodeType":"YulFunctionCall","src":"9465:27:14"}],"functionName":{"name":"add","nativeSrc":"9453:3:14","nodeType":"YulIdentifier","src":"9453:3:14"},"nativeSrc":"9453:40:14","nodeType":"YulFunctionCall","src":"9453:40:14"},"variables":[{"name":"newFreePtr","nativeSrc":"9439:10:14","nodeType":"YulTypedName","src":"9439:10:14","type":""}]},{"body":{"nativeSrc":"9604:22:14","nodeType":"YulBlock","src":"9604:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9606:16:14","nodeType":"YulIdentifier","src":"9606:16:14"},"nativeSrc":"9606:18:14","nodeType":"YulFunctionCall","src":"9606:18:14"},"nativeSrc":"9606:18:14","nodeType":"YulExpressionStatement","src":"9606:18:14"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"9547:10:14","nodeType":"YulIdentifier","src":"9547:10:14"},{"kind":"number","nativeSrc":"9559:18:14","nodeType":"YulLiteral","src":"9559:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9544:2:14","nodeType":"YulIdentifier","src":"9544:2:14"},"nativeSrc":"9544:34:14","nodeType":"YulFunctionCall","src":"9544:34:14"},{"arguments":[{"name":"newFreePtr","nativeSrc":"9583:10:14","nodeType":"YulIdentifier","src":"9583:10:14"},{"name":"memPtr","nativeSrc":"9595:6:14","nodeType":"YulIdentifier","src":"9595:6:14"}],"functionName":{"name":"lt","nativeSrc":"9580:2:14","nodeType":"YulIdentifier","src":"9580:2:14"},"nativeSrc":"9580:22:14","nodeType":"YulFunctionCall","src":"9580:22:14"}],"functionName":{"name":"or","nativeSrc":"9541:2:14","nodeType":"YulIdentifier","src":"9541:2:14"},"nativeSrc":"9541:62:14","nodeType":"YulFunctionCall","src":"9541:62:14"},"nativeSrc":"9538:88:14","nodeType":"YulIf","src":"9538:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9642:2:14","nodeType":"YulLiteral","src":"9642:2:14","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"9646:10:14","nodeType":"YulIdentifier","src":"9646:10:14"}],"functionName":{"name":"mstore","nativeSrc":"9635:6:14","nodeType":"YulIdentifier","src":"9635:6:14"},"nativeSrc":"9635:22:14","nodeType":"YulFunctionCall","src":"9635:22:14"},"nativeSrc":"9635:22:14","nodeType":"YulExpressionStatement","src":"9635:22:14"}]},"name":"finalize_allocation","nativeSrc":"9382:281:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"9411:6:14","nodeType":"YulTypedName","src":"9411:6:14","type":""},{"name":"size","nativeSrc":"9419:4:14","nodeType":"YulTypedName","src":"9419:4:14","type":""}],"src":"9382:281:14"},{"body":{"nativeSrc":"9710:88:14","nodeType":"YulBlock","src":"9710:88:14","statements":[{"nativeSrc":"9720:30:14","nodeType":"YulAssignment","src":"9720:30:14","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nativeSrc":"9730:18:14","nodeType":"YulIdentifier","src":"9730:18:14"},"nativeSrc":"9730:20:14","nodeType":"YulFunctionCall","src":"9730:20:14"},"variableNames":[{"name":"memPtr","nativeSrc":"9720:6:14","nodeType":"YulIdentifier","src":"9720:6:14"}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"9779:6:14","nodeType":"YulIdentifier","src":"9779:6:14"},{"name":"size","nativeSrc":"9787:4:14","nodeType":"YulIdentifier","src":"9787:4:14"}],"functionName":{"name":"finalize_allocation","nativeSrc":"9759:19:14","nodeType":"YulIdentifier","src":"9759:19:14"},"nativeSrc":"9759:33:14","nodeType":"YulFunctionCall","src":"9759:33:14"},"nativeSrc":"9759:33:14","nodeType":"YulExpressionStatement","src":"9759:33:14"}]},"name":"allocate_memory","nativeSrc":"9669:129:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nativeSrc":"9694:4:14","nodeType":"YulTypedName","src":"9694:4:14","type":""}],"returnVariables":[{"name":"memPtr","nativeSrc":"9703:6:14","nodeType":"YulTypedName","src":"9703:6:14","type":""}],"src":"9669:129:14"},{"body":{"nativeSrc":"9870:241:14","nodeType":"YulBlock","src":"9870:241:14","statements":[{"body":{"nativeSrc":"9975:22:14","nodeType":"YulBlock","src":"9975:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9977:16:14","nodeType":"YulIdentifier","src":"9977:16:14"},"nativeSrc":"9977:18:14","nodeType":"YulFunctionCall","src":"9977:18:14"},"nativeSrc":"9977:18:14","nodeType":"YulExpressionStatement","src":"9977:18:14"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"9947:6:14","nodeType":"YulIdentifier","src":"9947:6:14"},{"kind":"number","nativeSrc":"9955:18:14","nodeType":"YulLiteral","src":"9955:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"9944:2:14","nodeType":"YulIdentifier","src":"9944:2:14"},"nativeSrc":"9944:30:14","nodeType":"YulFunctionCall","src":"9944:30:14"},"nativeSrc":"9941:56:14","nodeType":"YulIf","src":"9941:56:14"},{"nativeSrc":"10007:37:14","nodeType":"YulAssignment","src":"10007:37:14","value":{"arguments":[{"name":"length","nativeSrc":"10037:6:14","nodeType":"YulIdentifier","src":"10037:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"10015:21:14","nodeType":"YulIdentifier","src":"10015:21:14"},"nativeSrc":"10015:29:14","nodeType":"YulFunctionCall","src":"10015:29:14"},"variableNames":[{"name":"size","nativeSrc":"10007:4:14","nodeType":"YulIdentifier","src":"10007:4:14"}]},{"nativeSrc":"10081:23:14","nodeType":"YulAssignment","src":"10081:23:14","value":{"arguments":[{"name":"size","nativeSrc":"10093:4:14","nodeType":"YulIdentifier","src":"10093:4:14"},{"kind":"number","nativeSrc":"10099:4:14","nodeType":"YulLiteral","src":"10099:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10089:3:14","nodeType":"YulIdentifier","src":"10089:3:14"},"nativeSrc":"10089:15:14","nodeType":"YulFunctionCall","src":"10089:15:14"},"variableNames":[{"name":"size","nativeSrc":"10081:4:14","nodeType":"YulIdentifier","src":"10081:4:14"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"9804:307:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nativeSrc":"9854:6:14","nodeType":"YulTypedName","src":"9854:6:14","type":""}],"returnVariables":[{"name":"size","nativeSrc":"9865:4:14","nodeType":"YulTypedName","src":"9865:4:14","type":""}],"src":"9804:307:14"},{"body":{"nativeSrc":"10181:82:14","nodeType":"YulBlock","src":"10181:82:14","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"10204:3:14","nodeType":"YulIdentifier","src":"10204:3:14"},{"name":"src","nativeSrc":"10209:3:14","nodeType":"YulIdentifier","src":"10209:3:14"},{"name":"length","nativeSrc":"10214:6:14","nodeType":"YulIdentifier","src":"10214:6:14"}],"functionName":{"name":"calldatacopy","nativeSrc":"10191:12:14","nodeType":"YulIdentifier","src":"10191:12:14"},"nativeSrc":"10191:30:14","nodeType":"YulFunctionCall","src":"10191:30:14"},"nativeSrc":"10191:30:14","nodeType":"YulExpressionStatement","src":"10191:30:14"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"10241:3:14","nodeType":"YulIdentifier","src":"10241:3:14"},{"name":"length","nativeSrc":"10246:6:14","nodeType":"YulIdentifier","src":"10246:6:14"}],"functionName":{"name":"add","nativeSrc":"10237:3:14","nodeType":"YulIdentifier","src":"10237:3:14"},"nativeSrc":"10237:16:14","nodeType":"YulFunctionCall","src":"10237:16:14"},{"kind":"number","nativeSrc":"10255:1:14","nodeType":"YulLiteral","src":"10255:1:14","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"10230:6:14","nodeType":"YulIdentifier","src":"10230:6:14"},"nativeSrc":"10230:27:14","nodeType":"YulFunctionCall","src":"10230:27:14"},"nativeSrc":"10230:27:14","nodeType":"YulExpressionStatement","src":"10230:27:14"}]},"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"10117:146:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"10163:3:14","nodeType":"YulTypedName","src":"10163:3:14","type":""},{"name":"dst","nativeSrc":"10168:3:14","nodeType":"YulTypedName","src":"10168:3:14","type":""},{"name":"length","nativeSrc":"10173:6:14","nodeType":"YulTypedName","src":"10173:6:14","type":""}],"src":"10117:146:14"},{"body":{"nativeSrc":"10352:340:14","nodeType":"YulBlock","src":"10352:340:14","statements":[{"nativeSrc":"10362:74:14","nodeType":"YulAssignment","src":"10362:74:14","value":{"arguments":[{"arguments":[{"name":"length","nativeSrc":"10428:6:14","nodeType":"YulIdentifier","src":"10428:6:14"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nativeSrc":"10387:40:14","nodeType":"YulIdentifier","src":"10387:40:14"},"nativeSrc":"10387:48:14","nodeType":"YulFunctionCall","src":"10387:48:14"}],"functionName":{"name":"allocate_memory","nativeSrc":"10371:15:14","nodeType":"YulIdentifier","src":"10371:15:14"},"nativeSrc":"10371:65:14","nodeType":"YulFunctionCall","src":"10371:65:14"},"variableNames":[{"name":"array","nativeSrc":"10362:5:14","nodeType":"YulIdentifier","src":"10362:5:14"}]},{"expression":{"arguments":[{"name":"array","nativeSrc":"10452:5:14","nodeType":"YulIdentifier","src":"10452:5:14"},{"name":"length","nativeSrc":"10459:6:14","nodeType":"YulIdentifier","src":"10459:6:14"}],"functionName":{"name":"mstore","nativeSrc":"10445:6:14","nodeType":"YulIdentifier","src":"10445:6:14"},"nativeSrc":"10445:21:14","nodeType":"YulFunctionCall","src":"10445:21:14"},"nativeSrc":"10445:21:14","nodeType":"YulExpressionStatement","src":"10445:21:14"},{"nativeSrc":"10475:27:14","nodeType":"YulVariableDeclaration","src":"10475:27:14","value":{"arguments":[{"name":"array","nativeSrc":"10490:5:14","nodeType":"YulIdentifier","src":"10490:5:14"},{"kind":"number","nativeSrc":"10497:4:14","nodeType":"YulLiteral","src":"10497:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10486:3:14","nodeType":"YulIdentifier","src":"10486:3:14"},"nativeSrc":"10486:16:14","nodeType":"YulFunctionCall","src":"10486:16:14"},"variables":[{"name":"dst","nativeSrc":"10479:3:14","nodeType":"YulTypedName","src":"10479:3:14","type":""}]},{"body":{"nativeSrc":"10540:83:14","nodeType":"YulBlock","src":"10540:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nativeSrc":"10542:77:14","nodeType":"YulIdentifier","src":"10542:77:14"},"nativeSrc":"10542:79:14","nodeType":"YulFunctionCall","src":"10542:79:14"},"nativeSrc":"10542:79:14","nodeType":"YulExpressionStatement","src":"10542:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"10521:3:14","nodeType":"YulIdentifier","src":"10521:3:14"},{"name":"length","nativeSrc":"10526:6:14","nodeType":"YulIdentifier","src":"10526:6:14"}],"functionName":{"name":"add","nativeSrc":"10517:3:14","nodeType":"YulIdentifier","src":"10517:3:14"},"nativeSrc":"10517:16:14","nodeType":"YulFunctionCall","src":"10517:16:14"},{"name":"end","nativeSrc":"10535:3:14","nodeType":"YulIdentifier","src":"10535:3:14"}],"functionName":{"name":"gt","nativeSrc":"10514:2:14","nodeType":"YulIdentifier","src":"10514:2:14"},"nativeSrc":"10514:25:14","nodeType":"YulFunctionCall","src":"10514:25:14"},"nativeSrc":"10511:112:14","nodeType":"YulIf","src":"10511:112:14"},{"expression":{"arguments":[{"name":"src","nativeSrc":"10669:3:14","nodeType":"YulIdentifier","src":"10669:3:14"},{"name":"dst","nativeSrc":"10674:3:14","nodeType":"YulIdentifier","src":"10674:3:14"},{"name":"length","nativeSrc":"10679:6:14","nodeType":"YulIdentifier","src":"10679:6:14"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nativeSrc":"10632:36:14","nodeType":"YulIdentifier","src":"10632:36:14"},"nativeSrc":"10632:54:14","nodeType":"YulFunctionCall","src":"10632:54:14"},"nativeSrc":"10632:54:14","nodeType":"YulExpressionStatement","src":"10632:54:14"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"10269:423:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"10325:3:14","nodeType":"YulTypedName","src":"10325:3:14","type":""},{"name":"length","nativeSrc":"10330:6:14","nodeType":"YulTypedName","src":"10330:6:14","type":""},{"name":"end","nativeSrc":"10338:3:14","nodeType":"YulTypedName","src":"10338:3:14","type":""}],"returnVariables":[{"name":"array","nativeSrc":"10346:5:14","nodeType":"YulTypedName","src":"10346:5:14","type":""}],"src":"10269:423:14"},{"body":{"nativeSrc":"10772:277:14","nodeType":"YulBlock","src":"10772:277:14","statements":[{"body":{"nativeSrc":"10821:83:14","nodeType":"YulBlock","src":"10821:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nativeSrc":"10823:77:14","nodeType":"YulIdentifier","src":"10823:77:14"},"nativeSrc":"10823:79:14","nodeType":"YulFunctionCall","src":"10823:79:14"},"nativeSrc":"10823:79:14","nodeType":"YulExpressionStatement","src":"10823:79:14"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"10800:6:14","nodeType":"YulIdentifier","src":"10800:6:14"},{"kind":"number","nativeSrc":"10808:4:14","nodeType":"YulLiteral","src":"10808:4:14","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"10796:3:14","nodeType":"YulIdentifier","src":"10796:3:14"},"nativeSrc":"10796:17:14","nodeType":"YulFunctionCall","src":"10796:17:14"},{"name":"end","nativeSrc":"10815:3:14","nodeType":"YulIdentifier","src":"10815:3:14"}],"functionName":{"name":"slt","nativeSrc":"10792:3:14","nodeType":"YulIdentifier","src":"10792:3:14"},"nativeSrc":"10792:27:14","nodeType":"YulFunctionCall","src":"10792:27:14"}],"functionName":{"name":"iszero","nativeSrc":"10785:6:14","nodeType":"YulIdentifier","src":"10785:6:14"},"nativeSrc":"10785:35:14","nodeType":"YulFunctionCall","src":"10785:35:14"},"nativeSrc":"10782:122:14","nodeType":"YulIf","src":"10782:122:14"},{"nativeSrc":"10913:34:14","nodeType":"YulVariableDeclaration","src":"10913:34:14","value":{"arguments":[{"name":"offset","nativeSrc":"10940:6:14","nodeType":"YulIdentifier","src":"10940:6:14"}],"functionName":{"name":"calldataload","nativeSrc":"10927:12:14","nodeType":"YulIdentifier","src":"10927:12:14"},"nativeSrc":"10927:20:14","nodeType":"YulFunctionCall","src":"10927:20:14"},"variables":[{"name":"length","nativeSrc":"10917:6:14","nodeType":"YulTypedName","src":"10917:6:14","type":""}]},{"nativeSrc":"10956:87:14","nodeType":"YulAssignment","src":"10956:87:14","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"11016:6:14","nodeType":"YulIdentifier","src":"11016:6:14"},{"kind":"number","nativeSrc":"11024:4:14","nodeType":"YulLiteral","src":"11024:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"11012:3:14","nodeType":"YulIdentifier","src":"11012:3:14"},"nativeSrc":"11012:17:14","nodeType":"YulFunctionCall","src":"11012:17:14"},{"name":"length","nativeSrc":"11031:6:14","nodeType":"YulIdentifier","src":"11031:6:14"},{"name":"end","nativeSrc":"11039:3:14","nodeType":"YulIdentifier","src":"11039:3:14"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nativeSrc":"10965:46:14","nodeType":"YulIdentifier","src":"10965:46:14"},"nativeSrc":"10965:78:14","nodeType":"YulFunctionCall","src":"10965:78:14"},"variableNames":[{"name":"array","nativeSrc":"10956:5:14","nodeType":"YulIdentifier","src":"10956:5:14"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"10711:338:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"10750:6:14","nodeType":"YulTypedName","src":"10750:6:14","type":""},{"name":"end","nativeSrc":"10758:3:14","nodeType":"YulTypedName","src":"10758:3:14","type":""}],"returnVariables":[{"name":"array","nativeSrc":"10766:5:14","nodeType":"YulTypedName","src":"10766:5:14","type":""}],"src":"10711:338:14"},{"body":{"nativeSrc":"11181:817:14","nodeType":"YulBlock","src":"11181:817:14","statements":[{"body":{"nativeSrc":"11228:83:14","nodeType":"YulBlock","src":"11228:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"11230:77:14","nodeType":"YulIdentifier","src":"11230:77:14"},"nativeSrc":"11230:79:14","nodeType":"YulFunctionCall","src":"11230:79:14"},"nativeSrc":"11230:79:14","nodeType":"YulExpressionStatement","src":"11230:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11202:7:14","nodeType":"YulIdentifier","src":"11202:7:14"},{"name":"headStart","nativeSrc":"11211:9:14","nodeType":"YulIdentifier","src":"11211:9:14"}],"functionName":{"name":"sub","nativeSrc":"11198:3:14","nodeType":"YulIdentifier","src":"11198:3:14"},"nativeSrc":"11198:23:14","nodeType":"YulFunctionCall","src":"11198:23:14"},{"kind":"number","nativeSrc":"11223:3:14","nodeType":"YulLiteral","src":"11223:3:14","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"11194:3:14","nodeType":"YulIdentifier","src":"11194:3:14"},"nativeSrc":"11194:33:14","nodeType":"YulFunctionCall","src":"11194:33:14"},"nativeSrc":"11191:120:14","nodeType":"YulIf","src":"11191:120:14"},{"nativeSrc":"11321:117:14","nodeType":"YulBlock","src":"11321:117:14","statements":[{"nativeSrc":"11336:15:14","nodeType":"YulVariableDeclaration","src":"11336:15:14","value":{"kind":"number","nativeSrc":"11350:1:14","nodeType":"YulLiteral","src":"11350:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"11340:6:14","nodeType":"YulTypedName","src":"11340:6:14","type":""}]},{"nativeSrc":"11365:63:14","nodeType":"YulAssignment","src":"11365:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11400:9:14","nodeType":"YulIdentifier","src":"11400:9:14"},{"name":"offset","nativeSrc":"11411:6:14","nodeType":"YulIdentifier","src":"11411:6:14"}],"functionName":{"name":"add","nativeSrc":"11396:3:14","nodeType":"YulIdentifier","src":"11396:3:14"},"nativeSrc":"11396:22:14","nodeType":"YulFunctionCall","src":"11396:22:14"},{"name":"dataEnd","nativeSrc":"11420:7:14","nodeType":"YulIdentifier","src":"11420:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"11375:20:14","nodeType":"YulIdentifier","src":"11375:20:14"},"nativeSrc":"11375:53:14","nodeType":"YulFunctionCall","src":"11375:53:14"},"variableNames":[{"name":"value0","nativeSrc":"11365:6:14","nodeType":"YulIdentifier","src":"11365:6:14"}]}]},{"nativeSrc":"11448:118:14","nodeType":"YulBlock","src":"11448:118:14","statements":[{"nativeSrc":"11463:16:14","nodeType":"YulVariableDeclaration","src":"11463:16:14","value":{"kind":"number","nativeSrc":"11477:2:14","nodeType":"YulLiteral","src":"11477:2:14","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"11467:6:14","nodeType":"YulTypedName","src":"11467:6:14","type":""}]},{"nativeSrc":"11493:63:14","nodeType":"YulAssignment","src":"11493:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11528:9:14","nodeType":"YulIdentifier","src":"11528:9:14"},{"name":"offset","nativeSrc":"11539:6:14","nodeType":"YulIdentifier","src":"11539:6:14"}],"functionName":{"name":"add","nativeSrc":"11524:3:14","nodeType":"YulIdentifier","src":"11524:3:14"},"nativeSrc":"11524:22:14","nodeType":"YulFunctionCall","src":"11524:22:14"},{"name":"dataEnd","nativeSrc":"11548:7:14","nodeType":"YulIdentifier","src":"11548:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"11503:20:14","nodeType":"YulIdentifier","src":"11503:20:14"},"nativeSrc":"11503:53:14","nodeType":"YulFunctionCall","src":"11503:53:14"},"variableNames":[{"name":"value1","nativeSrc":"11493:6:14","nodeType":"YulIdentifier","src":"11493:6:14"}]}]},{"nativeSrc":"11576:118:14","nodeType":"YulBlock","src":"11576:118:14","statements":[{"nativeSrc":"11591:16:14","nodeType":"YulVariableDeclaration","src":"11591:16:14","value":{"kind":"number","nativeSrc":"11605:2:14","nodeType":"YulLiteral","src":"11605:2:14","type":"","value":"64"},"variables":[{"name":"offset","nativeSrc":"11595:6:14","nodeType":"YulTypedName","src":"11595:6:14","type":""}]},{"nativeSrc":"11621:63:14","nodeType":"YulAssignment","src":"11621:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11656:9:14","nodeType":"YulIdentifier","src":"11656:9:14"},{"name":"offset","nativeSrc":"11667:6:14","nodeType":"YulIdentifier","src":"11667:6:14"}],"functionName":{"name":"add","nativeSrc":"11652:3:14","nodeType":"YulIdentifier","src":"11652:3:14"},"nativeSrc":"11652:22:14","nodeType":"YulFunctionCall","src":"11652:22:14"},{"name":"dataEnd","nativeSrc":"11676:7:14","nodeType":"YulIdentifier","src":"11676:7:14"}],"functionName":{"name":"abi_decode_t_uint256","nativeSrc":"11631:20:14","nodeType":"YulIdentifier","src":"11631:20:14"},"nativeSrc":"11631:53:14","nodeType":"YulFunctionCall","src":"11631:53:14"},"variableNames":[{"name":"value2","nativeSrc":"11621:6:14","nodeType":"YulIdentifier","src":"11621:6:14"}]}]},{"nativeSrc":"11704:287:14","nodeType":"YulBlock","src":"11704:287:14","statements":[{"nativeSrc":"11719:46:14","nodeType":"YulVariableDeclaration","src":"11719:46:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11750:9:14","nodeType":"YulIdentifier","src":"11750:9:14"},{"kind":"number","nativeSrc":"11761:2:14","nodeType":"YulLiteral","src":"11761:2:14","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11746:3:14","nodeType":"YulIdentifier","src":"11746:3:14"},"nativeSrc":"11746:18:14","nodeType":"YulFunctionCall","src":"11746:18:14"}],"functionName":{"name":"calldataload","nativeSrc":"11733:12:14","nodeType":"YulIdentifier","src":"11733:12:14"},"nativeSrc":"11733:32:14","nodeType":"YulFunctionCall","src":"11733:32:14"},"variables":[{"name":"offset","nativeSrc":"11723:6:14","nodeType":"YulTypedName","src":"11723:6:14","type":""}]},{"body":{"nativeSrc":"11812:83:14","nodeType":"YulBlock","src":"11812:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nativeSrc":"11814:77:14","nodeType":"YulIdentifier","src":"11814:77:14"},"nativeSrc":"11814:79:14","nodeType":"YulFunctionCall","src":"11814:79:14"},"nativeSrc":"11814:79:14","nodeType":"YulExpressionStatement","src":"11814:79:14"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"11784:6:14","nodeType":"YulIdentifier","src":"11784:6:14"},{"kind":"number","nativeSrc":"11792:18:14","nodeType":"YulLiteral","src":"11792:18:14","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"11781:2:14","nodeType":"YulIdentifier","src":"11781:2:14"},"nativeSrc":"11781:30:14","nodeType":"YulFunctionCall","src":"11781:30:14"},"nativeSrc":"11778:117:14","nodeType":"YulIf","src":"11778:117:14"},{"nativeSrc":"11909:72:14","nodeType":"YulAssignment","src":"11909:72:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11953:9:14","nodeType":"YulIdentifier","src":"11953:9:14"},{"name":"offset","nativeSrc":"11964:6:14","nodeType":"YulIdentifier","src":"11964:6:14"}],"functionName":{"name":"add","nativeSrc":"11949:3:14","nodeType":"YulIdentifier","src":"11949:3:14"},"nativeSrc":"11949:22:14","nodeType":"YulFunctionCall","src":"11949:22:14"},{"name":"dataEnd","nativeSrc":"11973:7:14","nodeType":"YulIdentifier","src":"11973:7:14"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nativeSrc":"11919:29:14","nodeType":"YulIdentifier","src":"11919:29:14"},"nativeSrc":"11919:62:14","nodeType":"YulFunctionCall","src":"11919:62:14"},"variableNames":[{"name":"value3","nativeSrc":"11909:6:14","nodeType":"YulIdentifier","src":"11909:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nativeSrc":"11055:943:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11127:9:14","nodeType":"YulTypedName","src":"11127:9:14","type":""},{"name":"dataEnd","nativeSrc":"11138:7:14","nodeType":"YulTypedName","src":"11138:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11150:6:14","nodeType":"YulTypedName","src":"11150:6:14","type":""},{"name":"value1","nativeSrc":"11158:6:14","nodeType":"YulTypedName","src":"11158:6:14","type":""},{"name":"value2","nativeSrc":"11166:6:14","nodeType":"YulTypedName","src":"11166:6:14","type":""},{"name":"value3","nativeSrc":"11174:6:14","nodeType":"YulTypedName","src":"11174:6:14","type":""}],"src":"11055:943:14"},{"body":{"nativeSrc":"12087:391:14","nodeType":"YulBlock","src":"12087:391:14","statements":[{"body":{"nativeSrc":"12133:83:14","nodeType":"YulBlock","src":"12133:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"12135:77:14","nodeType":"YulIdentifier","src":"12135:77:14"},"nativeSrc":"12135:79:14","nodeType":"YulFunctionCall","src":"12135:79:14"},"nativeSrc":"12135:79:14","nodeType":"YulExpressionStatement","src":"12135:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12108:7:14","nodeType":"YulIdentifier","src":"12108:7:14"},{"name":"headStart","nativeSrc":"12117:9:14","nodeType":"YulIdentifier","src":"12117:9:14"}],"functionName":{"name":"sub","nativeSrc":"12104:3:14","nodeType":"YulIdentifier","src":"12104:3:14"},"nativeSrc":"12104:23:14","nodeType":"YulFunctionCall","src":"12104:23:14"},{"kind":"number","nativeSrc":"12129:2:14","nodeType":"YulLiteral","src":"12129:2:14","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"12100:3:14","nodeType":"YulIdentifier","src":"12100:3:14"},"nativeSrc":"12100:32:14","nodeType":"YulFunctionCall","src":"12100:32:14"},"nativeSrc":"12097:119:14","nodeType":"YulIf","src":"12097:119:14"},{"nativeSrc":"12226:117:14","nodeType":"YulBlock","src":"12226:117:14","statements":[{"nativeSrc":"12241:15:14","nodeType":"YulVariableDeclaration","src":"12241:15:14","value":{"kind":"number","nativeSrc":"12255:1:14","nodeType":"YulLiteral","src":"12255:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"12245:6:14","nodeType":"YulTypedName","src":"12245:6:14","type":""}]},{"nativeSrc":"12270:63:14","nodeType":"YulAssignment","src":"12270:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12305:9:14","nodeType":"YulIdentifier","src":"12305:9:14"},{"name":"offset","nativeSrc":"12316:6:14","nodeType":"YulIdentifier","src":"12316:6:14"}],"functionName":{"name":"add","nativeSrc":"12301:3:14","nodeType":"YulIdentifier","src":"12301:3:14"},"nativeSrc":"12301:22:14","nodeType":"YulFunctionCall","src":"12301:22:14"},{"name":"dataEnd","nativeSrc":"12325:7:14","nodeType":"YulIdentifier","src":"12325:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"12280:20:14","nodeType":"YulIdentifier","src":"12280:20:14"},"nativeSrc":"12280:53:14","nodeType":"YulFunctionCall","src":"12280:53:14"},"variableNames":[{"name":"value0","nativeSrc":"12270:6:14","nodeType":"YulIdentifier","src":"12270:6:14"}]}]},{"nativeSrc":"12353:118:14","nodeType":"YulBlock","src":"12353:118:14","statements":[{"nativeSrc":"12368:16:14","nodeType":"YulVariableDeclaration","src":"12368:16:14","value":{"kind":"number","nativeSrc":"12382:2:14","nodeType":"YulLiteral","src":"12382:2:14","type":"","value":"32"},"variables":[{"name":"offset","nativeSrc":"12372:6:14","nodeType":"YulTypedName","src":"12372:6:14","type":""}]},{"nativeSrc":"12398:63:14","nodeType":"YulAssignment","src":"12398:63:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12433:9:14","nodeType":"YulIdentifier","src":"12433:9:14"},{"name":"offset","nativeSrc":"12444:6:14","nodeType":"YulIdentifier","src":"12444:6:14"}],"functionName":{"name":"add","nativeSrc":"12429:3:14","nodeType":"YulIdentifier","src":"12429:3:14"},"nativeSrc":"12429:22:14","nodeType":"YulFunctionCall","src":"12429:22:14"},{"name":"dataEnd","nativeSrc":"12453:7:14","nodeType":"YulIdentifier","src":"12453:7:14"}],"functionName":{"name":"abi_decode_t_address","nativeSrc":"12408:20:14","nodeType":"YulIdentifier","src":"12408:20:14"},"nativeSrc":"12408:53:14","nodeType":"YulFunctionCall","src":"12408:53:14"},"variableNames":[{"name":"value1","nativeSrc":"12398:6:14","nodeType":"YulIdentifier","src":"12398:6:14"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"12004:474:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12049:9:14","nodeType":"YulTypedName","src":"12049:9:14","type":""},{"name":"dataEnd","nativeSrc":"12060:7:14","nodeType":"YulTypedName","src":"12060:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12072:6:14","nodeType":"YulTypedName","src":"12072:6:14","type":""},{"name":"value1","nativeSrc":"12080:6:14","nodeType":"YulTypedName","src":"12080:6:14","type":""}],"src":"12004:474:14"},{"body":{"nativeSrc":"12512:152:14","nodeType":"YulBlock","src":"12512:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12529:1:14","nodeType":"YulLiteral","src":"12529:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"12532:77:14","nodeType":"YulLiteral","src":"12532:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12522:6:14","nodeType":"YulIdentifier","src":"12522:6:14"},"nativeSrc":"12522:88:14","nodeType":"YulFunctionCall","src":"12522:88:14"},"nativeSrc":"12522:88:14","nodeType":"YulExpressionStatement","src":"12522:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12626:1:14","nodeType":"YulLiteral","src":"12626:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"12629:4:14","nodeType":"YulLiteral","src":"12629:4:14","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"12619:6:14","nodeType":"YulIdentifier","src":"12619:6:14"},"nativeSrc":"12619:15:14","nodeType":"YulFunctionCall","src":"12619:15:14"},"nativeSrc":"12619:15:14","nodeType":"YulExpressionStatement","src":"12619:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12650:1:14","nodeType":"YulLiteral","src":"12650:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"12653:4:14","nodeType":"YulLiteral","src":"12653:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"12643:6:14","nodeType":"YulIdentifier","src":"12643:6:14"},"nativeSrc":"12643:15:14","nodeType":"YulFunctionCall","src":"12643:15:14"},"nativeSrc":"12643:15:14","nodeType":"YulExpressionStatement","src":"12643:15:14"}]},"name":"panic_error_0x22","nativeSrc":"12484:180:14","nodeType":"YulFunctionDefinition","src":"12484:180:14"},{"body":{"nativeSrc":"12721:269:14","nodeType":"YulBlock","src":"12721:269:14","statements":[{"nativeSrc":"12731:22:14","nodeType":"YulAssignment","src":"12731:22:14","value":{"arguments":[{"name":"data","nativeSrc":"12745:4:14","nodeType":"YulIdentifier","src":"12745:4:14"},{"kind":"number","nativeSrc":"12751:1:14","nodeType":"YulLiteral","src":"12751:1:14","type":"","value":"2"}],"functionName":{"name":"div","nativeSrc":"12741:3:14","nodeType":"YulIdentifier","src":"12741:3:14"},"nativeSrc":"12741:12:14","nodeType":"YulFunctionCall","src":"12741:12:14"},"variableNames":[{"name":"length","nativeSrc":"12731:6:14","nodeType":"YulIdentifier","src":"12731:6:14"}]},{"nativeSrc":"12762:38:14","nodeType":"YulVariableDeclaration","src":"12762:38:14","value":{"arguments":[{"name":"data","nativeSrc":"12792:4:14","nodeType":"YulIdentifier","src":"12792:4:14"},{"kind":"number","nativeSrc":"12798:1:14","nodeType":"YulLiteral","src":"12798:1:14","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"12788:3:14","nodeType":"YulIdentifier","src":"12788:3:14"},"nativeSrc":"12788:12:14","nodeType":"YulFunctionCall","src":"12788:12:14"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"12766:18:14","nodeType":"YulTypedName","src":"12766:18:14","type":""}]},{"body":{"nativeSrc":"12839:51:14","nodeType":"YulBlock","src":"12839:51:14","statements":[{"nativeSrc":"12853:27:14","nodeType":"YulAssignment","src":"12853:27:14","value":{"arguments":[{"name":"length","nativeSrc":"12867:6:14","nodeType":"YulIdentifier","src":"12867:6:14"},{"kind":"number","nativeSrc":"12875:4:14","nodeType":"YulLiteral","src":"12875:4:14","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"12863:3:14","nodeType":"YulIdentifier","src":"12863:3:14"},"nativeSrc":"12863:17:14","nodeType":"YulFunctionCall","src":"12863:17:14"},"variableNames":[{"name":"length","nativeSrc":"12853:6:14","nodeType":"YulIdentifier","src":"12853:6:14"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"12819:18:14","nodeType":"YulIdentifier","src":"12819:18:14"}],"functionName":{"name":"iszero","nativeSrc":"12812:6:14","nodeType":"YulIdentifier","src":"12812:6:14"},"nativeSrc":"12812:26:14","nodeType":"YulFunctionCall","src":"12812:26:14"},"nativeSrc":"12809:81:14","nodeType":"YulIf","src":"12809:81:14"},{"body":{"nativeSrc":"12942:42:14","nodeType":"YulBlock","src":"12942:42:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nativeSrc":"12956:16:14","nodeType":"YulIdentifier","src":"12956:16:14"},"nativeSrc":"12956:18:14","nodeType":"YulFunctionCall","src":"12956:18:14"},"nativeSrc":"12956:18:14","nodeType":"YulExpressionStatement","src":"12956:18:14"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"12906:18:14","nodeType":"YulIdentifier","src":"12906:18:14"},{"arguments":[{"name":"length","nativeSrc":"12929:6:14","nodeType":"YulIdentifier","src":"12929:6:14"},{"kind":"number","nativeSrc":"12937:2:14","nodeType":"YulLiteral","src":"12937:2:14","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"12926:2:14","nodeType":"YulIdentifier","src":"12926:2:14"},"nativeSrc":"12926:14:14","nodeType":"YulFunctionCall","src":"12926:14:14"}],"functionName":{"name":"eq","nativeSrc":"12903:2:14","nodeType":"YulIdentifier","src":"12903:2:14"},"nativeSrc":"12903:38:14","nodeType":"YulFunctionCall","src":"12903:38:14"},"nativeSrc":"12900:84:14","nodeType":"YulIf","src":"12900:84:14"}]},"name":"extract_byte_array_length","nativeSrc":"12670:320:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"12705:4:14","nodeType":"YulTypedName","src":"12705:4:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"12714:6:14","nodeType":"YulTypedName","src":"12714:6:14","type":""}],"src":"12670:320:14"},{"body":{"nativeSrc":"13102:114:14","nodeType":"YulBlock","src":"13102:114:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"13124:6:14","nodeType":"YulIdentifier","src":"13124:6:14"},{"kind":"number","nativeSrc":"13132:1:14","nodeType":"YulLiteral","src":"13132:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13120:3:14","nodeType":"YulIdentifier","src":"13120:3:14"},"nativeSrc":"13120:14:14","nodeType":"YulFunctionCall","src":"13120:14:14"},{"hexValue":"43616e6e6f74207472616e7366657220746f2061207a65726f20616464726573","kind":"string","nativeSrc":"13136:34:14","nodeType":"YulLiteral","src":"13136:34:14","type":"","value":"Cannot transfer to a zero addres"}],"functionName":{"name":"mstore","nativeSrc":"13113:6:14","nodeType":"YulIdentifier","src":"13113:6:14"},"nativeSrc":"13113:58:14","nodeType":"YulFunctionCall","src":"13113:58:14"},"nativeSrc":"13113:58:14","nodeType":"YulExpressionStatement","src":"13113:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"13192:6:14","nodeType":"YulIdentifier","src":"13192:6:14"},{"kind":"number","nativeSrc":"13200:2:14","nodeType":"YulLiteral","src":"13200:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13188:3:14","nodeType":"YulIdentifier","src":"13188:3:14"},"nativeSrc":"13188:15:14","nodeType":"YulFunctionCall","src":"13188:15:14"},{"hexValue":"73","kind":"string","nativeSrc":"13205:3:14","nodeType":"YulLiteral","src":"13205:3:14","type":"","value":"s"}],"functionName":{"name":"mstore","nativeSrc":"13181:6:14","nodeType":"YulIdentifier","src":"13181:6:14"},"nativeSrc":"13181:28:14","nodeType":"YulFunctionCall","src":"13181:28:14"},"nativeSrc":"13181:28:14","nodeType":"YulExpressionStatement","src":"13181:28:14"}]},"name":"store_literal_in_memory_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79","nativeSrc":"12996:220:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"13094:6:14","nodeType":"YulTypedName","src":"13094:6:14","type":""}],"src":"12996:220:14"},{"body":{"nativeSrc":"13368:220:14","nodeType":"YulBlock","src":"13368:220:14","statements":[{"nativeSrc":"13378:74:14","nodeType":"YulAssignment","src":"13378:74:14","value":{"arguments":[{"name":"pos","nativeSrc":"13444:3:14","nodeType":"YulIdentifier","src":"13444:3:14"},{"kind":"number","nativeSrc":"13449:2:14","nodeType":"YulLiteral","src":"13449:2:14","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"13385:58:14","nodeType":"YulIdentifier","src":"13385:58:14"},"nativeSrc":"13385:67:14","nodeType":"YulFunctionCall","src":"13385:67:14"},"variableNames":[{"name":"pos","nativeSrc":"13378:3:14","nodeType":"YulIdentifier","src":"13378:3:14"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"13550:3:14","nodeType":"YulIdentifier","src":"13550:3:14"}],"functionName":{"name":"store_literal_in_memory_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79","nativeSrc":"13461:88:14","nodeType":"YulIdentifier","src":"13461:88:14"},"nativeSrc":"13461:93:14","nodeType":"YulFunctionCall","src":"13461:93:14"},"nativeSrc":"13461:93:14","nodeType":"YulExpressionStatement","src":"13461:93:14"},{"nativeSrc":"13563:19:14","nodeType":"YulAssignment","src":"13563:19:14","value":{"arguments":[{"name":"pos","nativeSrc":"13574:3:14","nodeType":"YulIdentifier","src":"13574:3:14"},{"kind":"number","nativeSrc":"13579:2:14","nodeType":"YulLiteral","src":"13579:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13570:3:14","nodeType":"YulIdentifier","src":"13570:3:14"},"nativeSrc":"13570:12:14","nodeType":"YulFunctionCall","src":"13570:12:14"},"variableNames":[{"name":"end","nativeSrc":"13563:3:14","nodeType":"YulIdentifier","src":"13563:3:14"}]}]},"name":"abi_encode_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79_to_t_string_memory_ptr_fromStack","nativeSrc":"13222:366:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"13356:3:14","nodeType":"YulTypedName","src":"13356:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"13364:3:14","nodeType":"YulTypedName","src":"13364:3:14","type":""}],"src":"13222:366:14"},{"body":{"nativeSrc":"13765:248:14","nodeType":"YulBlock","src":"13765:248:14","statements":[{"nativeSrc":"13775:26:14","nodeType":"YulAssignment","src":"13775:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"13787:9:14","nodeType":"YulIdentifier","src":"13787:9:14"},{"kind":"number","nativeSrc":"13798:2:14","nodeType":"YulLiteral","src":"13798:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"13783:3:14","nodeType":"YulIdentifier","src":"13783:3:14"},"nativeSrc":"13783:18:14","nodeType":"YulFunctionCall","src":"13783:18:14"},"variableNames":[{"name":"tail","nativeSrc":"13775:4:14","nodeType":"YulIdentifier","src":"13775:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13822:9:14","nodeType":"YulIdentifier","src":"13822:9:14"},{"kind":"number","nativeSrc":"13833:1:14","nodeType":"YulLiteral","src":"13833:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"13818:3:14","nodeType":"YulIdentifier","src":"13818:3:14"},"nativeSrc":"13818:17:14","nodeType":"YulFunctionCall","src":"13818:17:14"},{"arguments":[{"name":"tail","nativeSrc":"13841:4:14","nodeType":"YulIdentifier","src":"13841:4:14"},{"name":"headStart","nativeSrc":"13847:9:14","nodeType":"YulIdentifier","src":"13847:9:14"}],"functionName":{"name":"sub","nativeSrc":"13837:3:14","nodeType":"YulIdentifier","src":"13837:3:14"},"nativeSrc":"13837:20:14","nodeType":"YulFunctionCall","src":"13837:20:14"}],"functionName":{"name":"mstore","nativeSrc":"13811:6:14","nodeType":"YulIdentifier","src":"13811:6:14"},"nativeSrc":"13811:47:14","nodeType":"YulFunctionCall","src":"13811:47:14"},"nativeSrc":"13811:47:14","nodeType":"YulExpressionStatement","src":"13811:47:14"},{"nativeSrc":"13867:139:14","nodeType":"YulAssignment","src":"13867:139:14","value":{"arguments":[{"name":"tail","nativeSrc":"14001:4:14","nodeType":"YulIdentifier","src":"14001:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79_to_t_string_memory_ptr_fromStack","nativeSrc":"13875:124:14","nodeType":"YulIdentifier","src":"13875:124:14"},"nativeSrc":"13875:131:14","nodeType":"YulFunctionCall","src":"13875:131:14"},"variableNames":[{"name":"tail","nativeSrc":"13867:4:14","nodeType":"YulIdentifier","src":"13867:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"13594:419:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13745:9:14","nodeType":"YulTypedName","src":"13745:9:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13760:4:14","nodeType":"YulTypedName","src":"13760:4:14","type":""}],"src":"13594:419:14"},{"body":{"nativeSrc":"14125:73:14","nodeType":"YulBlock","src":"14125:73:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"14147:6:14","nodeType":"YulIdentifier","src":"14147:6:14"},{"kind":"number","nativeSrc":"14155:1:14","nodeType":"YulLiteral","src":"14155:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"14143:3:14","nodeType":"YulIdentifier","src":"14143:3:14"},"nativeSrc":"14143:14:14","nodeType":"YulFunctionCall","src":"14143:14:14"},{"hexValue":"526563697069656e7420616c7265616479206f776e73206120504f4150","kind":"string","nativeSrc":"14159:31:14","nodeType":"YulLiteral","src":"14159:31:14","type":"","value":"Recipient already owns a POAP"}],"functionName":{"name":"mstore","nativeSrc":"14136:6:14","nodeType":"YulIdentifier","src":"14136:6:14"},"nativeSrc":"14136:55:14","nodeType":"YulFunctionCall","src":"14136:55:14"},"nativeSrc":"14136:55:14","nodeType":"YulExpressionStatement","src":"14136:55:14"}]},"name":"store_literal_in_memory_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad","nativeSrc":"14019:179:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"14117:6:14","nodeType":"YulTypedName","src":"14117:6:14","type":""}],"src":"14019:179:14"},{"body":{"nativeSrc":"14350:220:14","nodeType":"YulBlock","src":"14350:220:14","statements":[{"nativeSrc":"14360:74:14","nodeType":"YulAssignment","src":"14360:74:14","value":{"arguments":[{"name":"pos","nativeSrc":"14426:3:14","nodeType":"YulIdentifier","src":"14426:3:14"},{"kind":"number","nativeSrc":"14431:2:14","nodeType":"YulLiteral","src":"14431:2:14","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"14367:58:14","nodeType":"YulIdentifier","src":"14367:58:14"},"nativeSrc":"14367:67:14","nodeType":"YulFunctionCall","src":"14367:67:14"},"variableNames":[{"name":"pos","nativeSrc":"14360:3:14","nodeType":"YulIdentifier","src":"14360:3:14"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"14532:3:14","nodeType":"YulIdentifier","src":"14532:3:14"}],"functionName":{"name":"store_literal_in_memory_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad","nativeSrc":"14443:88:14","nodeType":"YulIdentifier","src":"14443:88:14"},"nativeSrc":"14443:93:14","nodeType":"YulFunctionCall","src":"14443:93:14"},"nativeSrc":"14443:93:14","nodeType":"YulExpressionStatement","src":"14443:93:14"},{"nativeSrc":"14545:19:14","nodeType":"YulAssignment","src":"14545:19:14","value":{"arguments":[{"name":"pos","nativeSrc":"14556:3:14","nodeType":"YulIdentifier","src":"14556:3:14"},{"kind":"number","nativeSrc":"14561:2:14","nodeType":"YulLiteral","src":"14561:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14552:3:14","nodeType":"YulIdentifier","src":"14552:3:14"},"nativeSrc":"14552:12:14","nodeType":"YulFunctionCall","src":"14552:12:14"},"variableNames":[{"name":"end","nativeSrc":"14545:3:14","nodeType":"YulIdentifier","src":"14545:3:14"}]}]},"name":"abi_encode_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad_to_t_string_memory_ptr_fromStack","nativeSrc":"14204:366:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"14338:3:14","nodeType":"YulTypedName","src":"14338:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"14346:3:14","nodeType":"YulTypedName","src":"14346:3:14","type":""}],"src":"14204:366:14"},{"body":{"nativeSrc":"14747:248:14","nodeType":"YulBlock","src":"14747:248:14","statements":[{"nativeSrc":"14757:26:14","nodeType":"YulAssignment","src":"14757:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"14769:9:14","nodeType":"YulIdentifier","src":"14769:9:14"},{"kind":"number","nativeSrc":"14780:2:14","nodeType":"YulLiteral","src":"14780:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"14765:3:14","nodeType":"YulIdentifier","src":"14765:3:14"},"nativeSrc":"14765:18:14","nodeType":"YulFunctionCall","src":"14765:18:14"},"variableNames":[{"name":"tail","nativeSrc":"14757:4:14","nodeType":"YulIdentifier","src":"14757:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14804:9:14","nodeType":"YulIdentifier","src":"14804:9:14"},{"kind":"number","nativeSrc":"14815:1:14","nodeType":"YulLiteral","src":"14815:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"14800:3:14","nodeType":"YulIdentifier","src":"14800:3:14"},"nativeSrc":"14800:17:14","nodeType":"YulFunctionCall","src":"14800:17:14"},{"arguments":[{"name":"tail","nativeSrc":"14823:4:14","nodeType":"YulIdentifier","src":"14823:4:14"},{"name":"headStart","nativeSrc":"14829:9:14","nodeType":"YulIdentifier","src":"14829:9:14"}],"functionName":{"name":"sub","nativeSrc":"14819:3:14","nodeType":"YulIdentifier","src":"14819:3:14"},"nativeSrc":"14819:20:14","nodeType":"YulFunctionCall","src":"14819:20:14"}],"functionName":{"name":"mstore","nativeSrc":"14793:6:14","nodeType":"YulIdentifier","src":"14793:6:14"},"nativeSrc":"14793:47:14","nodeType":"YulFunctionCall","src":"14793:47:14"},"nativeSrc":"14793:47:14","nodeType":"YulExpressionStatement","src":"14793:47:14"},{"nativeSrc":"14849:139:14","nodeType":"YulAssignment","src":"14849:139:14","value":{"arguments":[{"name":"tail","nativeSrc":"14983:4:14","nodeType":"YulIdentifier","src":"14983:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad_to_t_string_memory_ptr_fromStack","nativeSrc":"14857:124:14","nodeType":"YulIdentifier","src":"14857:124:14"},"nativeSrc":"14857:131:14","nodeType":"YulFunctionCall","src":"14857:131:14"},"variableNames":[{"name":"tail","nativeSrc":"14849:4:14","nodeType":"YulIdentifier","src":"14849:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"14576:419:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14727:9:14","nodeType":"YulTypedName","src":"14727:9:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"14742:4:14","nodeType":"YulTypedName","src":"14742:4:14","type":""}],"src":"14576:419:14"},{"body":{"nativeSrc":"15029:152:14","nodeType":"YulBlock","src":"15029:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15046:1:14","nodeType":"YulLiteral","src":"15046:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"15049:77:14","nodeType":"YulLiteral","src":"15049:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"15039:6:14","nodeType":"YulIdentifier","src":"15039:6:14"},"nativeSrc":"15039:88:14","nodeType":"YulFunctionCall","src":"15039:88:14"},"nativeSrc":"15039:88:14","nodeType":"YulExpressionStatement","src":"15039:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15143:1:14","nodeType":"YulLiteral","src":"15143:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"15146:4:14","nodeType":"YulLiteral","src":"15146:4:14","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"15136:6:14","nodeType":"YulIdentifier","src":"15136:6:14"},"nativeSrc":"15136:15:14","nodeType":"YulFunctionCall","src":"15136:15:14"},"nativeSrc":"15136:15:14","nodeType":"YulExpressionStatement","src":"15136:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"15167:1:14","nodeType":"YulLiteral","src":"15167:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"15170:4:14","nodeType":"YulLiteral","src":"15170:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"15160:6:14","nodeType":"YulIdentifier","src":"15160:6:14"},"nativeSrc":"15160:15:14","nodeType":"YulFunctionCall","src":"15160:15:14"},"nativeSrc":"15160:15:14","nodeType":"YulExpressionStatement","src":"15160:15:14"}]},"name":"panic_error_0x11","nativeSrc":"15001:180:14","nodeType":"YulFunctionDefinition","src":"15001:180:14"},{"body":{"nativeSrc":"15232:149:14","nodeType":"YulBlock","src":"15232:149:14","statements":[{"nativeSrc":"15242:25:14","nodeType":"YulAssignment","src":"15242:25:14","value":{"arguments":[{"name":"x","nativeSrc":"15265:1:14","nodeType":"YulIdentifier","src":"15265:1:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"15247:17:14","nodeType":"YulIdentifier","src":"15247:17:14"},"nativeSrc":"15247:20:14","nodeType":"YulFunctionCall","src":"15247:20:14"},"variableNames":[{"name":"x","nativeSrc":"15242:1:14","nodeType":"YulIdentifier","src":"15242:1:14"}]},{"nativeSrc":"15276:25:14","nodeType":"YulAssignment","src":"15276:25:14","value":{"arguments":[{"name":"y","nativeSrc":"15299:1:14","nodeType":"YulIdentifier","src":"15299:1:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"15281:17:14","nodeType":"YulIdentifier","src":"15281:17:14"},"nativeSrc":"15281:20:14","nodeType":"YulFunctionCall","src":"15281:20:14"},"variableNames":[{"name":"y","nativeSrc":"15276:1:14","nodeType":"YulIdentifier","src":"15276:1:14"}]},{"nativeSrc":"15310:17:14","nodeType":"YulAssignment","src":"15310:17:14","value":{"arguments":[{"name":"x","nativeSrc":"15322:1:14","nodeType":"YulIdentifier","src":"15322:1:14"},{"name":"y","nativeSrc":"15325:1:14","nodeType":"YulIdentifier","src":"15325:1:14"}],"functionName":{"name":"sub","nativeSrc":"15318:3:14","nodeType":"YulIdentifier","src":"15318:3:14"},"nativeSrc":"15318:9:14","nodeType":"YulFunctionCall","src":"15318:9:14"},"variableNames":[{"name":"diff","nativeSrc":"15310:4:14","nodeType":"YulIdentifier","src":"15310:4:14"}]},{"body":{"nativeSrc":"15352:22:14","nodeType":"YulBlock","src":"15352:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"15354:16:14","nodeType":"YulIdentifier","src":"15354:16:14"},"nativeSrc":"15354:18:14","nodeType":"YulFunctionCall","src":"15354:18:14"},"nativeSrc":"15354:18:14","nodeType":"YulExpressionStatement","src":"15354:18:14"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"15343:4:14","nodeType":"YulIdentifier","src":"15343:4:14"},{"name":"x","nativeSrc":"15349:1:14","nodeType":"YulIdentifier","src":"15349:1:14"}],"functionName":{"name":"gt","nativeSrc":"15340:2:14","nodeType":"YulIdentifier","src":"15340:2:14"},"nativeSrc":"15340:11:14","nodeType":"YulFunctionCall","src":"15340:11:14"},"nativeSrc":"15337:37:14","nodeType":"YulIf","src":"15337:37:14"}]},"name":"checked_sub_t_uint256","nativeSrc":"15187:194:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"15218:1:14","nodeType":"YulTypedName","src":"15218:1:14","type":""},{"name":"y","nativeSrc":"15221:1:14","nodeType":"YulTypedName","src":"15221:1:14","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"15227:4:14","nodeType":"YulTypedName","src":"15227:4:14","type":""}],"src":"15187:194:14"},{"body":{"nativeSrc":"15493:70:14","nodeType":"YulBlock","src":"15493:70:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"15515:6:14","nodeType":"YulIdentifier","src":"15515:6:14"},{"kind":"number","nativeSrc":"15523:1:14","nodeType":"YulLiteral","src":"15523:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"15511:3:14","nodeType":"YulIdentifier","src":"15511:3:14"},"nativeSrc":"15511:14:14","nodeType":"YulFunctionCall","src":"15511:14:14"},{"hexValue":"4164647265737320686173206e6f74207369676e65642075702e","kind":"string","nativeSrc":"15527:28:14","nodeType":"YulLiteral","src":"15527:28:14","type":"","value":"Address has not signed up."}],"functionName":{"name":"mstore","nativeSrc":"15504:6:14","nodeType":"YulIdentifier","src":"15504:6:14"},"nativeSrc":"15504:52:14","nodeType":"YulFunctionCall","src":"15504:52:14"},"nativeSrc":"15504:52:14","nodeType":"YulExpressionStatement","src":"15504:52:14"}]},"name":"store_literal_in_memory_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8","nativeSrc":"15387:176:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"15485:6:14","nodeType":"YulTypedName","src":"15485:6:14","type":""}],"src":"15387:176:14"},{"body":{"nativeSrc":"15715:220:14","nodeType":"YulBlock","src":"15715:220:14","statements":[{"nativeSrc":"15725:74:14","nodeType":"YulAssignment","src":"15725:74:14","value":{"arguments":[{"name":"pos","nativeSrc":"15791:3:14","nodeType":"YulIdentifier","src":"15791:3:14"},{"kind":"number","nativeSrc":"15796:2:14","nodeType":"YulLiteral","src":"15796:2:14","type":"","value":"26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"15732:58:14","nodeType":"YulIdentifier","src":"15732:58:14"},"nativeSrc":"15732:67:14","nodeType":"YulFunctionCall","src":"15732:67:14"},"variableNames":[{"name":"pos","nativeSrc":"15725:3:14","nodeType":"YulIdentifier","src":"15725:3:14"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"15897:3:14","nodeType":"YulIdentifier","src":"15897:3:14"}],"functionName":{"name":"store_literal_in_memory_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8","nativeSrc":"15808:88:14","nodeType":"YulIdentifier","src":"15808:88:14"},"nativeSrc":"15808:93:14","nodeType":"YulFunctionCall","src":"15808:93:14"},"nativeSrc":"15808:93:14","nodeType":"YulExpressionStatement","src":"15808:93:14"},{"nativeSrc":"15910:19:14","nodeType":"YulAssignment","src":"15910:19:14","value":{"arguments":[{"name":"pos","nativeSrc":"15921:3:14","nodeType":"YulIdentifier","src":"15921:3:14"},{"kind":"number","nativeSrc":"15926:2:14","nodeType":"YulLiteral","src":"15926:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15917:3:14","nodeType":"YulIdentifier","src":"15917:3:14"},"nativeSrc":"15917:12:14","nodeType":"YulFunctionCall","src":"15917:12:14"},"variableNames":[{"name":"end","nativeSrc":"15910:3:14","nodeType":"YulIdentifier","src":"15910:3:14"}]}]},"name":"abi_encode_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8_to_t_string_memory_ptr_fromStack","nativeSrc":"15569:366:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"15703:3:14","nodeType":"YulTypedName","src":"15703:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"15711:3:14","nodeType":"YulTypedName","src":"15711:3:14","type":""}],"src":"15569:366:14"},{"body":{"nativeSrc":"16112:248:14","nodeType":"YulBlock","src":"16112:248:14","statements":[{"nativeSrc":"16122:26:14","nodeType":"YulAssignment","src":"16122:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"16134:9:14","nodeType":"YulIdentifier","src":"16134:9:14"},{"kind":"number","nativeSrc":"16145:2:14","nodeType":"YulLiteral","src":"16145:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16130:3:14","nodeType":"YulIdentifier","src":"16130:3:14"},"nativeSrc":"16130:18:14","nodeType":"YulFunctionCall","src":"16130:18:14"},"variableNames":[{"name":"tail","nativeSrc":"16122:4:14","nodeType":"YulIdentifier","src":"16122:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16169:9:14","nodeType":"YulIdentifier","src":"16169:9:14"},{"kind":"number","nativeSrc":"16180:1:14","nodeType":"YulLiteral","src":"16180:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"16165:3:14","nodeType":"YulIdentifier","src":"16165:3:14"},"nativeSrc":"16165:17:14","nodeType":"YulFunctionCall","src":"16165:17:14"},{"arguments":[{"name":"tail","nativeSrc":"16188:4:14","nodeType":"YulIdentifier","src":"16188:4:14"},{"name":"headStart","nativeSrc":"16194:9:14","nodeType":"YulIdentifier","src":"16194:9:14"}],"functionName":{"name":"sub","nativeSrc":"16184:3:14","nodeType":"YulIdentifier","src":"16184:3:14"},"nativeSrc":"16184:20:14","nodeType":"YulFunctionCall","src":"16184:20:14"}],"functionName":{"name":"mstore","nativeSrc":"16158:6:14","nodeType":"YulIdentifier","src":"16158:6:14"},"nativeSrc":"16158:47:14","nodeType":"YulFunctionCall","src":"16158:47:14"},"nativeSrc":"16158:47:14","nodeType":"YulExpressionStatement","src":"16158:47:14"},{"nativeSrc":"16214:139:14","nodeType":"YulAssignment","src":"16214:139:14","value":{"arguments":[{"name":"tail","nativeSrc":"16348:4:14","nodeType":"YulIdentifier","src":"16348:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8_to_t_string_memory_ptr_fromStack","nativeSrc":"16222:124:14","nodeType":"YulIdentifier","src":"16222:124:14"},"nativeSrc":"16222:131:14","nodeType":"YulFunctionCall","src":"16222:131:14"},"variableNames":[{"name":"tail","nativeSrc":"16214:4:14","nodeType":"YulIdentifier","src":"16214:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"15941:419:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16092:9:14","nodeType":"YulTypedName","src":"16092:9:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16107:4:14","nodeType":"YulTypedName","src":"16107:4:14","type":""}],"src":"15941:419:14"},{"body":{"nativeSrc":"16472:71:14","nodeType":"YulBlock","src":"16472:71:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"16494:6:14","nodeType":"YulIdentifier","src":"16494:6:14"},{"kind":"number","nativeSrc":"16502:1:14","nodeType":"YulLiteral","src":"16502:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"16490:3:14","nodeType":"YulIdentifier","src":"16490:3:14"},"nativeSrc":"16490:14:14","nodeType":"YulFunctionCall","src":"16490:14:14"},{"hexValue":"4164647265737320616c7265616479206f776e73206120504f4150","kind":"string","nativeSrc":"16506:29:14","nodeType":"YulLiteral","src":"16506:29:14","type":"","value":"Address already owns a POAP"}],"functionName":{"name":"mstore","nativeSrc":"16483:6:14","nodeType":"YulIdentifier","src":"16483:6:14"},"nativeSrc":"16483:53:14","nodeType":"YulFunctionCall","src":"16483:53:14"},"nativeSrc":"16483:53:14","nodeType":"YulExpressionStatement","src":"16483:53:14"}]},"name":"store_literal_in_memory_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb","nativeSrc":"16366:177:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"16464:6:14","nodeType":"YulTypedName","src":"16464:6:14","type":""}],"src":"16366:177:14"},{"body":{"nativeSrc":"16695:220:14","nodeType":"YulBlock","src":"16695:220:14","statements":[{"nativeSrc":"16705:74:14","nodeType":"YulAssignment","src":"16705:74:14","value":{"arguments":[{"name":"pos","nativeSrc":"16771:3:14","nodeType":"YulIdentifier","src":"16771:3:14"},{"kind":"number","nativeSrc":"16776:2:14","nodeType":"YulLiteral","src":"16776:2:14","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"16712:58:14","nodeType":"YulIdentifier","src":"16712:58:14"},"nativeSrc":"16712:67:14","nodeType":"YulFunctionCall","src":"16712:67:14"},"variableNames":[{"name":"pos","nativeSrc":"16705:3:14","nodeType":"YulIdentifier","src":"16705:3:14"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"16877:3:14","nodeType":"YulIdentifier","src":"16877:3:14"}],"functionName":{"name":"store_literal_in_memory_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb","nativeSrc":"16788:88:14","nodeType":"YulIdentifier","src":"16788:88:14"},"nativeSrc":"16788:93:14","nodeType":"YulFunctionCall","src":"16788:93:14"},"nativeSrc":"16788:93:14","nodeType":"YulExpressionStatement","src":"16788:93:14"},{"nativeSrc":"16890:19:14","nodeType":"YulAssignment","src":"16890:19:14","value":{"arguments":[{"name":"pos","nativeSrc":"16901:3:14","nodeType":"YulIdentifier","src":"16901:3:14"},{"kind":"number","nativeSrc":"16906:2:14","nodeType":"YulLiteral","src":"16906:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16897:3:14","nodeType":"YulIdentifier","src":"16897:3:14"},"nativeSrc":"16897:12:14","nodeType":"YulFunctionCall","src":"16897:12:14"},"variableNames":[{"name":"end","nativeSrc":"16890:3:14","nodeType":"YulIdentifier","src":"16890:3:14"}]}]},"name":"abi_encode_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb_to_t_string_memory_ptr_fromStack","nativeSrc":"16549:366:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"16683:3:14","nodeType":"YulTypedName","src":"16683:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"16691:3:14","nodeType":"YulTypedName","src":"16691:3:14","type":""}],"src":"16549:366:14"},{"body":{"nativeSrc":"17092:248:14","nodeType":"YulBlock","src":"17092:248:14","statements":[{"nativeSrc":"17102:26:14","nodeType":"YulAssignment","src":"17102:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"17114:9:14","nodeType":"YulIdentifier","src":"17114:9:14"},{"kind":"number","nativeSrc":"17125:2:14","nodeType":"YulLiteral","src":"17125:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17110:3:14","nodeType":"YulIdentifier","src":"17110:3:14"},"nativeSrc":"17110:18:14","nodeType":"YulFunctionCall","src":"17110:18:14"},"variableNames":[{"name":"tail","nativeSrc":"17102:4:14","nodeType":"YulIdentifier","src":"17102:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17149:9:14","nodeType":"YulIdentifier","src":"17149:9:14"},{"kind":"number","nativeSrc":"17160:1:14","nodeType":"YulLiteral","src":"17160:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17145:3:14","nodeType":"YulIdentifier","src":"17145:3:14"},"nativeSrc":"17145:17:14","nodeType":"YulFunctionCall","src":"17145:17:14"},{"arguments":[{"name":"tail","nativeSrc":"17168:4:14","nodeType":"YulIdentifier","src":"17168:4:14"},{"name":"headStart","nativeSrc":"17174:9:14","nodeType":"YulIdentifier","src":"17174:9:14"}],"functionName":{"name":"sub","nativeSrc":"17164:3:14","nodeType":"YulIdentifier","src":"17164:3:14"},"nativeSrc":"17164:20:14","nodeType":"YulFunctionCall","src":"17164:20:14"}],"functionName":{"name":"mstore","nativeSrc":"17138:6:14","nodeType":"YulIdentifier","src":"17138:6:14"},"nativeSrc":"17138:47:14","nodeType":"YulFunctionCall","src":"17138:47:14"},"nativeSrc":"17138:47:14","nodeType":"YulExpressionStatement","src":"17138:47:14"},{"nativeSrc":"17194:139:14","nodeType":"YulAssignment","src":"17194:139:14","value":{"arguments":[{"name":"tail","nativeSrc":"17328:4:14","nodeType":"YulIdentifier","src":"17328:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb_to_t_string_memory_ptr_fromStack","nativeSrc":"17202:124:14","nodeType":"YulIdentifier","src":"17202:124:14"},"nativeSrc":"17202:131:14","nodeType":"YulFunctionCall","src":"17202:131:14"},"variableNames":[{"name":"tail","nativeSrc":"17194:4:14","nodeType":"YulIdentifier","src":"17194:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"16921:419:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17072:9:14","nodeType":"YulTypedName","src":"17072:9:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17087:4:14","nodeType":"YulTypedName","src":"17087:4:14","type":""}],"src":"16921:419:14"},{"body":{"nativeSrc":"17389:190:14","nodeType":"YulBlock","src":"17389:190:14","statements":[{"nativeSrc":"17399:33:14","nodeType":"YulAssignment","src":"17399:33:14","value":{"arguments":[{"name":"value","nativeSrc":"17426:5:14","nodeType":"YulIdentifier","src":"17426:5:14"}],"functionName":{"name":"cleanup_t_uint256","nativeSrc":"17408:17:14","nodeType":"YulIdentifier","src":"17408:17:14"},"nativeSrc":"17408:24:14","nodeType":"YulFunctionCall","src":"17408:24:14"},"variableNames":[{"name":"value","nativeSrc":"17399:5:14","nodeType":"YulIdentifier","src":"17399:5:14"}]},{"body":{"nativeSrc":"17522:22:14","nodeType":"YulBlock","src":"17522:22:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"17524:16:14","nodeType":"YulIdentifier","src":"17524:16:14"},"nativeSrc":"17524:18:14","nodeType":"YulFunctionCall","src":"17524:18:14"},"nativeSrc":"17524:18:14","nodeType":"YulExpressionStatement","src":"17524:18:14"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"17447:5:14","nodeType":"YulIdentifier","src":"17447:5:14"},{"kind":"number","nativeSrc":"17454:66:14","nodeType":"YulLiteral","src":"17454:66:14","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"17444:2:14","nodeType":"YulIdentifier","src":"17444:2:14"},"nativeSrc":"17444:77:14","nodeType":"YulFunctionCall","src":"17444:77:14"},"nativeSrc":"17441:103:14","nodeType":"YulIf","src":"17441:103:14"},{"nativeSrc":"17553:20:14","nodeType":"YulAssignment","src":"17553:20:14","value":{"arguments":[{"name":"value","nativeSrc":"17564:5:14","nodeType":"YulIdentifier","src":"17564:5:14"},{"kind":"number","nativeSrc":"17571:1:14","nodeType":"YulLiteral","src":"17571:1:14","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"17560:3:14","nodeType":"YulIdentifier","src":"17560:3:14"},"nativeSrc":"17560:13:14","nodeType":"YulFunctionCall","src":"17560:13:14"},"variableNames":[{"name":"ret","nativeSrc":"17553:3:14","nodeType":"YulIdentifier","src":"17553:3:14"}]}]},"name":"increment_t_uint256","nativeSrc":"17346:233:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"17375:5:14","nodeType":"YulTypedName","src":"17375:5:14","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"17385:3:14","nodeType":"YulTypedName","src":"17385:3:14","type":""}],"src":"17346:233:14"},{"body":{"nativeSrc":"17691:76:14","nodeType":"YulBlock","src":"17691:76:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"17713:6:14","nodeType":"YulIdentifier","src":"17713:6:14"},{"kind":"number","nativeSrc":"17721:1:14","nodeType":"YulLiteral","src":"17721:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"17709:3:14","nodeType":"YulIdentifier","src":"17709:3:14"},"nativeSrc":"17709:14:14","nodeType":"YulFunctionCall","src":"17709:14:14"},{"hexValue":"5369676e2d757073206172652063757272656e746c792064697361626c65642e","kind":"string","nativeSrc":"17725:34:14","nodeType":"YulLiteral","src":"17725:34:14","type":"","value":"Sign-ups are currently disabled."}],"functionName":{"name":"mstore","nativeSrc":"17702:6:14","nodeType":"YulIdentifier","src":"17702:6:14"},"nativeSrc":"17702:58:14","nodeType":"YulFunctionCall","src":"17702:58:14"},"nativeSrc":"17702:58:14","nodeType":"YulExpressionStatement","src":"17702:58:14"}]},"name":"store_literal_in_memory_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f","nativeSrc":"17585:182:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"17683:6:14","nodeType":"YulTypedName","src":"17683:6:14","type":""}],"src":"17585:182:14"},{"body":{"nativeSrc":"17919:220:14","nodeType":"YulBlock","src":"17919:220:14","statements":[{"nativeSrc":"17929:74:14","nodeType":"YulAssignment","src":"17929:74:14","value":{"arguments":[{"name":"pos","nativeSrc":"17995:3:14","nodeType":"YulIdentifier","src":"17995:3:14"},{"kind":"number","nativeSrc":"18000:2:14","nodeType":"YulLiteral","src":"18000:2:14","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"17936:58:14","nodeType":"YulIdentifier","src":"17936:58:14"},"nativeSrc":"17936:67:14","nodeType":"YulFunctionCall","src":"17936:67:14"},"variableNames":[{"name":"pos","nativeSrc":"17929:3:14","nodeType":"YulIdentifier","src":"17929:3:14"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"18101:3:14","nodeType":"YulIdentifier","src":"18101:3:14"}],"functionName":{"name":"store_literal_in_memory_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f","nativeSrc":"18012:88:14","nodeType":"YulIdentifier","src":"18012:88:14"},"nativeSrc":"18012:93:14","nodeType":"YulFunctionCall","src":"18012:93:14"},"nativeSrc":"18012:93:14","nodeType":"YulExpressionStatement","src":"18012:93:14"},{"nativeSrc":"18114:19:14","nodeType":"YulAssignment","src":"18114:19:14","value":{"arguments":[{"name":"pos","nativeSrc":"18125:3:14","nodeType":"YulIdentifier","src":"18125:3:14"},{"kind":"number","nativeSrc":"18130:2:14","nodeType":"YulLiteral","src":"18130:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18121:3:14","nodeType":"YulIdentifier","src":"18121:3:14"},"nativeSrc":"18121:12:14","nodeType":"YulFunctionCall","src":"18121:12:14"},"variableNames":[{"name":"end","nativeSrc":"18114:3:14","nodeType":"YulIdentifier","src":"18114:3:14"}]}]},"name":"abi_encode_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f_to_t_string_memory_ptr_fromStack","nativeSrc":"17773:366:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"17907:3:14","nodeType":"YulTypedName","src":"17907:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"17915:3:14","nodeType":"YulTypedName","src":"17915:3:14","type":""}],"src":"17773:366:14"},{"body":{"nativeSrc":"18316:248:14","nodeType":"YulBlock","src":"18316:248:14","statements":[{"nativeSrc":"18326:26:14","nodeType":"YulAssignment","src":"18326:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"18338:9:14","nodeType":"YulIdentifier","src":"18338:9:14"},{"kind":"number","nativeSrc":"18349:2:14","nodeType":"YulLiteral","src":"18349:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18334:3:14","nodeType":"YulIdentifier","src":"18334:3:14"},"nativeSrc":"18334:18:14","nodeType":"YulFunctionCall","src":"18334:18:14"},"variableNames":[{"name":"tail","nativeSrc":"18326:4:14","nodeType":"YulIdentifier","src":"18326:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18373:9:14","nodeType":"YulIdentifier","src":"18373:9:14"},{"kind":"number","nativeSrc":"18384:1:14","nodeType":"YulLiteral","src":"18384:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18369:3:14","nodeType":"YulIdentifier","src":"18369:3:14"},"nativeSrc":"18369:17:14","nodeType":"YulFunctionCall","src":"18369:17:14"},{"arguments":[{"name":"tail","nativeSrc":"18392:4:14","nodeType":"YulIdentifier","src":"18392:4:14"},{"name":"headStart","nativeSrc":"18398:9:14","nodeType":"YulIdentifier","src":"18398:9:14"}],"functionName":{"name":"sub","nativeSrc":"18388:3:14","nodeType":"YulIdentifier","src":"18388:3:14"},"nativeSrc":"18388:20:14","nodeType":"YulFunctionCall","src":"18388:20:14"}],"functionName":{"name":"mstore","nativeSrc":"18362:6:14","nodeType":"YulIdentifier","src":"18362:6:14"},"nativeSrc":"18362:47:14","nodeType":"YulFunctionCall","src":"18362:47:14"},"nativeSrc":"18362:47:14","nodeType":"YulExpressionStatement","src":"18362:47:14"},{"nativeSrc":"18418:139:14","nodeType":"YulAssignment","src":"18418:139:14","value":{"arguments":[{"name":"tail","nativeSrc":"18552:4:14","nodeType":"YulIdentifier","src":"18552:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f_to_t_string_memory_ptr_fromStack","nativeSrc":"18426:124:14","nodeType":"YulIdentifier","src":"18426:124:14"},"nativeSrc":"18426:131:14","nodeType":"YulFunctionCall","src":"18426:131:14"},"variableNames":[{"name":"tail","nativeSrc":"18418:4:14","nodeType":"YulIdentifier","src":"18418:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18145:419:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18296:9:14","nodeType":"YulTypedName","src":"18296:9:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18311:4:14","nodeType":"YulTypedName","src":"18311:4:14","type":""}],"src":"18145:419:14"},{"body":{"nativeSrc":"18676:71:14","nodeType":"YulBlock","src":"18676:71:14","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"18698:6:14","nodeType":"YulIdentifier","src":"18698:6:14"},{"kind":"number","nativeSrc":"18706:1:14","nodeType":"YulLiteral","src":"18706:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"18694:3:14","nodeType":"YulIdentifier","src":"18694:3:14"},"nativeSrc":"18694:14:14","nodeType":"YulFunctionCall","src":"18694:14:14"},{"hexValue":"596f75206861766520616c7265616479207369676e65642075702e","kind":"string","nativeSrc":"18710:29:14","nodeType":"YulLiteral","src":"18710:29:14","type":"","value":"You have already signed up."}],"functionName":{"name":"mstore","nativeSrc":"18687:6:14","nodeType":"YulIdentifier","src":"18687:6:14"},"nativeSrc":"18687:53:14","nodeType":"YulFunctionCall","src":"18687:53:14"},"nativeSrc":"18687:53:14","nodeType":"YulExpressionStatement","src":"18687:53:14"}]},"name":"store_literal_in_memory_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931","nativeSrc":"18570:177:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nativeSrc":"18668:6:14","nodeType":"YulTypedName","src":"18668:6:14","type":""}],"src":"18570:177:14"},{"body":{"nativeSrc":"18899:220:14","nodeType":"YulBlock","src":"18899:220:14","statements":[{"nativeSrc":"18909:74:14","nodeType":"YulAssignment","src":"18909:74:14","value":{"arguments":[{"name":"pos","nativeSrc":"18975:3:14","nodeType":"YulIdentifier","src":"18975:3:14"},{"kind":"number","nativeSrc":"18980:2:14","nodeType":"YulLiteral","src":"18980:2:14","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nativeSrc":"18916:58:14","nodeType":"YulIdentifier","src":"18916:58:14"},"nativeSrc":"18916:67:14","nodeType":"YulFunctionCall","src":"18916:67:14"},"variableNames":[{"name":"pos","nativeSrc":"18909:3:14","nodeType":"YulIdentifier","src":"18909:3:14"}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"19081:3:14","nodeType":"YulIdentifier","src":"19081:3:14"}],"functionName":{"name":"store_literal_in_memory_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931","nativeSrc":"18992:88:14","nodeType":"YulIdentifier","src":"18992:88:14"},"nativeSrc":"18992:93:14","nodeType":"YulFunctionCall","src":"18992:93:14"},"nativeSrc":"18992:93:14","nodeType":"YulExpressionStatement","src":"18992:93:14"},{"nativeSrc":"19094:19:14","nodeType":"YulAssignment","src":"19094:19:14","value":{"arguments":[{"name":"pos","nativeSrc":"19105:3:14","nodeType":"YulIdentifier","src":"19105:3:14"},{"kind":"number","nativeSrc":"19110:2:14","nodeType":"YulLiteral","src":"19110:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19101:3:14","nodeType":"YulIdentifier","src":"19101:3:14"},"nativeSrc":"19101:12:14","nodeType":"YulFunctionCall","src":"19101:12:14"},"variableNames":[{"name":"end","nativeSrc":"19094:3:14","nodeType":"YulIdentifier","src":"19094:3:14"}]}]},"name":"abi_encode_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931_to_t_string_memory_ptr_fromStack","nativeSrc":"18753:366:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"18887:3:14","nodeType":"YulTypedName","src":"18887:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"18895:3:14","nodeType":"YulTypedName","src":"18895:3:14","type":""}],"src":"18753:366:14"},{"body":{"nativeSrc":"19296:248:14","nodeType":"YulBlock","src":"19296:248:14","statements":[{"nativeSrc":"19306:26:14","nodeType":"YulAssignment","src":"19306:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"19318:9:14","nodeType":"YulIdentifier","src":"19318:9:14"},{"kind":"number","nativeSrc":"19329:2:14","nodeType":"YulLiteral","src":"19329:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19314:3:14","nodeType":"YulIdentifier","src":"19314:3:14"},"nativeSrc":"19314:18:14","nodeType":"YulFunctionCall","src":"19314:18:14"},"variableNames":[{"name":"tail","nativeSrc":"19306:4:14","nodeType":"YulIdentifier","src":"19306:4:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19353:9:14","nodeType":"YulIdentifier","src":"19353:9:14"},{"kind":"number","nativeSrc":"19364:1:14","nodeType":"YulLiteral","src":"19364:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"19349:3:14","nodeType":"YulIdentifier","src":"19349:3:14"},"nativeSrc":"19349:17:14","nodeType":"YulFunctionCall","src":"19349:17:14"},{"arguments":[{"name":"tail","nativeSrc":"19372:4:14","nodeType":"YulIdentifier","src":"19372:4:14"},{"name":"headStart","nativeSrc":"19378:9:14","nodeType":"YulIdentifier","src":"19378:9:14"}],"functionName":{"name":"sub","nativeSrc":"19368:3:14","nodeType":"YulIdentifier","src":"19368:3:14"},"nativeSrc":"19368:20:14","nodeType":"YulFunctionCall","src":"19368:20:14"}],"functionName":{"name":"mstore","nativeSrc":"19342:6:14","nodeType":"YulIdentifier","src":"19342:6:14"},"nativeSrc":"19342:47:14","nodeType":"YulFunctionCall","src":"19342:47:14"},"nativeSrc":"19342:47:14","nodeType":"YulExpressionStatement","src":"19342:47:14"},{"nativeSrc":"19398:139:14","nodeType":"YulAssignment","src":"19398:139:14","value":{"arguments":[{"name":"tail","nativeSrc":"19532:4:14","nodeType":"YulIdentifier","src":"19532:4:14"}],"functionName":{"name":"abi_encode_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931_to_t_string_memory_ptr_fromStack","nativeSrc":"19406:124:14","nodeType":"YulIdentifier","src":"19406:124:14"},"nativeSrc":"19406:131:14","nodeType":"YulFunctionCall","src":"19406:131:14"},"variableNames":[{"name":"tail","nativeSrc":"19398:4:14","nodeType":"YulIdentifier","src":"19398:4:14"}]}]},"name":"abi_encode_tuple_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19125:419:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19276:9:14","nodeType":"YulTypedName","src":"19276:9:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19291:4:14","nodeType":"YulTypedName","src":"19291:4:14","type":""}],"src":"19125:419:14"},{"body":{"nativeSrc":"19664:34:14","nodeType":"YulBlock","src":"19664:34:14","statements":[{"nativeSrc":"19674:18:14","nodeType":"YulAssignment","src":"19674:18:14","value":{"name":"pos","nativeSrc":"19689:3:14","nodeType":"YulIdentifier","src":"19689:3:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"19674:11:14","nodeType":"YulIdentifier","src":"19674:11:14"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"19550:148:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19636:3:14","nodeType":"YulTypedName","src":"19636:3:14","type":""},{"name":"length","nativeSrc":"19641:6:14","nodeType":"YulTypedName","src":"19641:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"19652:11:14","nodeType":"YulTypedName","src":"19652:11:14","type":""}],"src":"19550:148:14"},{"body":{"nativeSrc":"19814:280:14","nodeType":"YulBlock","src":"19814:280:14","statements":[{"nativeSrc":"19824:53:14","nodeType":"YulVariableDeclaration","src":"19824:53:14","value":{"arguments":[{"name":"value","nativeSrc":"19871:5:14","nodeType":"YulIdentifier","src":"19871:5:14"}],"functionName":{"name":"array_length_t_string_memory_ptr","nativeSrc":"19838:32:14","nodeType":"YulIdentifier","src":"19838:32:14"},"nativeSrc":"19838:39:14","nodeType":"YulFunctionCall","src":"19838:39:14"},"variables":[{"name":"length","nativeSrc":"19828:6:14","nodeType":"YulTypedName","src":"19828:6:14","type":""}]},{"nativeSrc":"19886:96:14","nodeType":"YulAssignment","src":"19886:96:14","value":{"arguments":[{"name":"pos","nativeSrc":"19970:3:14","nodeType":"YulIdentifier","src":"19970:3:14"},{"name":"length","nativeSrc":"19975:6:14","nodeType":"YulIdentifier","src":"19975:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"19893:76:14","nodeType":"YulIdentifier","src":"19893:76:14"},"nativeSrc":"19893:89:14","nodeType":"YulFunctionCall","src":"19893:89:14"},"variableNames":[{"name":"pos","nativeSrc":"19886:3:14","nodeType":"YulIdentifier","src":"19886:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"20030:5:14","nodeType":"YulIdentifier","src":"20030:5:14"},{"kind":"number","nativeSrc":"20037:4:14","nodeType":"YulLiteral","src":"20037:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"20026:3:14","nodeType":"YulIdentifier","src":"20026:3:14"},"nativeSrc":"20026:16:14","nodeType":"YulFunctionCall","src":"20026:16:14"},{"name":"pos","nativeSrc":"20044:3:14","nodeType":"YulIdentifier","src":"20044:3:14"},{"name":"length","nativeSrc":"20049:6:14","nodeType":"YulIdentifier","src":"20049:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19991:34:14","nodeType":"YulIdentifier","src":"19991:34:14"},"nativeSrc":"19991:65:14","nodeType":"YulFunctionCall","src":"19991:65:14"},"nativeSrc":"19991:65:14","nodeType":"YulExpressionStatement","src":"19991:65:14"},{"nativeSrc":"20065:23:14","nodeType":"YulAssignment","src":"20065:23:14","value":{"arguments":[{"name":"pos","nativeSrc":"20076:3:14","nodeType":"YulIdentifier","src":"20076:3:14"},{"name":"length","nativeSrc":"20081:6:14","nodeType":"YulIdentifier","src":"20081:6:14"}],"functionName":{"name":"add","nativeSrc":"20072:3:14","nodeType":"YulIdentifier","src":"20072:3:14"},"nativeSrc":"20072:16:14","nodeType":"YulFunctionCall","src":"20072:16:14"},"variableNames":[{"name":"end","nativeSrc":"20065:3:14","nodeType":"YulIdentifier","src":"20065:3:14"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"19704:390:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"19795:5:14","nodeType":"YulTypedName","src":"19795:5:14","type":""},{"name":"pos","nativeSrc":"19802:3:14","nodeType":"YulTypedName","src":"19802:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19810:3:14","nodeType":"YulTypedName","src":"19810:3:14","type":""}],"src":"19704:390:14"},{"body":{"nativeSrc":"20284:251:14","nodeType":"YulBlock","src":"20284:251:14","statements":[{"nativeSrc":"20295:102:14","nodeType":"YulAssignment","src":"20295:102:14","value":{"arguments":[{"name":"value0","nativeSrc":"20384:6:14","nodeType":"YulIdentifier","src":"20384:6:14"},{"name":"pos","nativeSrc":"20393:3:14","nodeType":"YulIdentifier","src":"20393:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"20302:81:14","nodeType":"YulIdentifier","src":"20302:81:14"},"nativeSrc":"20302:95:14","nodeType":"YulFunctionCall","src":"20302:95:14"},"variableNames":[{"name":"pos","nativeSrc":"20295:3:14","nodeType":"YulIdentifier","src":"20295:3:14"}]},{"nativeSrc":"20407:102:14","nodeType":"YulAssignment","src":"20407:102:14","value":{"arguments":[{"name":"value1","nativeSrc":"20496:6:14","nodeType":"YulIdentifier","src":"20496:6:14"},{"name":"pos","nativeSrc":"20505:3:14","nodeType":"YulIdentifier","src":"20505:3:14"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nativeSrc":"20414:81:14","nodeType":"YulIdentifier","src":"20414:81:14"},"nativeSrc":"20414:95:14","nodeType":"YulFunctionCall","src":"20414:95:14"},"variableNames":[{"name":"pos","nativeSrc":"20407:3:14","nodeType":"YulIdentifier","src":"20407:3:14"}]},{"nativeSrc":"20519:10:14","nodeType":"YulAssignment","src":"20519:10:14","value":{"name":"pos","nativeSrc":"20526:3:14","nodeType":"YulIdentifier","src":"20526:3:14"},"variableNames":[{"name":"end","nativeSrc":"20519:3:14","nodeType":"YulIdentifier","src":"20519:3:14"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"20100:435:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20255:3:14","nodeType":"YulTypedName","src":"20255:3:14","type":""},{"name":"value1","nativeSrc":"20261:6:14","nodeType":"YulTypedName","src":"20261:6:14","type":""},{"name":"value0","nativeSrc":"20269:6:14","nodeType":"YulTypedName","src":"20269:6:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20280:3:14","nodeType":"YulTypedName","src":"20280:3:14","type":""}],"src":"20100:435:14"},{"body":{"nativeSrc":"20569:152:14","nodeType":"YulBlock","src":"20569:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"20586:1:14","nodeType":"YulLiteral","src":"20586:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"20589:77:14","nodeType":"YulLiteral","src":"20589:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"20579:6:14","nodeType":"YulIdentifier","src":"20579:6:14"},"nativeSrc":"20579:88:14","nodeType":"YulFunctionCall","src":"20579:88:14"},"nativeSrc":"20579:88:14","nodeType":"YulExpressionStatement","src":"20579:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20683:1:14","nodeType":"YulLiteral","src":"20683:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"20686:4:14","nodeType":"YulLiteral","src":"20686:4:14","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"20676:6:14","nodeType":"YulIdentifier","src":"20676:6:14"},"nativeSrc":"20676:15:14","nodeType":"YulFunctionCall","src":"20676:15:14"},"nativeSrc":"20676:15:14","nodeType":"YulExpressionStatement","src":"20676:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20707:1:14","nodeType":"YulLiteral","src":"20707:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"20710:4:14","nodeType":"YulLiteral","src":"20710:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"20700:6:14","nodeType":"YulIdentifier","src":"20700:6:14"},"nativeSrc":"20700:15:14","nodeType":"YulFunctionCall","src":"20700:15:14"},"nativeSrc":"20700:15:14","nodeType":"YulExpressionStatement","src":"20700:15:14"}]},"name":"panic_error_0x32","nativeSrc":"20541:180:14","nodeType":"YulFunctionDefinition","src":"20541:180:14"},{"body":{"nativeSrc":"20755:152:14","nodeType":"YulBlock","src":"20755:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"20772:1:14","nodeType":"YulLiteral","src":"20772:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"20775:77:14","nodeType":"YulLiteral","src":"20775:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"20765:6:14","nodeType":"YulIdentifier","src":"20765:6:14"},"nativeSrc":"20765:88:14","nodeType":"YulFunctionCall","src":"20765:88:14"},"nativeSrc":"20765:88:14","nodeType":"YulExpressionStatement","src":"20765:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20869:1:14","nodeType":"YulLiteral","src":"20869:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"20872:4:14","nodeType":"YulLiteral","src":"20872:4:14","type":"","value":"0x31"}],"functionName":{"name":"mstore","nativeSrc":"20862:6:14","nodeType":"YulIdentifier","src":"20862:6:14"},"nativeSrc":"20862:15:14","nodeType":"YulFunctionCall","src":"20862:15:14"},"nativeSrc":"20862:15:14","nodeType":"YulExpressionStatement","src":"20862:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"20893:1:14","nodeType":"YulLiteral","src":"20893:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"20896:4:14","nodeType":"YulLiteral","src":"20896:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"20886:6:14","nodeType":"YulIdentifier","src":"20886:6:14"},"nativeSrc":"20886:15:14","nodeType":"YulFunctionCall","src":"20886:15:14"},"nativeSrc":"20886:15:14","nodeType":"YulExpressionStatement","src":"20886:15:14"}]},"name":"panic_error_0x31","nativeSrc":"20727:180:14","nodeType":"YulFunctionDefinition","src":"20727:180:14"},{"body":{"nativeSrc":"21067:288:14","nodeType":"YulBlock","src":"21067:288:14","statements":[{"nativeSrc":"21077:26:14","nodeType":"YulAssignment","src":"21077:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"21089:9:14","nodeType":"YulIdentifier","src":"21089:9:14"},{"kind":"number","nativeSrc":"21100:2:14","nodeType":"YulLiteral","src":"21100:2:14","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21085:3:14","nodeType":"YulIdentifier","src":"21085:3:14"},"nativeSrc":"21085:18:14","nodeType":"YulFunctionCall","src":"21085:18:14"},"variableNames":[{"name":"tail","nativeSrc":"21077:4:14","nodeType":"YulIdentifier","src":"21077:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"21157:6:14","nodeType":"YulIdentifier","src":"21157:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"21170:9:14","nodeType":"YulIdentifier","src":"21170:9:14"},{"kind":"number","nativeSrc":"21181:1:14","nodeType":"YulLiteral","src":"21181:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"21166:3:14","nodeType":"YulIdentifier","src":"21166:3:14"},"nativeSrc":"21166:17:14","nodeType":"YulFunctionCall","src":"21166:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"21113:43:14","nodeType":"YulIdentifier","src":"21113:43:14"},"nativeSrc":"21113:71:14","nodeType":"YulFunctionCall","src":"21113:71:14"},"nativeSrc":"21113:71:14","nodeType":"YulExpressionStatement","src":"21113:71:14"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"21238:6:14","nodeType":"YulIdentifier","src":"21238:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"21251:9:14","nodeType":"YulIdentifier","src":"21251:9:14"},{"kind":"number","nativeSrc":"21262:2:14","nodeType":"YulLiteral","src":"21262:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21247:3:14","nodeType":"YulIdentifier","src":"21247:3:14"},"nativeSrc":"21247:18:14","nodeType":"YulFunctionCall","src":"21247:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"21194:43:14","nodeType":"YulIdentifier","src":"21194:43:14"},"nativeSrc":"21194:72:14","nodeType":"YulFunctionCall","src":"21194:72:14"},"nativeSrc":"21194:72:14","nodeType":"YulExpressionStatement","src":"21194:72:14"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"21320:6:14","nodeType":"YulIdentifier","src":"21320:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"21333:9:14","nodeType":"YulIdentifier","src":"21333:9:14"},{"kind":"number","nativeSrc":"21344:2:14","nodeType":"YulLiteral","src":"21344:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21329:3:14","nodeType":"YulIdentifier","src":"21329:3:14"},"nativeSrc":"21329:18:14","nodeType":"YulFunctionCall","src":"21329:18:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"21276:43:14","nodeType":"YulIdentifier","src":"21276:43:14"},"nativeSrc":"21276:72:14","nodeType":"YulFunctionCall","src":"21276:72:14"},"nativeSrc":"21276:72:14","nodeType":"YulExpressionStatement","src":"21276:72:14"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nativeSrc":"20913:442:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21023:9:14","nodeType":"YulTypedName","src":"21023:9:14","type":""},{"name":"value2","nativeSrc":"21035:6:14","nodeType":"YulTypedName","src":"21035:6:14","type":""},{"name":"value1","nativeSrc":"21043:6:14","nodeType":"YulTypedName","src":"21043:6:14","type":""},{"name":"value0","nativeSrc":"21051:6:14","nodeType":"YulTypedName","src":"21051:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21062:4:14","nodeType":"YulTypedName","src":"21062:4:14","type":""}],"src":"20913:442:14"},{"body":{"nativeSrc":"21419:40:14","nodeType":"YulBlock","src":"21419:40:14","statements":[{"nativeSrc":"21430:22:14","nodeType":"YulAssignment","src":"21430:22:14","value":{"arguments":[{"name":"value","nativeSrc":"21446:5:14","nodeType":"YulIdentifier","src":"21446:5:14"}],"functionName":{"name":"mload","nativeSrc":"21440:5:14","nodeType":"YulIdentifier","src":"21440:5:14"},"nativeSrc":"21440:12:14","nodeType":"YulFunctionCall","src":"21440:12:14"},"variableNames":[{"name":"length","nativeSrc":"21430:6:14","nodeType":"YulIdentifier","src":"21430:6:14"}]}]},"name":"array_length_t_bytes_memory_ptr","nativeSrc":"21361:98:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"21402:5:14","nodeType":"YulTypedName","src":"21402:5:14","type":""}],"returnVariables":[{"name":"length","nativeSrc":"21412:6:14","nodeType":"YulTypedName","src":"21412:6:14","type":""}],"src":"21361:98:14"},{"body":{"nativeSrc":"21560:73:14","nodeType":"YulBlock","src":"21560:73:14","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"21577:3:14","nodeType":"YulIdentifier","src":"21577:3:14"},{"name":"length","nativeSrc":"21582:6:14","nodeType":"YulIdentifier","src":"21582:6:14"}],"functionName":{"name":"mstore","nativeSrc":"21570:6:14","nodeType":"YulIdentifier","src":"21570:6:14"},"nativeSrc":"21570:19:14","nodeType":"YulFunctionCall","src":"21570:19:14"},"nativeSrc":"21570:19:14","nodeType":"YulExpressionStatement","src":"21570:19:14"},{"nativeSrc":"21598:29:14","nodeType":"YulAssignment","src":"21598:29:14","value":{"arguments":[{"name":"pos","nativeSrc":"21617:3:14","nodeType":"YulIdentifier","src":"21617:3:14"},{"kind":"number","nativeSrc":"21622:4:14","nodeType":"YulLiteral","src":"21622:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21613:3:14","nodeType":"YulIdentifier","src":"21613:3:14"},"nativeSrc":"21613:14:14","nodeType":"YulFunctionCall","src":"21613:14:14"},"variableNames":[{"name":"updated_pos","nativeSrc":"21598:11:14","nodeType":"YulIdentifier","src":"21598:11:14"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"21465:168:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21532:3:14","nodeType":"YulTypedName","src":"21532:3:14","type":""},{"name":"length","nativeSrc":"21537:6:14","nodeType":"YulTypedName","src":"21537:6:14","type":""}],"returnVariables":[{"name":"updated_pos","nativeSrc":"21548:11:14","nodeType":"YulTypedName","src":"21548:11:14","type":""}],"src":"21465:168:14"},{"body":{"nativeSrc":"21729:283:14","nodeType":"YulBlock","src":"21729:283:14","statements":[{"nativeSrc":"21739:52:14","nodeType":"YulVariableDeclaration","src":"21739:52:14","value":{"arguments":[{"name":"value","nativeSrc":"21785:5:14","nodeType":"YulIdentifier","src":"21785:5:14"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nativeSrc":"21753:31:14","nodeType":"YulIdentifier","src":"21753:31:14"},"nativeSrc":"21753:38:14","nodeType":"YulFunctionCall","src":"21753:38:14"},"variables":[{"name":"length","nativeSrc":"21743:6:14","nodeType":"YulTypedName","src":"21743:6:14","type":""}]},{"nativeSrc":"21800:77:14","nodeType":"YulAssignment","src":"21800:77:14","value":{"arguments":[{"name":"pos","nativeSrc":"21865:3:14","nodeType":"YulIdentifier","src":"21865:3:14"},{"name":"length","nativeSrc":"21870:6:14","nodeType":"YulIdentifier","src":"21870:6:14"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nativeSrc":"21807:57:14","nodeType":"YulIdentifier","src":"21807:57:14"},"nativeSrc":"21807:70:14","nodeType":"YulFunctionCall","src":"21807:70:14"},"variableNames":[{"name":"pos","nativeSrc":"21800:3:14","nodeType":"YulIdentifier","src":"21800:3:14"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"21925:5:14","nodeType":"YulIdentifier","src":"21925:5:14"},{"kind":"number","nativeSrc":"21932:4:14","nodeType":"YulLiteral","src":"21932:4:14","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21921:3:14","nodeType":"YulIdentifier","src":"21921:3:14"},"nativeSrc":"21921:16:14","nodeType":"YulFunctionCall","src":"21921:16:14"},{"name":"pos","nativeSrc":"21939:3:14","nodeType":"YulIdentifier","src":"21939:3:14"},{"name":"length","nativeSrc":"21944:6:14","nodeType":"YulIdentifier","src":"21944:6:14"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"21886:34:14","nodeType":"YulIdentifier","src":"21886:34:14"},"nativeSrc":"21886:65:14","nodeType":"YulFunctionCall","src":"21886:65:14"},"nativeSrc":"21886:65:14","nodeType":"YulExpressionStatement","src":"21886:65:14"},{"nativeSrc":"21960:46:14","nodeType":"YulAssignment","src":"21960:46:14","value":{"arguments":[{"name":"pos","nativeSrc":"21971:3:14","nodeType":"YulIdentifier","src":"21971:3:14"},{"arguments":[{"name":"length","nativeSrc":"21998:6:14","nodeType":"YulIdentifier","src":"21998:6:14"}],"functionName":{"name":"round_up_to_mul_of_32","nativeSrc":"21976:21:14","nodeType":"YulIdentifier","src":"21976:21:14"},"nativeSrc":"21976:29:14","nodeType":"YulFunctionCall","src":"21976:29:14"}],"functionName":{"name":"add","nativeSrc":"21967:3:14","nodeType":"YulIdentifier","src":"21967:3:14"},"nativeSrc":"21967:39:14","nodeType":"YulFunctionCall","src":"21967:39:14"},"variableNames":[{"name":"end","nativeSrc":"21960:3:14","nodeType":"YulIdentifier","src":"21960:3:14"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"21639:373:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"21710:5:14","nodeType":"YulTypedName","src":"21710:5:14","type":""},{"name":"pos","nativeSrc":"21717:3:14","nodeType":"YulTypedName","src":"21717:3:14","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21725:3:14","nodeType":"YulTypedName","src":"21725:3:14","type":""}],"src":"21639:373:14"},{"body":{"nativeSrc":"22218:440:14","nodeType":"YulBlock","src":"22218:440:14","statements":[{"nativeSrc":"22228:27:14","nodeType":"YulAssignment","src":"22228:27:14","value":{"arguments":[{"name":"headStart","nativeSrc":"22240:9:14","nodeType":"YulIdentifier","src":"22240:9:14"},{"kind":"number","nativeSrc":"22251:3:14","nodeType":"YulLiteral","src":"22251:3:14","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"22236:3:14","nodeType":"YulIdentifier","src":"22236:3:14"},"nativeSrc":"22236:19:14","nodeType":"YulFunctionCall","src":"22236:19:14"},"variableNames":[{"name":"tail","nativeSrc":"22228:4:14","nodeType":"YulIdentifier","src":"22228:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"22309:6:14","nodeType":"YulIdentifier","src":"22309:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"22322:9:14","nodeType":"YulIdentifier","src":"22322:9:14"},{"kind":"number","nativeSrc":"22333:1:14","nodeType":"YulLiteral","src":"22333:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"22318:3:14","nodeType":"YulIdentifier","src":"22318:3:14"},"nativeSrc":"22318:17:14","nodeType":"YulFunctionCall","src":"22318:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"22265:43:14","nodeType":"YulIdentifier","src":"22265:43:14"},"nativeSrc":"22265:71:14","nodeType":"YulFunctionCall","src":"22265:71:14"},"nativeSrc":"22265:71:14","nodeType":"YulExpressionStatement","src":"22265:71:14"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"22390:6:14","nodeType":"YulIdentifier","src":"22390:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"22403:9:14","nodeType":"YulIdentifier","src":"22403:9:14"},{"kind":"number","nativeSrc":"22414:2:14","nodeType":"YulLiteral","src":"22414:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22399:3:14","nodeType":"YulIdentifier","src":"22399:3:14"},"nativeSrc":"22399:18:14","nodeType":"YulFunctionCall","src":"22399:18:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"22346:43:14","nodeType":"YulIdentifier","src":"22346:43:14"},"nativeSrc":"22346:72:14","nodeType":"YulFunctionCall","src":"22346:72:14"},"nativeSrc":"22346:72:14","nodeType":"YulExpressionStatement","src":"22346:72:14"},{"expression":{"arguments":[{"name":"value2","nativeSrc":"22472:6:14","nodeType":"YulIdentifier","src":"22472:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"22485:9:14","nodeType":"YulIdentifier","src":"22485:9:14"},{"kind":"number","nativeSrc":"22496:2:14","nodeType":"YulLiteral","src":"22496:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22481:3:14","nodeType":"YulIdentifier","src":"22481:3:14"},"nativeSrc":"22481:18:14","nodeType":"YulFunctionCall","src":"22481:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"22428:43:14","nodeType":"YulIdentifier","src":"22428:43:14"},"nativeSrc":"22428:72:14","nodeType":"YulFunctionCall","src":"22428:72:14"},"nativeSrc":"22428:72:14","nodeType":"YulExpressionStatement","src":"22428:72:14"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22521:9:14","nodeType":"YulIdentifier","src":"22521:9:14"},{"kind":"number","nativeSrc":"22532:2:14","nodeType":"YulLiteral","src":"22532:2:14","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"22517:3:14","nodeType":"YulIdentifier","src":"22517:3:14"},"nativeSrc":"22517:18:14","nodeType":"YulFunctionCall","src":"22517:18:14"},{"arguments":[{"name":"tail","nativeSrc":"22541:4:14","nodeType":"YulIdentifier","src":"22541:4:14"},{"name":"headStart","nativeSrc":"22547:9:14","nodeType":"YulIdentifier","src":"22547:9:14"}],"functionName":{"name":"sub","nativeSrc":"22537:3:14","nodeType":"YulIdentifier","src":"22537:3:14"},"nativeSrc":"22537:20:14","nodeType":"YulFunctionCall","src":"22537:20:14"}],"functionName":{"name":"mstore","nativeSrc":"22510:6:14","nodeType":"YulIdentifier","src":"22510:6:14"},"nativeSrc":"22510:48:14","nodeType":"YulFunctionCall","src":"22510:48:14"},"nativeSrc":"22510:48:14","nodeType":"YulExpressionStatement","src":"22510:48:14"},{"nativeSrc":"22567:84:14","nodeType":"YulAssignment","src":"22567:84:14","value":{"arguments":[{"name":"value3","nativeSrc":"22637:6:14","nodeType":"YulIdentifier","src":"22637:6:14"},{"name":"tail","nativeSrc":"22646:4:14","nodeType":"YulIdentifier","src":"22646:4:14"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nativeSrc":"22575:61:14","nodeType":"YulIdentifier","src":"22575:61:14"},"nativeSrc":"22575:76:14","nodeType":"YulFunctionCall","src":"22575:76:14"},"variableNames":[{"name":"tail","nativeSrc":"22567:4:14","nodeType":"YulIdentifier","src":"22567:4:14"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"22018:640:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22166:9:14","nodeType":"YulTypedName","src":"22166:9:14","type":""},{"name":"value3","nativeSrc":"22178:6:14","nodeType":"YulTypedName","src":"22178:6:14","type":""},{"name":"value2","nativeSrc":"22186:6:14","nodeType":"YulTypedName","src":"22186:6:14","type":""},{"name":"value1","nativeSrc":"22194:6:14","nodeType":"YulTypedName","src":"22194:6:14","type":""},{"name":"value0","nativeSrc":"22202:6:14","nodeType":"YulTypedName","src":"22202:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22213:4:14","nodeType":"YulTypedName","src":"22213:4:14","type":""}],"src":"22018:640:14"},{"body":{"nativeSrc":"22726:79:14","nodeType":"YulBlock","src":"22726:79:14","statements":[{"nativeSrc":"22736:22:14","nodeType":"YulAssignment","src":"22736:22:14","value":{"arguments":[{"name":"offset","nativeSrc":"22751:6:14","nodeType":"YulIdentifier","src":"22751:6:14"}],"functionName":{"name":"mload","nativeSrc":"22745:5:14","nodeType":"YulIdentifier","src":"22745:5:14"},"nativeSrc":"22745:13:14","nodeType":"YulFunctionCall","src":"22745:13:14"},"variableNames":[{"name":"value","nativeSrc":"22736:5:14","nodeType":"YulIdentifier","src":"22736:5:14"}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"22793:5:14","nodeType":"YulIdentifier","src":"22793:5:14"}],"functionName":{"name":"validator_revert_t_bytes4","nativeSrc":"22767:25:14","nodeType":"YulIdentifier","src":"22767:25:14"},"nativeSrc":"22767:32:14","nodeType":"YulFunctionCall","src":"22767:32:14"},"nativeSrc":"22767:32:14","nodeType":"YulExpressionStatement","src":"22767:32:14"}]},"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"22664:141:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"22704:6:14","nodeType":"YulTypedName","src":"22704:6:14","type":""},{"name":"end","nativeSrc":"22712:3:14","nodeType":"YulTypedName","src":"22712:3:14","type":""}],"returnVariables":[{"name":"value","nativeSrc":"22720:5:14","nodeType":"YulTypedName","src":"22720:5:14","type":""}],"src":"22664:141:14"},{"body":{"nativeSrc":"22887:273:14","nodeType":"YulBlock","src":"22887:273:14","statements":[{"body":{"nativeSrc":"22933:83:14","nodeType":"YulBlock","src":"22933:83:14","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nativeSrc":"22935:77:14","nodeType":"YulIdentifier","src":"22935:77:14"},"nativeSrc":"22935:79:14","nodeType":"YulFunctionCall","src":"22935:79:14"},"nativeSrc":"22935:79:14","nodeType":"YulExpressionStatement","src":"22935:79:14"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"22908:7:14","nodeType":"YulIdentifier","src":"22908:7:14"},{"name":"headStart","nativeSrc":"22917:9:14","nodeType":"YulIdentifier","src":"22917:9:14"}],"functionName":{"name":"sub","nativeSrc":"22904:3:14","nodeType":"YulIdentifier","src":"22904:3:14"},"nativeSrc":"22904:23:14","nodeType":"YulFunctionCall","src":"22904:23:14"},{"kind":"number","nativeSrc":"22929:2:14","nodeType":"YulLiteral","src":"22929:2:14","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"22900:3:14","nodeType":"YulIdentifier","src":"22900:3:14"},"nativeSrc":"22900:32:14","nodeType":"YulFunctionCall","src":"22900:32:14"},"nativeSrc":"22897:119:14","nodeType":"YulIf","src":"22897:119:14"},{"nativeSrc":"23026:127:14","nodeType":"YulBlock","src":"23026:127:14","statements":[{"nativeSrc":"23041:15:14","nodeType":"YulVariableDeclaration","src":"23041:15:14","value":{"kind":"number","nativeSrc":"23055:1:14","nodeType":"YulLiteral","src":"23055:1:14","type":"","value":"0"},"variables":[{"name":"offset","nativeSrc":"23045:6:14","nodeType":"YulTypedName","src":"23045:6:14","type":""}]},{"nativeSrc":"23070:73:14","nodeType":"YulAssignment","src":"23070:73:14","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"23115:9:14","nodeType":"YulIdentifier","src":"23115:9:14"},{"name":"offset","nativeSrc":"23126:6:14","nodeType":"YulIdentifier","src":"23126:6:14"}],"functionName":{"name":"add","nativeSrc":"23111:3:14","nodeType":"YulIdentifier","src":"23111:3:14"},"nativeSrc":"23111:22:14","nodeType":"YulFunctionCall","src":"23111:22:14"},{"name":"dataEnd","nativeSrc":"23135:7:14","nodeType":"YulIdentifier","src":"23135:7:14"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nativeSrc":"23080:30:14","nodeType":"YulIdentifier","src":"23080:30:14"},"nativeSrc":"23080:63:14","nodeType":"YulFunctionCall","src":"23080:63:14"},"variableNames":[{"name":"value0","nativeSrc":"23070:6:14","nodeType":"YulIdentifier","src":"23070:6:14"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"22811:349:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22857:9:14","nodeType":"YulTypedName","src":"22857:9:14","type":""},{"name":"dataEnd","nativeSrc":"22868:7:14","nodeType":"YulTypedName","src":"22868:7:14","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"22880:6:14","nodeType":"YulTypedName","src":"22880:6:14","type":""}],"src":"22811:349:14"},{"body":{"nativeSrc":"23194:152:14","nodeType":"YulBlock","src":"23194:152:14","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"23211:1:14","nodeType":"YulLiteral","src":"23211:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"23214:77:14","nodeType":"YulLiteral","src":"23214:77:14","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"23204:6:14","nodeType":"YulIdentifier","src":"23204:6:14"},"nativeSrc":"23204:88:14","nodeType":"YulFunctionCall","src":"23204:88:14"},"nativeSrc":"23204:88:14","nodeType":"YulExpressionStatement","src":"23204:88:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"23308:1:14","nodeType":"YulLiteral","src":"23308:1:14","type":"","value":"4"},{"kind":"number","nativeSrc":"23311:4:14","nodeType":"YulLiteral","src":"23311:4:14","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"23301:6:14","nodeType":"YulIdentifier","src":"23301:6:14"},"nativeSrc":"23301:15:14","nodeType":"YulFunctionCall","src":"23301:15:14"},"nativeSrc":"23301:15:14","nodeType":"YulExpressionStatement","src":"23301:15:14"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"23332:1:14","nodeType":"YulLiteral","src":"23332:1:14","type":"","value":"0"},{"kind":"number","nativeSrc":"23335:4:14","nodeType":"YulLiteral","src":"23335:4:14","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"23325:6:14","nodeType":"YulIdentifier","src":"23325:6:14"},"nativeSrc":"23325:15:14","nodeType":"YulFunctionCall","src":"23325:15:14"},"nativeSrc":"23325:15:14","nodeType":"YulExpressionStatement","src":"23325:15:14"}]},"name":"panic_error_0x12","nativeSrc":"23166:180:14","nodeType":"YulFunctionDefinition","src":"23166:180:14"},{"body":{"nativeSrc":"23478:206:14","nodeType":"YulBlock","src":"23478:206:14","statements":[{"nativeSrc":"23488:26:14","nodeType":"YulAssignment","src":"23488:26:14","value":{"arguments":[{"name":"headStart","nativeSrc":"23500:9:14","nodeType":"YulIdentifier","src":"23500:9:14"},{"kind":"number","nativeSrc":"23511:2:14","nodeType":"YulLiteral","src":"23511:2:14","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"23496:3:14","nodeType":"YulIdentifier","src":"23496:3:14"},"nativeSrc":"23496:18:14","nodeType":"YulFunctionCall","src":"23496:18:14"},"variableNames":[{"name":"tail","nativeSrc":"23488:4:14","nodeType":"YulIdentifier","src":"23488:4:14"}]},{"expression":{"arguments":[{"name":"value0","nativeSrc":"23568:6:14","nodeType":"YulIdentifier","src":"23568:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"23581:9:14","nodeType":"YulIdentifier","src":"23581:9:14"},{"kind":"number","nativeSrc":"23592:1:14","nodeType":"YulLiteral","src":"23592:1:14","type":"","value":"0"}],"functionName":{"name":"add","nativeSrc":"23577:3:14","nodeType":"YulIdentifier","src":"23577:3:14"},"nativeSrc":"23577:17:14","nodeType":"YulFunctionCall","src":"23577:17:14"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nativeSrc":"23524:43:14","nodeType":"YulIdentifier","src":"23524:43:14"},"nativeSrc":"23524:71:14","nodeType":"YulFunctionCall","src":"23524:71:14"},"nativeSrc":"23524:71:14","nodeType":"YulExpressionStatement","src":"23524:71:14"},{"expression":{"arguments":[{"name":"value1","nativeSrc":"23649:6:14","nodeType":"YulIdentifier","src":"23649:6:14"},{"arguments":[{"name":"headStart","nativeSrc":"23662:9:14","nodeType":"YulIdentifier","src":"23662:9:14"},{"kind":"number","nativeSrc":"23673:2:14","nodeType":"YulLiteral","src":"23673:2:14","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"23658:3:14","nodeType":"YulIdentifier","src":"23658:3:14"},"nativeSrc":"23658:18:14","nodeType":"YulFunctionCall","src":"23658:18:14"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nativeSrc":"23605:43:14","nodeType":"YulIdentifier","src":"23605:43:14"},"nativeSrc":"23605:72:14","nodeType":"YulFunctionCall","src":"23605:72:14"},"nativeSrc":"23605:72:14","nodeType":"YulExpressionStatement","src":"23605:72:14"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"23352:332:14","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"23442:9:14","nodeType":"YulTypedName","src":"23442:9:14","type":""},{"name":"value1","nativeSrc":"23454:6:14","nodeType":"YulTypedName","src":"23454:6:14","type":""},{"name":"value0","nativeSrc":"23462:6:14","nodeType":"YulTypedName","src":"23462:6:14","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"23473:4:14","nodeType":"YulTypedName","src":"23473:4:14","type":""}],"src":"23352:332:14"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to a zero addres\")\n\n        mstore(add(memPtr, 32), \"s\")\n\n    }\n\n    function abi_encode_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7be7642fc79af49831aac03f389abb99a1b8363d074e4fdd9ef3c3c632730c79_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Recipient already owns a POAP\")\n\n    }\n\n    function abi_encode_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_160495bc86b8f0a7c3c385fc119024cfe7f7aa7a39ad2c11e3cecfd48c5848ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address has not signed up.\")\n\n    }\n\n    function abi_encode_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6a715d9aedb7cd5538cacb053b27bc94d9276e3cfc1077acf29d68d01daf1fa8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address already owns a POAP\")\n\n    }\n\n    function abi_encode_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0d1f80bb98773d8fb1cf458c412caf7eb1a17e978602140f7f45a201f3a9a0eb_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f(memPtr) {\n\n        mstore(add(memPtr, 0), \"Sign-ups are currently disabled.\")\n\n    }\n\n    function abi_encode_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6b4514380697b55fdc54f8d749fa036bc8efd7e89c454731c0dead67f9bdb89f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931(memPtr) {\n\n        mstore(add(memPtr, 0), \"You have already signed up.\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d83467c8b89124e9ec4097069cc333558c696add62dc6204a01628eca8d5931_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n","id":14,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de5780639b4f7b2011610097578063bf96ae6311610071578063bf96ae6314610414578063c87b56dd1461041e578063e985e9c51461044e578063f2fde38b1461047e57610173565b80639b4f7b20146103d2578063a22cb465146103dc578063b88d4fde146103f857610173565b806370a0823114610320578063715018a6146103505780637824407f1461035a5780638af05318146103785780638da5cb5b1461039657806395d89b41146103b457610173565b806330bee0f11161013057806330bee0f11461025e57806340d097c31461027c57806342842e0e1461029857806354a18d57146102b45780635fe8e7cc146102d25780636352211e146102f057610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f657806323b872dd146102125780632a11ced01461022e575b600080fd5b610192600480360381019061018d91906122ac565b61049a565b60405161019f91906122f4565b60405180910390f35b6101b061057c565b6040516101bd919061239f565b60405180910390f35b6101e060048036038101906101db91906123f7565b61060e565b6040516101ed9190612465565b60405180910390f35b610210600480360381019061020b91906124ac565b61062a565b005b61022c600480360381019061022791906124ec565b610640565b005b610248600480360381019061024391906123f7565b6107ed565b6040516102559190612465565b60405180910390f35b61026661082c565b60405161027391906122f4565b60405180910390f35b6102966004803603810190610291919061253f565b61083f565b005b6102b260048036038101906102ad91906124ec565b610a17565b005b6102bc610a37565b6040516102c9919061239f565b60405180910390f35b6102da610ac5565b6040516102e7919061262a565b60405180910390f35b61030a600480360381019061030591906123f7565b610b53565b6040516103179190612465565b60405180910390f35b61033a6004803603810190610335919061253f565b610b65565b604051610347919061265b565b60405180910390f35b610358610c1f565b005b610362610c33565b60405161036f919061265b565b60405180910390f35b610380610c39565b60405161038d919061265b565b60405180910390f35b61039e610c3f565b6040516103ab9190612465565b60405180910390f35b6103bc610c69565b6040516103c9919061239f565b60405180910390f35b6103da610cfb565b005b6103f660048036038101906103f191906126a2565b610d2f565b005b610412600480360381019061040d9190612817565b610d45565b005b61041c610d62565b005b610438600480360381019061043391906123f7565b610eb0565b604051610445919061239f565b60405180910390f35b6104686004803603810190610463919061289a565b610f19565b60405161047591906122f4565b60405180910390f35b6104986004803603810190610493919061253f565b610fad565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610575575061057482611033565b5b9050919050565b60606000805461058b90612909565b80601f01602080910402602001604051908101604052809291908181526020018280546105b790612909565b80156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b5050505050905090565b60006106198261109d565b5061062382611125565b9050919050565b61063c8282610637611162565b61116a565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906129ac565b60405180910390fd5b60006106ba83610b65565b146106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190612a18565b60405180910390fd5b600161070584610b65565b03610714576107138361117c565b5b600061071f83610b65565b036107dd57600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506107999190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6107e8838383611344565b505050565b600b81815481106107fd57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900460ff1681565b610847611446565b600d60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ca90612ae7565b60405180910390fd5b60006108de82610b65565b1461091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590612b53565b60405180910390fd5b60006007600081548092919061093390612b73565b91905055905061094382826114cd565b6009600081548092919061095690612b73565b9190505550600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b805490506109d09190612a67565b600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610a3283838360405180602001604052806000815250610d45565b505050565b60088054610a4490612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7090612909565b8015610abd5780601f10610a9257610100808354040283529160200191610abd565b820191906000526020600020905b815481529060010190602001808311610aa057829003601f168201915b505050505081565b6060600b805480602002602001604051908101604052809291908181526020018280548015610b4957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610aff575b5050505050905090565b6000610b5e8261109d565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bd85760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610bcf9190612465565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610c27611446565b610c3160006114eb565b565b60095481565b600a5481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610c7890612909565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490612909565b8015610cf15780601f10610cc657610100808354040283529160200191610cf1565b820191906000526020600020905b815481529060010190602001808311610cd457829003601f168201915b5050505050905090565b610d03611446565b600c60009054906101000a900460ff1615600c60006101000a81548160ff021916908315150217905550565b610d41610d3a611162565b83836115b1565b5050565b610d50848484610640565b610d5c84848484611720565b50505050565b600c60009054906101000a900460ff16610db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da890612c07565b60405180910390fd5b600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3590612c73565b60405180910390fd5b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600a6000815480929190610ea990612b73565b9190505550565b6060610ebb8261109d565b506000610ec66118d7565b90506000815111610ee65760405180602001604052806000815250610f11565b80610ef084611969565b604051602001610f01929190612ccf565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610fb5611446565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110275760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161101e9190612465565b60405180910390fd5b611030816114eb565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000806110a983611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111c57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611113919061265b565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6111778383836001611a74565b505050565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b6001600b805490506111d69190612a67565b815481106111e7576111e6612cf3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600b838154811061122957611228612cf3565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b8054806112c7576112c6612d22565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113b65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113ad9190612465565b60405180910390fd5b60006113ca83836113c5611162565b611c39565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611440578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161143793929190612d51565b60405180910390fd5b50505050565b61144e611162565b73ffffffffffffffffffffffffffffffffffffffff1661146c610c3f565b73ffffffffffffffffffffffffffffffffffffffff16146114cb5761148f611162565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114c29190612465565b60405180910390fd5b565b6114e7828260405180602001604052806000815250611e53565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361162257816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016116199190612465565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171391906122f4565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156118d1578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611764611162565b8685856040518563ffffffff1660e01b81526004016117869493929190612ddd565b6020604051808303816000875af19250505080156117c257506040513d601f19601f820116820180604052508101906117bf9190612e3e565b60015b611846573d80600081146117f2576040519150601f19603f3d011682016040523d82523d6000602084013e6117f7565b606091505b50600081510361183e57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118359190612465565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146118cf57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118c69190612465565b60405180910390fd5b505b50505050565b6060600880546118e690612909565b80601f016020809104026020016040519081016040528092919081815260200182805461191290612909565b801561195f5780601f106119345761010080835404028352916020019161195f565b820191906000526020600020905b81548152906001019060200180831161194257829003601f168201915b5050505050905090565b60606000600161197884611e6f565b01905060008167ffffffffffffffff811115611997576119966126ec565b5b6040519080825280601f01601f1916602001820160405280156119c95781602001600182028036833780820191505090505b509050600082602001820190505b600115611a2c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a2057611a1f612e6b565b5b049450600085036119d7575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611aad5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611be1576000611abd8461109d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b2857508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611b3b5750611b398184610f19565b155b15611b7d57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611b749190612465565b60405180910390fd5b8115611bdf57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600080611c4584611a37565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611c8757611c86818486611fc2565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d1857611cc9600085600080611a74565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611d9b576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b611e5d8383612086565b611e6a6000848484611720565b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ecd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ec357611ec2612e6b565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f0a576d04ee2d6d415b85acef81000000008381611f0057611eff612e6b565b5b0492506020810190505b662386f26fc100008310611f3957662386f26fc100008381611f2f57611f2e612e6b565b5b0492506010810190505b6305f5e1008310611f62576305f5e1008381611f5857611f57612e6b565b5b0492506008810190505b6127108310611f87576127108381611f7d57611f7c612e6b565b5b0492506004810190505b60648310611faa5760648381611fa057611f9f612e6b565b5b0492506002810190505b600a8310611fb9576001810190505b80915050919050565b611fcd83838361217f565b61208157600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361204257806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612039919061265b565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612078929190612e9a565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120f85760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016120ef9190612465565b60405180910390fd5b600061210683836000611c39565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461217a5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016121719190612465565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561223757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806121f857506121f78484610f19565b5b8061223657508273ffffffffffffffffffffffffffffffffffffffff1661221e83611125565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61228981612254565b811461229457600080fd5b50565b6000813590506122a681612280565b92915050565b6000602082840312156122c2576122c161224a565b5b60006122d084828501612297565b91505092915050565b60008115159050919050565b6122ee816122d9565b82525050565b600060208201905061230960008301846122e5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561234957808201518184015260208101905061232e565b60008484015250505050565b6000601f19601f8301169050919050565b60006123718261230f565b61237b818561231a565b935061238b81856020860161232b565b61239481612355565b840191505092915050565b600060208201905081810360008301526123b98184612366565b905092915050565b6000819050919050565b6123d4816123c1565b81146123df57600080fd5b50565b6000813590506123f1816123cb565b92915050565b60006020828403121561240d5761240c61224a565b5b600061241b848285016123e2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244f82612424565b9050919050565b61245f81612444565b82525050565b600060208201905061247a6000830184612456565b92915050565b61248981612444565b811461249457600080fd5b50565b6000813590506124a681612480565b92915050565b600080604083850312156124c3576124c261224a565b5b60006124d185828601612497565b92505060206124e2858286016123e2565b9150509250929050565b6000806000606084860312156125055761250461224a565b5b600061251386828701612497565b935050602061252486828701612497565b9250506040612535868287016123e2565b9150509250925092565b6000602082840312156125555761255461224a565b5b600061256384828501612497565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125a181612444565b82525050565b60006125b38383612598565b60208301905092915050565b6000602082019050919050565b60006125d78261256c565b6125e18185612577565b93506125ec83612588565b8060005b8381101561261d57815161260488826125a7565b975061260f836125bf565b9250506001810190506125f0565b5085935050505092915050565b6000602082019050818103600083015261264481846125cc565b905092915050565b612655816123c1565b82525050565b6000602082019050612670600083018461264c565b92915050565b61267f816122d9565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b600080604083850312156126b9576126b861224a565b5b60006126c785828601612497565b92505060206126d88582860161268d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61272482612355565b810181811067ffffffffffffffff82111715612743576127426126ec565b5b80604052505050565b6000612756612240565b9050612762828261271b565b919050565b600067ffffffffffffffff821115612782576127816126ec565b5b61278b82612355565b9050602081019050919050565b82818337600083830152505050565b60006127ba6127b584612767565b61274c565b9050828152602081018484840111156127d6576127d56126e7565b5b6127e1848285612798565b509392505050565b600082601f8301126127fe576127fd6126e2565b5b813561280e8482602086016127a7565b91505092915050565b600080600080608085870312156128315761283061224a565b5b600061283f87828801612497565b945050602061285087828801612497565b9350506040612861878288016123e2565b925050606085013567ffffffffffffffff8111156128825761288161224f565b5b61288e878288016127e9565b91505092959194509250565b600080604083850312156128b1576128b061224a565b5b60006128bf85828601612497565b92505060206128d085828601612497565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061292157607f821691505b602082108103612934576129336128da565b5b50919050565b7f43616e6e6f74207472616e7366657220746f2061207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061299660218361231a565b91506129a18261293a565b604082019050919050565b600060208201905081810360008301526129c581612989565b9050919050565b7f526563697069656e7420616c7265616479206f776e73206120504f4150000000600082015250565b6000612a02601d8361231a565b9150612a0d826129cc565b602082019050919050565b60006020820190508181036000830152612a31816129f5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a72826123c1565b9150612a7d836123c1565b9250828203905081811115612a9557612a94612a38565b5b92915050565b7f4164647265737320686173206e6f74207369676e65642075702e000000000000600082015250565b6000612ad1601a8361231a565b9150612adc82612a9b565b602082019050919050565b60006020820190508181036000830152612b0081612ac4565b9050919050565b7f4164647265737320616c7265616479206f776e73206120504f41500000000000600082015250565b6000612b3d601b8361231a565b9150612b4882612b07565b602082019050919050565b60006020820190508181036000830152612b6c81612b30565b9050919050565b6000612b7e826123c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bb057612baf612a38565b5b600182019050919050565b7f5369676e2d757073206172652063757272656e746c792064697361626c65642e600082015250565b6000612bf160208361231a565b9150612bfc82612bbb565b602082019050919050565b60006020820190508181036000830152612c2081612be4565b9050919050565b7f596f75206861766520616c7265616479207369676e65642075702e0000000000600082015250565b6000612c5d601b8361231a565b9150612c6882612c27565b602082019050919050565b60006020820190508181036000830152612c8c81612c50565b9050919050565b600081905092915050565b6000612ca98261230f565b612cb38185612c93565b9350612cc381856020860161232b565b80840191505092915050565b6000612cdb8285612c9e565b9150612ce78284612c9e565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000606082019050612d666000830186612456565b612d73602083018561264c565b612d806040830184612456565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000612daf82612d88565b612db98185612d93565b9350612dc981856020860161232b565b612dd281612355565b840191505092915050565b6000608082019050612df26000830187612456565b612dff6020830186612456565b612e0c604083018561264c565b8181036060830152612e1e8184612da4565b905095945050505050565b600081519050612e3881612280565b92915050565b600060208284031215612e5457612e5361224a565b5b6000612e6284828501612e29565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000604082019050612eaf6000830185612456565b612ebc602083018461264c565b939250505056fea26469706673582212206dd576b79bb2ce0b45bc0be17068c095cc92612d30c302fb67e1b387076e2d8e64736f6c63430008180033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9B4F7B20 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xBF96AE63 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBF96AE63 EQ PUSH2 0x414 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x47E JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x9B4F7B20 EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3DC JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3F8 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x7824407F EQ PUSH2 0x35A JUMPI DUP1 PUSH4 0x8AF05318 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3B4 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x30BEE0F1 GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x30BEE0F1 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x54A18D57 EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0x5FE8E7CC EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2F0 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x2A11CED0 EQ PUSH2 0x22E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x22AC JUMP JUMPDEST PUSH2 0x49A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x57C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DB SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20B SWAP2 SWAP1 PUSH2 0x24AC JUMP JUMPDEST PUSH2 0x62A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x227 SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0x640 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x248 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x243 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0x83F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x24EC JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2BC PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DA PUSH2 0xAC5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x262A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xB53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x335 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xB65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x358 PUSH2 0xC1F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x362 PUSH2 0xC33 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36F SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x380 PUSH2 0xC39 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x39E PUSH2 0xC3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3BC PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DA PUSH2 0xCFB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F1 SWAP2 SWAP1 PUSH2 0x26A2 JUMP JUMPDEST PUSH2 0xD2F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x412 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x40D SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST PUSH2 0xD45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x41C PUSH2 0xD62 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x438 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0xEB0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x445 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x468 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x463 SWAP2 SWAP1 PUSH2 0x289A JUMP JUMPDEST PUSH2 0xF19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x475 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x498 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x493 SWAP2 SWAP1 PUSH2 0x253F JUMP JUMPDEST PUSH2 0xFAD JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x565 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x575 JUMPI POP PUSH2 0x574 DUP3 PUSH2 0x1033 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x58B SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5B7 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x604 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x604 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH2 0x623 DUP3 PUSH2 0x1125 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x63C DUP3 DUP3 PUSH2 0x637 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A6 SWAP1 PUSH2 0x29AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x6BA DUP4 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x6FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6F1 SWAP1 PUSH2 0x2A18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH2 0x705 DUP5 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x714 JUMPI PUSH2 0x713 DUP4 PUSH2 0x117C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x71F DUP4 PUSH2 0xB65 JUMP JUMPDEST SUB PUSH2 0x7DD JUMPI PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x799 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0x1344 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xB DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x7FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x847 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xD PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8CA SWAP1 PUSH2 0x2AE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x8DE DUP3 PUSH2 0xB65 JUMP JUMPDEST EQ PUSH2 0x91E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x915 SWAP1 PUSH2 0x2B53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x933 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x943 DUP3 DUP3 PUSH2 0x14CD JUMP JUMPDEST PUSH1 0x9 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x956 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0xB DUP3 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x9D0 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xA32 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD45 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0xA44 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA70 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xABD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xABD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAA0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB49 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xAFF JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB5E DUP3 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBD8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC27 PUSH2 0x1446 JUMP JUMPDEST PUSH2 0xC31 PUSH1 0x0 PUSH2 0x14EB JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xC78 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCA4 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCF1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCC6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCF1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCD4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD03 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH1 0xC PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD41 PUSH2 0xD3A PUSH2 0x1162 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x15B1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xD50 DUP5 DUP5 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0xD5C DUP5 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xC PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA8 SWAP1 PUSH2 0x2C07 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE35 SWAP1 PUSH2 0x2C73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xEA9 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEBB DUP3 PUSH2 0x109D JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xEC6 PUSH2 0x18D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0xEE6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF11 JUMP JUMPDEST DUP1 PUSH2 0xEF0 DUP5 PUSH2 0x1969 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF01 SWAP3 SWAP2 SWAP1 PUSH2 0x2CCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFB5 PUSH2 0x1446 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1027 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x101E SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1030 DUP2 PUSH2 0x14EB JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10A9 DUP4 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x111C JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1113 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1177 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1A74 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0xB PUSH1 0x1 PUSH1 0xB DUP1 SLOAD SWAP1 POP PUSH2 0x11D6 SWAP2 SWAP1 PUSH2 0x2A67 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x11E7 JUMPI PUSH2 0x11E6 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0xB DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1229 JUMPI PUSH2 0x1228 PUSH2 0x2CF3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0xE PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xB DUP1 SLOAD DUP1 PUSH2 0x12C7 JUMPI PUSH2 0x12C6 PUSH2 0x2D22 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE PUSH1 0xE PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x13B6 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AD SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13CA DUP4 DUP4 PUSH2 0x13C5 PUSH2 0x1162 JUMP JUMPDEST PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1440 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1437 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x144E PUSH2 0x1162 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x146C PUSH2 0xC3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14CB JUMPI PUSH2 0x148F PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x14E7 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1E53 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1622 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1619 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1713 SWAP2 SWAP1 PUSH2 0x22F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x18D1 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1764 PUSH2 0x1162 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1786 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DDD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x17C2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BF SWAP2 SWAP1 PUSH2 0x2E3E JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1846 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x17F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x183E JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1835 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x18CF JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18C6 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x8 DUP1 SLOAD PUSH2 0x18E6 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1912 SWAP1 PUSH2 0x2909 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x195F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1934 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x195F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1942 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1978 DUP5 PUSH2 0x1E6F JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1997 JUMPI PUSH2 0x1996 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19C9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1A2C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1A20 JUMPI PUSH2 0x1A1F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x19D7 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1AAD JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1BE1 JUMPI PUSH1 0x0 PUSH2 0x1ABD DUP5 PUSH2 0x109D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B28 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1B3B JUMPI POP PUSH2 0x1B39 DUP2 DUP5 PUSH2 0xF19 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B7D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B74 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1BDF JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C45 DUP5 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C87 JUMPI PUSH2 0x1C86 DUP2 DUP5 DUP7 PUSH2 0x1FC2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D18 JUMPI PUSH2 0x1CC9 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1A74 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D9B JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E5D DUP4 DUP4 PUSH2 0x2086 JUMP JUMPDEST PUSH2 0x1E6A PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1720 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1ECD JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1EC3 JUMPI PUSH2 0x1EC2 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1F0A JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1F00 JUMPI PUSH2 0x1EFF PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1F39 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1F2F JUMPI PUSH2 0x1F2E PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1F62 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1F58 JUMPI PUSH2 0x1F57 PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1F87 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1F7D JUMPI PUSH2 0x1F7C PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1FAA JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1FA0 JUMPI PUSH2 0x1F9F PUSH2 0x2E6B JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x1FB9 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FCD DUP4 DUP4 DUP4 PUSH2 0x217F JUMP JUMPDEST PUSH2 0x2081 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2042 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2039 SWAP2 SWAP1 PUSH2 0x265B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2078 SWAP3 SWAP2 SWAP1 PUSH2 0x2E9A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20F8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20EF SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2106 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1C39 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x217A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2171 SWAP2 SWAP1 PUSH2 0x2465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2237 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x21F8 JUMPI POP PUSH2 0x21F7 DUP5 DUP5 PUSH2 0xF19 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2236 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x221E DUP4 PUSH2 0x1125 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2289 DUP2 PUSH2 0x2254 JUMP JUMPDEST DUP2 EQ PUSH2 0x2294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22A6 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22C2 JUMPI PUSH2 0x22C1 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22D0 DUP5 DUP3 DUP6 ADD PUSH2 0x2297 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22EE DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2309 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2349 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x232E JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2371 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x237B DUP2 DUP6 PUSH2 0x231A JUMP JUMPDEST SWAP4 POP PUSH2 0x238B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2394 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23B9 DUP2 DUP5 PUSH2 0x2366 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23D4 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP2 EQ PUSH2 0x23DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23F1 DUP2 PUSH2 0x23CB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x240D JUMPI PUSH2 0x240C PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x241B DUP5 DUP3 DUP6 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x244F DUP3 PUSH2 0x2424 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x245F DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x247A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2489 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP2 EQ PUSH2 0x2494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24A6 DUP2 PUSH2 0x2480 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24C3 JUMPI PUSH2 0x24C2 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24E2 DUP6 DUP3 DUP7 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2505 JUMPI PUSH2 0x2504 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2513 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2524 DUP7 DUP3 DUP8 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2535 DUP7 DUP3 DUP8 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2555 JUMPI PUSH2 0x2554 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2563 DUP5 DUP3 DUP6 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25A1 DUP2 PUSH2 0x2444 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B3 DUP4 DUP4 PUSH2 0x2598 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25D7 DUP3 PUSH2 0x256C JUMP JUMPDEST PUSH2 0x25E1 DUP2 DUP6 PUSH2 0x2577 JUMP JUMPDEST SWAP4 POP PUSH2 0x25EC DUP4 PUSH2 0x2588 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x261D JUMPI DUP2 MLOAD PUSH2 0x2604 DUP9 DUP3 PUSH2 0x25A7 JUMP JUMPDEST SWAP8 POP PUSH2 0x260F DUP4 PUSH2 0x25BF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25F0 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2644 DUP2 DUP5 PUSH2 0x25CC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2655 DUP2 PUSH2 0x23C1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2670 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x267F DUP2 PUSH2 0x22D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x268A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x269C DUP2 PUSH2 0x2676 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26B9 JUMPI PUSH2 0x26B8 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26C7 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26D8 DUP6 DUP3 DUP7 ADD PUSH2 0x268D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2724 DUP3 PUSH2 0x2355 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2743 JUMPI PUSH2 0x2742 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2756 PUSH2 0x2240 JUMP JUMPDEST SWAP1 POP PUSH2 0x2762 DUP3 DUP3 PUSH2 0x271B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2782 JUMPI PUSH2 0x2781 PUSH2 0x26EC JUMP JUMPDEST JUMPDEST PUSH2 0x278B DUP3 PUSH2 0x2355 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27BA PUSH2 0x27B5 DUP5 PUSH2 0x2767 JUMP JUMPDEST PUSH2 0x274C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x27D6 JUMPI PUSH2 0x27D5 PUSH2 0x26E7 JUMP JUMPDEST JUMPDEST PUSH2 0x27E1 DUP5 DUP3 DUP6 PUSH2 0x2798 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27FE JUMPI PUSH2 0x27FD PUSH2 0x26E2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x280E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27A7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2831 JUMPI PUSH2 0x2830 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x283F DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2850 DUP8 DUP3 DUP9 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2861 DUP8 DUP3 DUP9 ADD PUSH2 0x23E2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2882 JUMPI PUSH2 0x2881 PUSH2 0x224F JUMP JUMPDEST JUMPDEST PUSH2 0x288E DUP8 DUP3 DUP9 ADD PUSH2 0x27E9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28B1 JUMPI PUSH2 0x28B0 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28BF DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28D0 DUP6 DUP3 DUP7 ADD PUSH2 0x2497 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2921 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2934 JUMPI PUSH2 0x2933 PUSH2 0x28DA JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2061207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2996 PUSH1 0x21 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x29A1 DUP3 PUSH2 0x293A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x29C5 DUP2 PUSH2 0x2989 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x526563697069656E7420616C7265616479206F776E73206120504F4150000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A02 PUSH1 0x1D DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2A0D DUP3 PUSH2 0x29CC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A31 DUP2 PUSH2 0x29F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2A72 DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2A7D DUP4 PUSH2 0x23C1 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2A95 JUMPI PUSH2 0x2A94 PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4164647265737320686173206E6F74207369676E65642075702E000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD1 PUSH1 0x1A DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2ADC DUP3 PUSH2 0x2A9B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B00 DUP2 PUSH2 0x2AC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4164647265737320616C7265616479206F776E73206120504F41500000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B3D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2B48 DUP3 PUSH2 0x2B07 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B6C DUP2 PUSH2 0x2B30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B7E DUP3 PUSH2 0x23C1 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2BB0 JUMPI PUSH2 0x2BAF PUSH2 0x2A38 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5369676E2D757073206172652063757272656E746C792064697361626C65642E PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BF1 PUSH1 0x20 DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2BFC DUP3 PUSH2 0x2BBB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C20 DUP2 PUSH2 0x2BE4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x596F75206861766520616C7265616479207369676E65642075702E0000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5D PUSH1 0x1B DUP4 PUSH2 0x231A JUMP JUMPDEST SWAP2 POP PUSH2 0x2C68 DUP3 PUSH2 0x2C27 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C8C DUP2 PUSH2 0x2C50 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CA9 DUP3 PUSH2 0x230F JUMP JUMPDEST PUSH2 0x2CB3 DUP2 DUP6 PUSH2 0x2C93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2CC3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CDB DUP3 DUP6 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP PUSH2 0x2CE7 DUP3 DUP5 PUSH2 0x2C9E JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2D66 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2D73 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST PUSH2 0x2D80 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2456 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DAF DUP3 PUSH2 0x2D88 JUMP JUMPDEST PUSH2 0x2DB9 DUP2 DUP6 PUSH2 0x2D93 JUMP JUMPDEST SWAP4 POP PUSH2 0x2DC9 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x232B JUMP JUMPDEST PUSH2 0x2DD2 DUP2 PUSH2 0x2355 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DF2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2DFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2E0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x264C JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2E1E DUP2 DUP5 PUSH2 0x2DA4 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E38 DUP2 PUSH2 0x2280 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E54 JUMPI PUSH2 0x2E53 PUSH2 0x224A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E62 DUP5 DUP3 DUP6 ADD PUSH2 0x2E29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2EAF PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2456 JUMP JUMPDEST PUSH2 0x2EBC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x264C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0xD576B79BB2CE0B45BC0BE17068C0 SWAP6 0xCC SWAP3 PUSH2 0x2D30 0xC3 MUL 0xFB PUSH8 0xE1B387076E2D8E64 PUSH20 0x6F6C634300081800330000000000000000000000 ","sourceMap":"218:2664:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1561:300:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3497:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3323:113;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1739:569:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;386:24;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;416:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1377:356;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4787:132:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;291:21:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2786:92;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2185:118:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1920:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;:::i;:::-;;318:26:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;350:30;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1638:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2518:93:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;995:88:13;;;:::i;:::-;;3718:144:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4985:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1128:243:13;;;:::i;:::-;;2677:255:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3928:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1561:300:2;1663:4;1713:25;1698:40;;;:11;:40;;;;:104;;;;1769:33;1754:48;;;:11;:48;;;;1698:104;:156;;;;1818:36;1842:11;1818:23;:36::i;:::-;1698:156;1679:175;;1561:300;;;:::o;2365:89::-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;;3623:21;3636:7;3623:12;:21::i;:::-;3616:28;;3497:154;;;:::o;3323:113::-;3394:35;3403:2;3407:7;3416:12;:10;:12::i;:::-;3394:8;:35::i;:::-;3323:113;;:::o;1739:569:13:-;1852:1;1838:16;;:2;:16;;;1830:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;1927:1;1910:13;1920:2;1910:9;:13::i;:::-;:18;1902:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;2031:1;2012:15;2022:4;2012:9;:15::i;:::-;:20;2008:70;;2048:19;2062:4;2048:13;:19::i;:::-;2008:70;2109:1;2092:13;2102:2;2092:9;:13::i;:::-;:18;2088:115;;2126:7;2139:2;2126:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2191:1;2174:7;:14;;;;:18;;;;:::i;:::-;2156:11;:15;2168:2;2156:15;;;;;;;;;;;;;;;:36;;;;2088:115;2264:37;2283:4;2289:2;2293:7;2264:18;:37::i;:::-;1739:569;;;:::o;386:24::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;416:25::-;;;;;;;;;;;;;:::o;1377:356::-;1531:13:0;:11;:13::i;:::-;1442:12:13::1;:16;1455:2;1442:16;;;;;;;;;;;;;;;;;;;;;;;;;1434:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1524:1;1507:13;1517:2;1507:9;:13::i;:::-;:18;1499:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;1567:15;1585:12;;:14;;;;;;;;;:::i;:::-;;;;;1567:32;;1609:22;1619:2;1623:7;1609:9;:22::i;:::-;1641:11;;:13;;;;;;;;;:::i;:::-;;;;;;1664:7;1677:2;1664:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1725:1;1708:7;:14;;;;:18;;;;:::i;:::-;1690:11;:15;1702:2;1690:15;;;;;;;;;;;;;;;:36;;;;1424:309;1377:356:::0;:::o;4787:132:2:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;:::-;4787:132;;;:::o;291:21:13:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2786:92::-;2829:16;2864:7;2857:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2786:92;:::o;2185:118:2:-;2248:7;2274:22;2288:7;2274:13;:22::i;:::-;2267:29;;2185:118;;;:::o;1920:208::-;1983:7;2023:1;2006:19;;:5;:19;;;2002:87;;2075:1;2048:30;;;;;;;;;;;:::i;:::-;;;;;;;;2002:87;2105:9;:16;2115:5;2105:16;;;;;;;;;;;;;;;;2098:23;;1920:208;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;318:26:13:-;;;;:::o;350:30::-;;;;:::o;1638:85:0:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2518:93:2:-;2565:13;2597:7;2590:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2518:93;:::o;995:88:13:-;1531:13:0;:11;:13::i;:::-;1063::13::1;;;;;;;;;;;1062:14;1046:13;;:30;;;;;;;;;;;;;;;;;;995:88::o:0;3718:144:2:-;3803:52;3822:12;:10;:12::i;:::-;3836:8;3846;3803:18;:52::i;:::-;3718:144;;:::o;4985:208::-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;:::-;4985:208;;;;:::o;1128:243:13:-;1171:13;;;;;;;;;;;1163:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;1240:12;:24;1253:10;1240:24;;;;;;;;;;;;;;;;;;;;;;;;;1239:25;1231:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;1333:4;1306:12;:24;1319:10;1306:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;1347:15;;:17;;;;;;;;;:::i;:::-;;;;;;1128:243::o;2677:255:2:-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;:8;:10::i;:::-;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2850:75;2843:82;;;2677:255;;;:::o;3928:153::-;4016:4;4039:18;:25;4058:5;4039:25;;;;;;;;;;;;;;;:35;4065:8;4039:35;;;;;;;;;;;;;;;;;;;;;;;;;4032:42;;3928:153;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;762:146:8:-;838:4;876:25;861:40;;;:11;:40;;;;854:47;;762:146;;;:::o;16138:241:2:-;16201:7;16220:13;16236:17;16245:7;16236:8;:17::i;:::-;16220:33;;16284:1;16267:19;;:5;:19;;;16263:88;;16332:7;16309:31;;;;;;;;;;;:::i;:::-;;;;;;;;16263:88;16367:5;16360:12;;;16138:241;;;:::o;5938:127::-;6008:7;6034:15;:24;6050:7;6034:24;;;;;;;;;;;;;;;;;;;;;6027:31;;5938:127;;;:::o;656:96:6:-;709:7;735:10;728:17;;656:96;:::o;14418:120:2:-;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;:::-;14418:120;;;:::o;2314:467:13:-;2371:13;2387:11;:19;2399:6;2387:19;;;;;;;;;;;;;;;;2371:35;;2416:18;2437:7;2462:1;2445:7;:14;;;;:18;;;;:::i;:::-;2437:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2416:48;;2500:10;2483:7;2491:5;2483:14;;;;;;;;:::i;:::-;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2597:5;2571:11;:23;2583:10;2571:23;;;;;;;;;;;;;;;:31;;;;2648:7;:13;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2704:11;:19;2716:6;2704:19;;;;;;;;;;;;;;;2697:26;;;2361:420;;2314:467;:::o;4143:578:2:-;4251:1;4237:16;;:2;:16;;;4233:87;;4306:1;4276:33;;;;;;;;;;;:::i;:::-;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;4583:12;:10;:12::i;:::-;4562:7;:34::i;:::-;4538:58;;4627:4;4610:21;;:13;:21;;;4606:109;;4675:4;4681:7;4690:13;4654:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4606:109;4223:498;4143:578;;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;10633:100:2:-;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;:::-;10633:100;;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;15591:312:2:-;15718:1;15698:22;;:8;:22;;;15694:91;;15765:8;15743:31;;;;;;;;;;;:::i;:::-;;;;;;;;15694:91;15832:8;15794:18;:25;15813:5;15794:25;;;;;;;;;;;;;;;:35;15820:8;15794:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15877:8;15855:41;;15870:5;15855:41;;;15887:8;15855:41;;;;;;:::i;:::-;;;;;;;;15591:312;;;:::o;16918:782::-;17051:1;17034:2;:14;;;:18;17030:664;;;17088:2;17072:36;;;17109:12;:10;:12::i;:::-;17123:4;17129:7;17138:4;17072:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17398:1;17381:6;:13;:18;17377:293;;17452:2;17430:25;;;;;;;;;;;:::i;:::-;;;;;;;;17377:293;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;17200:41;;;17190:51;;;:6;:51;;;;17186:130;;17294:2;17272:25;;;;;;;;;;;:::i;:::-;;;;;;;;17186:130;17144:186;17030:664;16918:782;;;;:::o;831:98:13:-;883:13;915:7;908:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;831:98;:::o;637:698:7:-;693:13;742:14;779:1;759:17;770:5;759:10;:17::i;:::-;:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;794:41;;849:11;975:6;971:2;967:15;959:6;955:28;948:35;;1010:282;1017:4;1010:282;;;1041:5;;;;;;;;1180:10;1175:2;1168:5;1164:14;1159:32;1154:3;1146:46;1236:2;1227:11;;;;;;:::i;:::-;;;;;1269:1;1260:5;:10;1010:282;1256:21;1010:282;1312:6;1305:13;;;;;637:698;;;:::o;5707:115:2:-;5773:7;5799;:16;5807:7;5799:16;;;;;;;;;;;;;;;;;;;;;5792:23;;5707:115;;;:::o;14720:662::-;14880:9;:31;;;;14909:1;14893:18;;:4;:18;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;;15109:1;15093:18;;:4;:18;;;;:35;;;;;15124:4;15115:13;;:5;:13;;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15211:4;15189:27;;;;;;;;;;;:::i;:::-;;;;;;;;15089:142;15249:9;15245:81;;;15303:7;15299:2;15283:28;;15292:5;15283:28;;;;;;;;;;;;15245:81;14913:423;14876:460;15373:2;15346:15;:24;15362:7;15346:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14720:662;;;;:::o;8838:795::-;8924:7;8943:12;8958:17;8967:7;8958:8;:17::i;:::-;8943:32;;9051:1;9035:18;;:4;:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;9031:86;9177:1;9161:18;;:4;:18;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;9387:1;9368:9;:15;9378:4;9368:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;9157:256;9441:1;9427:16;;:2;:16;;;9423:107;;9504:1;9487:9;:13;9497:2;9487:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9423:107;9559:2;9540:7;:16;9548:7;9540:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9596:7;9592:2;9577:27;;9586:4;9577:27;;;;;;;;;;;;9622:4;9615:11;;;8838:795;;;;;:::o;10954:182::-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;:::-;10954:182;;;:::o;12214:916:10:-;12267:7;12286:14;12303:1;12286:18;;12351:8;12342:5;:17;12338:103;;12388:8;12379:17;;;;;;:::i;:::-;;;;;12424:2;12414:12;;;;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;;;;:::i;:::-;;;;;12540:2;12530:12;;;;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;;;;:::i;:::-;;;;;12656:2;12646:12;;;;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;;;;:::i;:::-;;;;;12770:1;12760:11;;;;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;;;;:::i;:::-;;;;;12883:1;12873:11;;;;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;;;;:::i;:::-;;;;;12996:1;12986:11;;;;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;;;;13025:66;13117:6;13110:13;;;12214:916;;;:::o;7082:368:2:-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;7269:1;7252:19;;:5;:19;;;7248:186;;7321:7;7298:31;;;;;;;;;;;:::i;:::-;;;;;;;;7248:186;7402:7;7411;7375:44;;;;;;;;;;;;:::i;:::-;;;;;;;;7189:255;7082:368;;;:::o;9955:327::-;10036:1;10022:16;;:2;:16;;;10018:87;;10091:1;10061:33;;;;;;;;;;;:::i;:::-;;;;;;;;10018:87;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;;10209:1;10184:27;;:13;:27;;;10180:96;;10262:1;10234:31;;;;;;;;;;;:::i;:::-;;;;;;;;10180:96;10008:274;9955:327;;:::o;6376:272::-;6479:4;6533:1;6514:21;;:7;:21;;;;:127;;;;;6561:7;6552:16;;:5;:16;;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:52;:88;;;;6633:7;6608:32;;:21;6621:7;6608:12;:21::i;:::-;:32;;;6552:88;6514:127;6495:146;;6376:272;;;;;:::o;7:75:14:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:329::-;5574:6;5623:2;5611:9;5602:7;5598:23;5594:32;5591:119;;;5629:79;;:::i;:::-;5591:119;5749:1;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5720:117;5515:329;;;;:::o;5850:114::-;5917:6;5951:5;5945:12;5935:22;;5850:114;;;:::o;5970:184::-;6069:11;6103:6;6098:3;6091:19;6143:4;6138:3;6134:14;6119:29;;5970:184;;;;:::o;6160:132::-;6227:4;6250:3;6242:11;;6280:4;6275:3;6271:14;6263:22;;6160:132;;;:::o;6298:108::-;6375:24;6393:5;6375:24;:::i;:::-;6370:3;6363:37;6298:108;;:::o;6412:179::-;6481:10;6502:46;6544:3;6536:6;6502:46;:::i;:::-;6580:4;6575:3;6571:14;6557:28;;6412:179;;;;:::o;6597:113::-;6667:4;6699;6694:3;6690:14;6682:22;;6597:113;;;:::o;6746:732::-;6865:3;6894:54;6942:5;6894:54;:::i;:::-;6964:86;7043:6;7038:3;6964:86;:::i;:::-;6957:93;;7074:56;7124:5;7074:56;:::i;:::-;7153:7;7184:1;7169:284;7194:6;7191:1;7188:13;7169:284;;;7270:6;7264:13;7297:63;7356:3;7341:13;7297:63;:::i;:::-;7290:70;;7383:60;7436:6;7383:60;:::i;:::-;7373:70;;7229:224;7216:1;7213;7209:9;7204:14;;7169:284;;;7173:14;7469:3;7462:10;;6870:608;;;6746:732;;;;:::o;7484:373::-;7627:4;7665:2;7654:9;7650:18;7642:26;;7714:9;7708:4;7704:20;7700:1;7689:9;7685:17;7678:47;7742:108;7845:4;7836:6;7742:108;:::i;:::-;7734:116;;7484:373;;;;:::o;7863:118::-;7950:24;7968:5;7950:24;:::i;:::-;7945:3;7938:37;7863:118;;:::o;7987:222::-;8080:4;8118:2;8107:9;8103:18;8095:26;;8131:71;8199:1;8188:9;8184:17;8175:6;8131:71;:::i;:::-;7987:222;;;;:::o;8215:116::-;8285:21;8300:5;8285:21;:::i;:::-;8278:5;8275:32;8265:60;;8321:1;8318;8311:12;8265:60;8215:116;:::o;8337:133::-;8380:5;8418:6;8405:20;8396:29;;8434:30;8458:5;8434:30;:::i;:::-;8337:133;;;;:::o;8476:468::-;8541:6;8549;8598:2;8586:9;8577:7;8573:23;8569:32;8566:119;;;8604:79;;:::i;:::-;8566:119;8724:1;8749:53;8794:7;8785:6;8774:9;8770:22;8749:53;:::i;:::-;8739:63;;8695:117;8851:2;8877:50;8919:7;8910:6;8899:9;8895:22;8877:50;:::i;:::-;8867:60;;8822:115;8476:468;;;;;:::o;8950:117::-;9059:1;9056;9049:12;9073:117;9182:1;9179;9172:12;9196:180;9244:77;9241:1;9234:88;9341:4;9338:1;9331:15;9365:4;9362:1;9355:15;9382:281;9465:27;9487:4;9465:27;:::i;:::-;9457:6;9453:40;9595:6;9583:10;9580:22;9559:18;9547:10;9544:34;9541:62;9538:88;;;9606:18;;:::i;:::-;9538:88;9646:10;9642:2;9635:22;9425:238;9382:281;;:::o;9669:129::-;9703:6;9730:20;;:::i;:::-;9720:30;;9759:33;9787:4;9779:6;9759:33;:::i;:::-;9669:129;;;:::o;9804:307::-;9865:4;9955:18;9947:6;9944:30;9941:56;;;9977:18;;:::i;:::-;9941:56;10015:29;10037:6;10015:29;:::i;:::-;10007:37;;10099:4;10093;10089:15;10081:23;;9804:307;;;:::o;10117:146::-;10214:6;10209:3;10204;10191:30;10255:1;10246:6;10241:3;10237:16;10230:27;10117:146;;;:::o;10269:423::-;10346:5;10371:65;10387:48;10428:6;10387:48;:::i;:::-;10371:65;:::i;:::-;10362:74;;10459:6;10452:5;10445:21;10497:4;10490:5;10486:16;10535:3;10526:6;10521:3;10517:16;10514:25;10511:112;;;10542:79;;:::i;:::-;10511:112;10632:54;10679:6;10674:3;10669;10632:54;:::i;:::-;10352:340;10269:423;;;;;:::o;10711:338::-;10766:5;10815:3;10808:4;10800:6;10796:17;10792:27;10782:122;;10823:79;;:::i;:::-;10782:122;10940:6;10927:20;10965:78;11039:3;11031:6;11024:4;11016:6;11012:17;10965:78;:::i;:::-;10956:87;;10772:277;10711:338;;;;:::o;11055:943::-;11150:6;11158;11166;11174;11223:3;11211:9;11202:7;11198:23;11194:33;11191:120;;;11230:79;;:::i;:::-;11191:120;11350:1;11375:53;11420:7;11411:6;11400:9;11396:22;11375:53;:::i;:::-;11365:63;;11321:117;11477:2;11503:53;11548:7;11539:6;11528:9;11524:22;11503:53;:::i;:::-;11493:63;;11448:118;11605:2;11631:53;11676:7;11667:6;11656:9;11652:22;11631:53;:::i;:::-;11621:63;;11576:118;11761:2;11750:9;11746:18;11733:32;11792:18;11784:6;11781:30;11778:117;;;11814:79;;:::i;:::-;11778:117;11919:62;11973:7;11964:6;11953:9;11949:22;11919:62;:::i;:::-;11909:72;;11704:287;11055:943;;;;;;;:::o;12004:474::-;12072:6;12080;12129:2;12117:9;12108:7;12104:23;12100:32;12097:119;;;12135:79;;:::i;:::-;12097:119;12255:1;12280:53;12325:7;12316:6;12305:9;12301:22;12280:53;:::i;:::-;12270:63;;12226:117;12382:2;12408:53;12453:7;12444:6;12433:9;12429:22;12408:53;:::i;:::-;12398:63;;12353:118;12004:474;;;;;:::o;12484:180::-;12532:77;12529:1;12522:88;12629:4;12626:1;12619:15;12653:4;12650:1;12643:15;12670:320;12714:6;12751:1;12745:4;12741:12;12731:22;;12798:1;12792:4;12788:12;12819:18;12809:81;;12875:4;12867:6;12863:17;12853:27;;12809:81;12937:2;12929:6;12926:14;12906:18;12903:38;12900:84;;12956:18;;:::i;:::-;12900:84;12721:269;12670:320;;;:::o;12996:220::-;13136:34;13132:1;13124:6;13120:14;13113:58;13205:3;13200:2;13192:6;13188:15;13181:28;12996:220;:::o;13222:366::-;13364:3;13385:67;13449:2;13444:3;13385:67;:::i;:::-;13378:74;;13461:93;13550:3;13461:93;:::i;:::-;13579:2;13574:3;13570:12;13563:19;;13222:366;;;:::o;13594:419::-;13760:4;13798:2;13787:9;13783:18;13775:26;;13847:9;13841:4;13837:20;13833:1;13822:9;13818:17;13811:47;13875:131;14001:4;13875:131;:::i;:::-;13867:139;;13594:419;;;:::o;14019:179::-;14159:31;14155:1;14147:6;14143:14;14136:55;14019:179;:::o;14204:366::-;14346:3;14367:67;14431:2;14426:3;14367:67;:::i;:::-;14360:74;;14443:93;14532:3;14443:93;:::i;:::-;14561:2;14556:3;14552:12;14545:19;;14204:366;;;:::o;14576:419::-;14742:4;14780:2;14769:9;14765:18;14757:26;;14829:9;14823:4;14819:20;14815:1;14804:9;14800:17;14793:47;14857:131;14983:4;14857:131;:::i;:::-;14849:139;;14576:419;;;:::o;15001:180::-;15049:77;15046:1;15039:88;15146:4;15143:1;15136:15;15170:4;15167:1;15160:15;15187:194;15227:4;15247:20;15265:1;15247:20;:::i;:::-;15242:25;;15281:20;15299:1;15281:20;:::i;:::-;15276:25;;15325:1;15322;15318:9;15310:17;;15349:1;15343:4;15340:11;15337:37;;;15354:18;;:::i;:::-;15337:37;15187:194;;;;:::o;15387:176::-;15527:28;15523:1;15515:6;15511:14;15504:52;15387:176;:::o;15569:366::-;15711:3;15732:67;15796:2;15791:3;15732:67;:::i;:::-;15725:74;;15808:93;15897:3;15808:93;:::i;:::-;15926:2;15921:3;15917:12;15910:19;;15569:366;;;:::o;15941:419::-;16107:4;16145:2;16134:9;16130:18;16122:26;;16194:9;16188:4;16184:20;16180:1;16169:9;16165:17;16158:47;16222:131;16348:4;16222:131;:::i;:::-;16214:139;;15941:419;;;:::o;16366:177::-;16506:29;16502:1;16494:6;16490:14;16483:53;16366:177;:::o;16549:366::-;16691:3;16712:67;16776:2;16771:3;16712:67;:::i;:::-;16705:74;;16788:93;16877:3;16788:93;:::i;:::-;16906:2;16901:3;16897:12;16890:19;;16549:366;;;:::o;16921:419::-;17087:4;17125:2;17114:9;17110:18;17102:26;;17174:9;17168:4;17164:20;17160:1;17149:9;17145:17;17138:47;17202:131;17328:4;17202:131;:::i;:::-;17194:139;;16921:419;;;:::o;17346:233::-;17385:3;17408:24;17426:5;17408:24;:::i;:::-;17399:33;;17454:66;17447:5;17444:77;17441:103;;17524:18;;:::i;:::-;17441:103;17571:1;17564:5;17560:13;17553:20;;17346:233;;;:::o;17585:182::-;17725:34;17721:1;17713:6;17709:14;17702:58;17585:182;:::o;17773:366::-;17915:3;17936:67;18000:2;17995:3;17936:67;:::i;:::-;17929:74;;18012:93;18101:3;18012:93;:::i;:::-;18130:2;18125:3;18121:12;18114:19;;17773:366;;;:::o;18145:419::-;18311:4;18349:2;18338:9;18334:18;18326:26;;18398:9;18392:4;18388:20;18384:1;18373:9;18369:17;18362:47;18426:131;18552:4;18426:131;:::i;:::-;18418:139;;18145:419;;;:::o;18570:177::-;18710:29;18706:1;18698:6;18694:14;18687:53;18570:177;:::o;18753:366::-;18895:3;18916:67;18980:2;18975:3;18916:67;:::i;:::-;18909:74;;18992:93;19081:3;18992:93;:::i;:::-;19110:2;19105:3;19101:12;19094:19;;18753:366;;;:::o;19125:419::-;19291:4;19329:2;19318:9;19314:18;19306:26;;19378:9;19372:4;19368:20;19364:1;19353:9;19349:17;19342:47;19406:131;19532:4;19406:131;:::i;:::-;19398:139;;19125:419;;;:::o;19550:148::-;19652:11;19689:3;19674:18;;19550:148;;;;:::o;19704:390::-;19810:3;19838:39;19871:5;19838:39;:::i;:::-;19893:89;19975:6;19970:3;19893:89;:::i;:::-;19886:96;;19991:65;20049:6;20044:3;20037:4;20030:5;20026:16;19991:65;:::i;:::-;20081:6;20076:3;20072:16;20065:23;;19814:280;19704:390;;;;:::o;20100:435::-;20280:3;20302:95;20393:3;20384:6;20302:95;:::i;:::-;20295:102;;20414:95;20505:3;20496:6;20414:95;:::i;:::-;20407:102;;20526:3;20519:10;;20100:435;;;;;:::o;20541:180::-;20589:77;20586:1;20579:88;20686:4;20683:1;20676:15;20710:4;20707:1;20700:15;20727:180;20775:77;20772:1;20765:88;20872:4;20869:1;20862:15;20896:4;20893:1;20886:15;20913:442;21062:4;21100:2;21089:9;21085:18;21077:26;;21113:71;21181:1;21170:9;21166:17;21157:6;21113:71;:::i;:::-;21194:72;21262:2;21251:9;21247:18;21238:6;21194:72;:::i;:::-;21276;21344:2;21333:9;21329:18;21320:6;21276:72;:::i;:::-;20913:442;;;;;;:::o;21361:98::-;21412:6;21446:5;21440:12;21430:22;;21361:98;;;:::o;21465:168::-;21548:11;21582:6;21577:3;21570:19;21622:4;21617:3;21613:14;21598:29;;21465:168;;;;:::o;21639:373::-;21725:3;21753:38;21785:5;21753:38;:::i;:::-;21807:70;21870:6;21865:3;21807:70;:::i;:::-;21800:77;;21886:65;21944:6;21939:3;21932:4;21925:5;21921:16;21886:65;:::i;:::-;21976:29;21998:6;21976:29;:::i;:::-;21971:3;21967:39;21960:46;;21729:283;21639:373;;;;:::o;22018:640::-;22213:4;22251:3;22240:9;22236:19;22228:27;;22265:71;22333:1;22322:9;22318:17;22309:6;22265:71;:::i;:::-;22346:72;22414:2;22403:9;22399:18;22390:6;22346:72;:::i;:::-;22428;22496:2;22485:9;22481:18;22472:6;22428:72;:::i;:::-;22547:9;22541:4;22537:20;22532:2;22521:9;22517:18;22510:48;22575:76;22646:4;22637:6;22575:76;:::i;:::-;22567:84;;22018:640;;;;;;;:::o;22664:141::-;22720:5;22751:6;22745:13;22736:22;;22767:32;22793:5;22767:32;:::i;:::-;22664:141;;;;:::o;22811:349::-;22880:6;22929:2;22917:9;22908:7;22904:23;22900:32;22897:119;;;22935:79;;:::i;:::-;22897:119;23055:1;23080:63;23135:7;23126:6;23115:9;23111:22;23080:63;:::i;:::-;23070:73;;23026:127;22811:349;;;;:::o;23166:180::-;23214:77;23211:1;23204:88;23311:4;23308:1;23301:15;23335:4;23332:1;23325:15;23352:332;23473:4;23511:2;23500:9;23496:18;23488:26;;23524:71;23592:1;23581:9;23577:17;23568:6;23524:71;:::i;:::-;23605:72;23673:2;23662:9;23658:18;23649:6;23605:72;:::i;:::-;23352:332;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2405000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"infinite","getApproved(uint256)":"infinite","getHolders()":"infinite","holders(uint256)":"5090","isApprovedForAll(address,address)":"infinite","name()":"infinite","owner()":"2633","ownerOf(uint256)":"infinite","poapURL()":"infinite","renounceOwnership()":"infinite","safeMint(address)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","signUp()":"53299","signUpEnabled()":"2494","supportsInterface(bytes4)":"797","symbol()":"infinite","toggleSignUp()":"infinite","tokenSupply()":"2496","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","volunteerSignUp()":"2518"},"internal":{"_baseURI()":"infinite","_removeHolder(address)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","getHolders()":"5fe8e7cc","holders(uint256)":"2a11ced0","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","poapURL()":"54a18d57","renounceOwnership()":"715018a6","safeMint(address)":"40d097c3","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","signUp()":"bf96ae63","signUpEnabled()":"30bee0f1","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","toggleSignUp()":"9b4f7b20","tokenSupply()":"7824407f","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","volunteerSignUp()":"8af05318"}},"metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_poapName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poapShortName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poapURL\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poapURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signUpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSignUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volunteerSignUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Poap.sol\":\"Poap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Poap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity 0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Poap is ERC721, Ownable {\\n    uint256 private _nextTokenId;\\n    string public poapURL;\\n    uint256 public tokenSupply;\\n    uint256 public volunteerSignUp;\\n    address[] public holders;\\n    bool public signUpEnabled;\\n    mapping(address => bool) private signUpWallet;\\n    mapping(address => uint256) private holderIndex; \\n\\n    constructor(\\n        address initialOwner,\\n        string memory _poapName,\\n        string memory _poapShortName,\\n        string memory _poapURL\\n    ) ERC721(_poapName, _poapShortName) Ownable(initialOwner) {\\n        poapURL = _poapURL;\\n        signUpEnabled = true;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return poapURL;\\n    }\\n\\n    // Function for the owner to enable or disable sign-ups\\n    function toggleSignUp() public onlyOwner {\\n        signUpEnabled = !signUpEnabled;\\n    }\\n\\n    // Function to sign up a volunteer\\n    function signUp() public {\\n        require(signUpEnabled, \\\"Sign-ups are currently disabled.\\\");\\n        require(!signUpWallet[msg.sender], \\\"You have already signed up.\\\");\\n        signUpWallet[msg.sender] = true;\\n        volunteerSignUp++;\\n    }\\n\\n    function safeMint(address to) public onlyOwner {\\n        require(signUpWallet[to], \\\"Address has not signed up.\\\");\\n        require(balanceOf(to) == 0, \\\"Address already owns a POAP\\\");\\n        uint256 tokenId = _nextTokenId++;\\n        _safeMint(to, tokenId);\\n        tokenSupply++;\\n        holders.push(to);\\n        holderIndex[to] = holders.length - 1;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\n        require(to != address(0), \\\"Cannot transfer to a zero address\\\");\\n        require(balanceOf(to) == 0, \\\"Recipient already owns a POAP\\\");\\n\\n        // Update the holders list\\n        if (balanceOf(from) == 1) {\\n            _removeHolder(from);\\n        }\\n\\n        if (balanceOf(to) == 0) {\\n            holders.push(to);\\n            holderIndex[to] = holders.length - 1;\\n        }\\n\\n        // Call the original transferFrom function\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function _removeHolder(address holder) private {\\n        uint256 index = holderIndex[holder];\\n        address lastHolder = holders[holders.length - 1];\\n        \\n        holders[index] = lastHolder; // Move the last holder to the index being removed\\n        holderIndex[lastHolder] = index; // Update the moved holder's index\\n\\n        holders.pop(); // Remove the last holder\\n        delete holderIndex[holder]; // Delete the index of the removed holder\\n        \\n    }\\n    function getHolders() public view returns (address[] memory) {\\n        return holders;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xc55ed542c7b02eedb9df536ed27f9df1e40fcd05da4af35aac4128292dab7b6f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":317,"contract":"contracts/Poap.sol:Poap","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":319,"contract":"contracts/Poap.sol:Poap","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":323,"contract":"contracts/Poap.sol:Poap","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":327,"contract":"contracts/Poap.sol:Poap","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":331,"contract":"contracts/Poap.sol:Poap","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":337,"contract":"contracts/Poap.sol:Poap","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":8,"contract":"contracts/Poap.sol:Poap","label":"_owner","offset":0,"slot":"6","type":"t_address"},{"astId":3006,"contract":"contracts/Poap.sol:Poap","label":"_nextTokenId","offset":0,"slot":"7","type":"t_uint256"},{"astId":3008,"contract":"contracts/Poap.sol:Poap","label":"poapURL","offset":0,"slot":"8","type":"t_string_storage"},{"astId":3010,"contract":"contracts/Poap.sol:Poap","label":"tokenSupply","offset":0,"slot":"9","type":"t_uint256"},{"astId":3012,"contract":"contracts/Poap.sol:Poap","label":"volunteerSignUp","offset":0,"slot":"10","type":"t_uint256"},{"astId":3015,"contract":"contracts/Poap.sol:Poap","label":"holders","offset":0,"slot":"11","type":"t_array(t_address)dyn_storage"},{"astId":3017,"contract":"contracts/Poap.sol:Poap","label":"signUpEnabled","offset":0,"slot":"12","type":"t_bool"},{"astId":3021,"contract":"contracts/Poap.sol:Poap","label":"signUpWallet","offset":0,"slot":"13","type":"t_mapping(t_address,t_bool)"},{"astId":3025,"contract":"contracts/Poap.sol:Poap","label":"holderIndex","offset":0,"slot":"14","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}